/*!
 * jquery-timepicker v1.11.5 - A jQuery timepicker plugin inspired by Google Calendar. It supports both mouse and keyboard navigation.
 * Copyright (c) 2016 Jon Thornton - http://jonthornton.github.com/jquery-timepicker/
 * License: MIT
 */

!function(a){"object"==typeof exports&&exports&&"object"==typeof module&&module&&module.exports===exports?a(require("jquery")):"function"==typeof define&&define.amd?define(["jquery"],a):a(jQuery)}(function(a){function b(a){var b=a[0];return b.offsetWidth>0&&b.offsetHeight>0}function c(b){if(b.minTime&&(b.minTime=t(b.minTime)),b.maxTime&&(b.maxTime=t(b.maxTime)),b.durationTime&&"function"!=typeof b.durationTime&&(b.durationTime=t(b.durationTime)),"now"==b.scrollDefault)b.scrollDefault=function(){return b.roundingFunction(t(new Date),b)};else if(b.scrollDefault&&"function"!=typeof b.scrollDefault){var c=b.scrollDefault;b.scrollDefault=function(){return b.roundingFunction(t(c),b)}}else b.minTime&&(b.scrollDefault=function(){return b.roundingFunction(b.minTime,b)});if("string"===a.type(b.timeFormat)&&b.timeFormat.match(/[gh]/)&&(b._twelveHourTime=!0),b.showOnFocus===!1&&-1!=b.showOn.indexOf("focus")&&b.showOn.splice(b.showOn.indexOf("focus"),1),b.disableTimeRanges.length>0){for(var d in b.disableTimeRanges)b.disableTimeRanges[d]=[t(b.disableTimeRanges[d][0]),t(b.disableTimeRanges[d][1])];b.disableTimeRanges=b.disableTimeRanges.sort(function(a,b){return a[0]-b[0]});for(var d=b.disableTimeRanges.length-1;d>0;d--)b.disableTimeRanges[d][0]<=b.disableTimeRanges[d-1][1]&&(b.disableTimeRanges[d-1]=[Math.min(b.disableTimeRanges[d][0],b.disableTimeRanges[d-1][0]),Math.max(b.disableTimeRanges[d][1],b.disableTimeRanges[d-1][1])],b.disableTimeRanges.splice(d,1))}return b}function d(b){var c=b.data("timepicker-settings"),d=b.data("timepicker-list");if(d&&d.length&&(d.remove(),b.data("timepicker-list",!1)),c.useSelect){d=a("<select />",{"class":"ui-timepicker-select"});var g=d}else{d=a("<ul />",{"class":"ui-timepicker-list"});var g=a("<div />",{"class":"ui-timepicker-wrapper",tabindex:-1});g.css({display:"none",position:"absolute"}).append(d)}if(c.noneOption)if(c.noneOption===!0&&(c.noneOption=c.useSelect?"Time...":"None"),a.isArray(c.noneOption)){for(var i in c.noneOption)if(parseInt(i,10)==i){var k=e(c.noneOption[i],c.useSelect);d.append(k)}}else{var k=e(c.noneOption,c.useSelect);d.append(k)}if(c.className&&g.addClass(c.className),(null!==c.minTime||null!==c.durationTime)&&c.showDuration){"function"==typeof c.step?"function":c.step;g.addClass("ui-timepicker-with-duration"),g.addClass("ui-timepicker-step-"+c.step)}var l=c.minTime;"function"==typeof c.durationTime?l=t(c.durationTime()):null!==c.durationTime&&(l=c.durationTime);var n=null!==c.minTime?c.minTime:0,o=null!==c.maxTime?c.maxTime:n+u-1;n>o&&(o+=u),o===u-1&&"string"===a.type(c.timeFormat)&&c.show2400&&(o=u);var p=c.disableTimeRanges,v=0,x=p.length,y=c.step;"function"!=typeof y&&(y=function(){return c.step});for(var i=n,z=0;o>=i;z++,i+=60*y(z)){var A=i,B=s(A,c);if(c.useSelect){var C=a("<option />",{value:B});C.text(B)}else{var C=a("<li />");C.addClass(43200>A%86400?"ui-timepicker-am":"ui-timepicker-pm"),C.data("time",86400>=A?A:A%86400),C.text(B)}if((null!==c.minTime||null!==c.durationTime)&&c.showDuration){var D=r(i-l,c.step);if(c.useSelect)C.text(C.text()+" ("+D+")");else{var E=a("<span />",{"class":"ui-timepicker-duration"});E.text(" ("+D+")"),C.append(E)}}x>v&&(A>=p[v][1]&&(v+=1),p[v]&&A>=p[v][0]&&A<p[v][1]&&(c.useSelect?C.prop("disabled",!0):C.addClass("ui-timepicker-disabled"))),d.append(C)}if(g.data("timepicker-input",b),b.data("timepicker-list",g),c.useSelect)b.val()&&d.val(f(t(b.val()),c)),d.on("focus",function(){a(this).data("timepicker-input").trigger("showTimepicker")}),d.on("blur",function(){a(this).data("timepicker-input").trigger("hideTimepicker")}),d.on("change",function(){m(b,a(this).val(),"select")}),m(b,d.val(),"initial"),b.hide().after(d);else{var F=c.appendTo;"string"==typeof F?F=a(F):"function"==typeof F&&(F=F(b)),F.append(g),j(b,d),d.on("mousedown click","li",function(c){b.off("focus.timepicker"),b.on("focus.timepicker-ie-hack",function(){b.off("focus.timepicker-ie-hack"),b.on("focus.timepicker",w.show)}),h(b)||b[0].focus(),d.find("li").removeClass("ui-timepicker-selected"),a(this).addClass("ui-timepicker-selected"),q(b)&&(b.trigger("hideTimepicker"),d.on("mouseup.timepicker click.timepicker","li",function(a){d.off("mouseup.timepicker click.timepicker"),g.hide()}))})}}function e(b,c){var d,e,f;return"object"==typeof b?(d=b.label,e=b.className,f=b.value):"string"==typeof b?d=b:a.error("Invalid noneOption value"),c?a("<option />",{value:f,"class":e,text:d}):a("<li />",{"class":e,text:d}).data("time",String(f))}function f(a,b){return a=b.roundingFunction(a,b),null!==a?s(a,b):void 0}function g(b){if(b.target!=window){var c=a(b.target);c.closest(".ui-timepicker-input").length||c.closest(".ui-timepicker-wrapper").length||(w.hide(),a(document).unbind(".ui-timepicker"),a(window).unbind(".ui-timepicker"))}}function h(a){var b=a.data("timepicker-settings");return(window.navigator.msMaxTouchPoints||"ontouchstart"in document)&&b.disableTouchKeyboard}function i(b,c,d){if(!d&&0!==d)return!1;var e=b.data("timepicker-settings"),f=!1,d=e.roundingFunction(d,e);return c.find("li").each(function(b,c){var e=a(c);if("number"==typeof e.data("time"))return e.data("time")==d?(f=e,!1):void 0}),f}function j(a,b){b.find("li").removeClass("ui-timepicker-selected");var c=t(l(a),a.data("timepicker-settings"));if(null!==c){var d=i(a,b,c);if(d){var e=d.offset().top-b.offset().top;(e+d.outerHeight()>b.outerHeight()||0>e)&&b.scrollTop(b.scrollTop()+d.position().top-d.outerHeight()),d.addClass("ui-timepicker-selected")}}}function k(b,c){if(""!==this.value&&"timepicker"!=c){var d=a(this);if(!d.is(":focus")||b&&"change"==b.type){var e=d.data("timepicker-settings"),f=t(this.value,e);if(null===f)return void d.trigger("timeFormatError");var g=!1;if(null!==e.minTime&&null!==e.maxTime&&(f<e.minTime||f>e.maxTime)&&(g=!0),a.each(e.disableTimeRanges,function(){return f>=this[0]&&f<this[1]?(g=!0,!1):void 0}),e.forceRoundTime){var h=e.roundingFunction(f,e);h!=f&&(f=h,c=null)}var i=s(f,e);g?m(d,i,"error")&&d.trigger("timeRangeError"):m(d,i,c)}}}function l(a){return a.is("input")?a.val():a.data("ui-timepicker-value")}function m(a,b,c){if(a.is("input")){a.val(b);var d=a.data("timepicker-settings");d.useSelect&&"select"!=c&&"initial"!=c&&a.data("timepicker-list").val(f(t(b),d))}return a.data("ui-timepicker-value")!=b?(a.data("ui-timepicker-value",b),"select"==c?a.trigger("selectTime").trigger("changeTime").trigger("change","timepicker"):-1==["error","initial"].indexOf(c)&&a.trigger("changeTime"),!0):(a.trigger("selectTime"),!1)}function n(a){switch(a.keyCode){case 13:case 9:return;default:a.preventDefault()}}function o(c){var d=a(this),e=d.data("timepicker-list");if(!e||!b(e)){if(40!=c.keyCode)return!0;w.show.call(d.get(0)),e=d.data("timepicker-list"),h(d)||d.focus()}switch(c.keyCode){case 13:return q(d)&&(k.call(d.get(0),{type:"change"}),w.hide.apply(this)),c.preventDefault(),!1;case 38:var f=e.find(".ui-timepicker-selected");return f.length?f.is(":first-child")||(f.removeClass("ui-timepicker-selected"),f.prev().addClass("ui-timepicker-selected"),f.prev().position().top<f.outerHeight()&&e.scrollTop(e.scrollTop()-f.outerHeight())):(e.find("li").each(function(b,c){return a(c).position().top>0?(f=a(c),!1):void 0}),f.addClass("ui-timepicker-selected")),!1;case 40:return f=e.find(".ui-timepicker-selected"),0===f.length?(e.find("li").each(function(b,c){return a(c).position().top>0?(f=a(c),!1):void 0}),f.addClass("ui-timepicker-selected")):f.is(":last-child")||(f.removeClass("ui-timepicker-selected"),f.next().addClass("ui-timepicker-selected"),f.next().position().top+2*f.outerHeight()>e.outerHeight()&&e.scrollTop(e.scrollTop()+f.outerHeight())),!1;case 27:e.find("li").removeClass("ui-timepicker-selected"),w.hide();break;case 9:w.hide();break;default:return!0}}function p(c){var d=a(this),e=d.data("timepicker-list"),f=d.data("timepicker-settings");if(!e||!b(e)||f.disableTextInput)return!0;switch(c.keyCode){case 96:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 77:case 80:case 186:case 8:case 46:f.typeaheadHighlight?j(d,e):e.hide()}}function q(a){var b=a.data("timepicker-settings"),c=a.data("timepicker-list"),d=null,e=c.find(".ui-timepicker-selected");return e.hasClass("ui-timepicker-disabled")?!1:(e.length&&(d=e.data("time")),null!==d&&("string"!=typeof d&&(d=s(d,b)),m(a,d,"select")),!0)}function r(a,b){a=Math.abs(a);var c,d,e=Math.round(a/60),f=[];return 60>e?f=[e,v.mins]:(c=Math.floor(e/60),d=e%60,30==b&&30==d&&(c+=v.decimal+5),f.push(c),f.push(1==c?v.hr:v.hrs),30!=b&&d&&(f.push(d),f.push(v.mins))),f.join(" ")}function s(b,c){if("number"!=typeof b)return null;var d=parseInt(b%60),e=parseInt(b/60%60),f=parseInt(b/3600%24),g=new Date(1970,0,2,f,e,d,0);if(isNaN(g.getTime()))return null;if("function"===a.type(c.timeFormat))return c.timeFormat(g);for(var h,i,j="",k=0;k<c.timeFormat.length;k++)switch(i=c.timeFormat.charAt(k)){case"a":j+=g.getHours()>11?v.pm:v.am;break;case"A":j+=g.getHours()>11?v.PM:v.AM;break;case"g":h=g.getHours()%12,j+=0===h?"12":h;break;case"G":h=g.getHours(),b===u&&(h=c.show2400?24:0),j+=h;break;case"h":h=g.getHours()%12,0!==h&&10>h&&(h="0"+h),j+=0===h?"12":h;break;case"H":h=g.getHours(),b===u&&(h=c.show2400?24:0),j+=h>9?h:"0"+h;break;case"i":var e=g.getMinutes();j+=e>9?e:"0"+e;break;case"s":d=g.getSeconds(),j+=d>9?d:"0"+d;break;case"\\":k++,j+=c.timeFormat.charAt(k);break;default:j+=i}return j}function t(a,b){if(""===a||null===a)return null;if("object"==typeof a)return 3600*a.getHours()+60*a.getMinutes()+a.getSeconds();if("string"!=typeof a)return a;a=a.toLowerCase().replace(/[\s\.]/g,""),("a"==a.slice(-1)||"p"==a.slice(-1))&&(a+="m");var c="("+v.am.replace(".","")+"|"+v.pm.replace(".","")+"|"+v.AM.replace(".","")+"|"+v.PM.replace(".","")+")?",d=new RegExp("^"+c+"([0-9]?[0-9])\\W?([0-5][0-9])?\\W?([0-5][0-9])?"+c+"$"),e=a.match(d);if(!e)return null;var f=parseInt(1*e[2],10);if(f>24){if(b&&b.wrapHours===!1)return null;f%=24}var g=e[1]||e[5],h=f;if(12>=f&&g){var i=g==v.pm||g==v.PM;h=12==f?i?12:0:f+(i?12:0)}var j=1*e[3]||0,k=1*e[4]||0,l=3600*h+60*j+k;if(12>f&&!g&&b&&b._twelveHourTime&&b.scrollDefault){var m=l-b.scrollDefault();0>m&&m>=u/-2&&(l=(l+u/2)%u)}return l}var u=86400,v={am:"am",pm:"pm",AM:"AM",PM:"PM",decimal:".",mins:"mins",hr:"hr",hrs:"hrs"},w={init:function(b){return this.each(function(){var e=a(this),f=[];for(var g in a.fn.timepicker.defaults)e.data(g)&&(f[g]=e.data(g));var h=a.extend({},a.fn.timepicker.defaults,f,b);if(h.lang&&(v=a.extend(v,h.lang)),h=c(h),e.data("timepicker-settings",h),e.addClass("ui-timepicker-input"),h.useSelect)d(e);else{if(e.prop("autocomplete","off"),h.showOn)for(var i in h.showOn)e.on(h.showOn[i]+".timepicker",w.show);e.on("change.timepicker",k),e.on("keydown.timepicker",o),e.on("keyup.timepicker",p),h.disableTextInput&&e.on("keydown.timepicker",n),k.call(e.get(0),null,"initial")}})},show:function(c){var e=a(this),f=e.data("timepicker-settings");if(c&&c.preventDefault(),f.useSelect)return void e.data("timepicker-list").focus();h(e)&&e.blur();var k=e.data("timepicker-list");if(!e.prop("readonly")&&(k&&0!==k.length&&"function"!=typeof f.durationTime||(d(e),k=e.data("timepicker-list")),!b(k))){e.data("ui-timepicker-value",e.val()),j(e,k),w.hide(),k.show();var m={};f.orientation.match(/r/)?m.left=e.offset().left+e.outerWidth()-k.outerWidth()+parseInt(k.css("marginLeft").replace("px",""),10):m.left=e.offset().left+parseInt(k.css("marginLeft").replace("px",""),10);var n;n=f.orientation.match(/t/)?"t":f.orientation.match(/b/)?"b":e.offset().top+e.outerHeight(!0)+k.outerHeight()>a(window).height()+a(window).scrollTop()?"t":"b","t"==n?(k.addClass("ui-timepicker-positioned-top"),m.top=e.offset().top-k.outerHeight()+parseInt(k.css("marginTop").replace("px",""),10)):(k.removeClass("ui-timepicker-positioned-top"),m.top=e.offset().top+e.outerHeight()+parseInt(k.css("marginTop").replace("px",""),10)),k.offset(m);var o=k.find(".ui-timepicker-selected");if(!o.length){var p=t(l(e));null!==p?o=i(e,k,p):f.scrollDefault&&(o=i(e,k,f.scrollDefault()))}if(o&&o.length){var q=k.scrollTop()+o.position().top-o.outerHeight();k.scrollTop(q)}else k.scrollTop(0);return f.stopScrollPropagation&&a(document).on("wheel.ui-timepicker",".ui-timepicker-wrapper",function(b){b.preventDefault();var c=a(this).scrollTop();a(this).scrollTop(c+b.originalEvent.deltaY)}),a(document).on("touchstart.ui-timepicker mousedown.ui-timepicker",g),a(window).on("resize.ui-timepicker",g),f.closeOnWindowScroll&&a(document).on("scroll.ui-timepicker",g),e.trigger("showTimepicker"),this}},hide:function(c){var d=a(this),e=d.data("timepicker-settings");return e&&e.useSelect&&d.blur(),a(".ui-timepicker-wrapper").each(function(){var c=a(this);if(b(c)){var d=c.data("timepicker-input"),e=d.data("timepicker-settings");e&&e.selectOnBlur&&q(d),c.hide(),d.trigger("hideTimepicker")}}),this},option:function(b,e){return"string"==typeof b&&"undefined"==typeof e?a(this).data("timepicker-settings")[b]:this.each(function(){var f=a(this),g=f.data("timepicker-settings"),h=f.data("timepicker-list");"object"==typeof b?g=a.extend(g,b):"string"==typeof b&&(g[b]=e),g=c(g),f.data("timepicker-settings",g),h&&(h.remove(),f.data("timepicker-list",!1)),g.useSelect&&d(f)})},getSecondsFromMidnight:function(){return t(l(this))},getTime:function(a){var b=this,c=l(b);if(!c)return null;var d=t(c);if(null===d)return null;a||(a=new Date);var e=new Date(a);return e.setHours(d/3600),e.setMinutes(d%3600/60),e.setSeconds(d%60),e.setMilliseconds(0),e},isVisible:function(){var a=this,c=a.data("timepicker-list");return!(!c||!b(c))},setTime:function(a){var b=this,c=b.data("timepicker-settings");if(c.forceRoundTime)var d=f(t(a),c);else var d=s(t(a),c);return a&&null===d&&c.noneOption&&(d=a),m(b,d),b.data("timepicker-list")&&j(b,b.data("timepicker-list")),this},remove:function(){var a=this;if(a.hasClass("ui-timepicker-input")){var b=a.data("timepicker-settings");return a.removeAttr("autocomplete","off"),a.removeClass("ui-timepicker-input"),a.removeData("timepicker-settings"),a.off(".timepicker"),a.data("timepicker-list")&&a.data("timepicker-list").remove(),b.useSelect&&a.show(),a.removeData("timepicker-list"),this}}};a.fn.timepicker=function(b){return this.length?w[b]?this.hasClass("ui-timepicker-input")?w[b].apply(this,Array.prototype.slice.call(arguments,1)):this:"object"!=typeof b&&b?void a.error("Method "+b+" does not exist on jQuery.timepicker"):w.init.apply(this,arguments):this},a.fn.timepicker.defaults={appendTo:"body",className:null,closeOnWindowScroll:!1,disableTextInput:!1,disableTimeRanges:[],disableTouchKeyboard:!1,durationTime:null,forceRoundTime:!1,maxTime:null,minTime:null,noneOption:!1,orientation:"l",roundingFunction:function(a,b){if(null===a)return null;if("number"!=typeof b.step)return a;var c=a%(60*b.step);return c>=30*b.step?a+=60*b.step-c:a-=c,a==u&&b.show2400?a:a%u},scrollDefault:null,selectOnBlur:!1,show2400:!1,showDuration:!1,showOn:["click","focus"],showOnFocus:!0,step:30,stopScrollPropagation:!1,timeFormat:"g:ia",typeaheadHighlight:!0,useSelect:!1,wrapHours:!0}});;
//  MAIN APP CONTROLLER
( function($) {
    $.team = {
        app_url: false,
        content: false,
        sidebar: false,
        calendar: false,
        profile: false,
        /* Need for title generation */
        title_pattern: "Team — %s",

        /** One-time initialization called from layout */
        init: function(options) {

            'is_debug|app_url|locales'.split('|').forEach(function(k) {
                $.team[k] = options[k];
            });

            // Set up CSRF
            $(document).ajaxSend(function(event, xhr, settings) {
                if (settings.crossDomain || (settings.type||'').toUpperCase() !== 'POST') {
                    return;
                }

                var matches = document.cookie.match(new RegExp("(?:^|; )_csrf=([^;]*)"));
                var csrf = matches ? decodeURIComponent(matches[1]) : '';
                settings.data = settings.data || '';
                if (typeof(settings.data) == 'string') {
                    if (settings.data.indexOf('_csrf=') == -1) {
                        settings.data += (settings.data.length > 0 ? '&' : '') + '_csrf=' + csrf;
                        xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                    }
                } else if (typeof(settings.data) == 'object') {
                    settings.data['_csrf'] = csrf;
                }
            });

            /* Main content router */
            $.team.content = new ContentRouter({
                $content: $("#t-content")
            });

            /* Sync for external calendars */
            $.team.setSync();

        },

        /* Used on each content page */
        setTitle: function( title_string ) {
            if (title_string) {
                var state = history.state;
                if (state) {
                    state.title = title_string;
                }
                document.title = $.team.title_pattern.replace("%s", title_string);
            }
        },

        /* Open dialog to confirm contact deletion */
        confirmContactDelete: function(contact_ids, reloadPage) {
            $.post('?module=users&action=prepareDelete', { id: contact_ids }, function(html) {
                $.waDialog({
                    html,
                    onOpen($dialog, dialog){
                        const allowed_ids = $dialog.data('allowed-ids'),
                            $delete_button = $dialog.find('.js-delete-button')

                        dialog.$document.trigger('wa_confirm_contact_delete_dialog')

                        if (allowed_ids) {
                            $delete_button.on('click', function() {
                                let btn_text = $delete_button.text();
                                let delete_forever_value = $dialog.find('[name="delete_forever"]:checked').attr('value');
                                $delete_button.attr('disabled', true).html(`${btn_text} <i class="fas fa-spin fa-spinner wa-animation-spin speed-1000"></i>`);

                                $.post('?module=users&action=delete', {
                                    delete_forever: delete_forever_value,
                                    id: allowed_ids
                                }, function() {
                                    dialog.close();
                                    $.team.sidebar.reload();

                                    if (!reloadPage) {
                                        $.team.content.load($.team.app_url);
                                        return;
                                    }

                                    $.team.content.reload();
                                }).always(function () {
                                    $delete_button.attr('disabled', false).html(btn_text);
                                });
                            });
                        }
                    }
                });
            });
        },

        /* Initialized in templates/layouts/Default.html */
        setSync: function () {
            var coef = Math.floor(Math.random() * 100) / 100,
                delay = 30000 + coef * 30000,
                xhr, timer;

            setTimeout(run, $.team.is_debug ? 100 : delay / 2);

            function run() {
                $.post($.team.app_url + "?module=calendarExternal&action=sync&background_process=1")
                    .always(function () {
                        xhr = null;
                        timer = setTimeout(run, delay);
                    })
                    .error( function () {
                        return false;
                    });
            }
        },

        /**
         * @description Popup alert notifications with any info
         * @param options
         */
        notification(options) {

            const $appendTo = options.appendTo || document.body,
                isCloseable = options.isCloseable ?? true,
                alertTimeout = options.alertTimeout || false;
            let $alertWrapper = $appendTo.querySelector('#t-notifications');

            // Create notification
            const $alert = document.createElement('div');
            $alert.classList.add('alert', options.alertClass || 'info');
            $alert.innerHTML = options.alertContent || '';

            if(isCloseable){
                const closeClass = options.alertCloseClass || 'js-alert-error-close',
                    $alertClose = document.createElement('a');

                $alertClose.classList.add('alert-close', closeClass);
                $alertClose.setAttribute('href', 'javascript:void(0)');
                $alertClose.innerHTML = '<i class="fas fa-times"></i>';
                $alert.insertAdjacentElement('afterbegin', $alertClose);
                // Event listener for close notification
                $alertClose.addEventListener('click', function() {
                    this.closest('.alert').remove();
                });
            }

            if(!$alertWrapper) {
                // Create notification wrapper
                $alertWrapper = document.createElement('div');
                $alertWrapper.className = 'alert-fixed-box';
                if (options.alertPlacement) {
                    $alertWrapper.classList.add(options.alertPlacement);
                }
                if (options.alertSize) {
                    $alertWrapper.classList.add(options.alertSize);
                }
                $alertWrapper.id = 't-notifications';
                $appendTo.append($alertWrapper);
            }

            if (options.alertPlacement) {
                $alertWrapper.prepend($alert);
            }else{
                $alertWrapper.append($alert);
            }

            if(alertTimeout) {
                setTimeout(() => $alert.remove(), alertTimeout)
            }
        }
    };
})(jQuery);

// Team :: ContentRouter
// Initialized in templates/layouts/Default.html
var ContentRouter = ( function($) {

    ContentRouter = function(options) {
        var that = this;

        // DOM
        that.$window = $(window);
        that.$content = options["$content"];
        that.$app = $('#wa-app');

        // VARS
        that.api_enabled = ( window.history && window.history.pushState );
        that.scrollTop = options.scrollTop || true;

        // DYNAMIC VARS
        that.xhr = false;
        that.is_enabled = true;

        // LOADER
        that.waLoading = $.waLoading();

        // INIT
        that.initClass();
    };

    ContentRouter.prototype.initClass = function() {
        var that = this;
        //
        that.bindEvents();
    };

    ContentRouter.prototype.bindEvents = function() {
        var that = this;

        // When user clicks a link that leads to team app backend,
        // load content via XHR instead.
        var full_app_url = window.location.origin + $.team.app_url;
        that.$app.on('click', 'a', function(event) {
            if ($(this)[0].hasAttribute('data-disable-routing')) {
                return;
            }

            var use_content_router = ( that.is_enabled && ( this.href.substr(0, full_app_url.length) == full_app_url ) );

            if (event.ctrlKey || event.shiftKey || event.metaKey) {

            } else if (use_content_router) {
                event.preventDefault();
                that.load(this.href);
            }
        });

        $("#wa-app-team").on("click", "a", function(event) {
            event.stopPropagation();
        });

        if (that.api_enabled) {
            window.onpopstate = function(event) {
                event.stopPropagation();
                that.onPopState(event);
            };
        }
    };

    ContentRouter.prototype.load = function(content_uri, is_reload) {
        var that = this;

        var uri_has_app_url = ( content_uri.indexOf( $.team.app_url ) >= 0 );
        if (!uri_has_app_url) {
            // TODO:
            alert("Determine the path error");
            return false;
        }

        if (that.xhr) {
            that.xhr.abort();
        }

        $(document).trigger('wa_before_load', {
            // for which these data ?
            content_uri: content_uri
        });

        that.animate(true);

        that.xhr = $.get(content_uri, function(html) {
            if (!is_reload && that.api_enabled) {
                history.pushState({
                    reload: true,               // force reload history state
                    content_uri: content_uri    // url, string
                    // content: html,              // ajax html, string
                }, "", content_uri);
            }

            that.setContent( html );

            that.animate(false);

            that.xhr = false;
            $(document).trigger("wa_loaded");
        });
    };

    ContentRouter.prototype.reload = function(force) {
        const that = this;
        let content_uri = (that.api_enabled && history.state && history.state?.content_uri) ? history.state.content_uri : false;

        if (force) {
            content_uri = location.href;
        }

        if (content_uri || force) {
            that.load(content_uri, true);
        }
    };

    ContentRouter.prototype.setContent = function( html ) {
        var that = this;

        that.$content.html( html );

        if (that.scrollTop) {
            window.scrollTo(0, 0)
        }
    };

    ContentRouter.prototype.onPopState = function(event) {
        var that = this,
            state = ( event.state || false );

        if (state) {
            if (!state.content_uri) {
                // TODO:
                alert("Determine the path error");
                return false;
            }

            $(document).trigger('wa_before_load', {
                // for which these data?
                content_uri: state.content_uri
            });

            // CONTENT
            if (state.reload) {
                that.reload( state.content_uri );
            } else if (state.content) {
                that.setContent( state.content );
            }

            // TITLE
            if (state.title) {
                $.team.setTitle(state.title);
            }

            // SIDEBAR
            $.team.sidebar.selectLink( state.content_uri );

            $(document).trigger('wa_loaded');
        } else {
            location.reload();
        }
    };

    ContentRouter.prototype.animate = function(show, ) {
        const that = this;

        if (show) {
            that.waLoading.animate(3000, 96, false);
            return;
        }

        that.waLoading.done();
    };

    return ContentRouter;

})(jQuery);

// Team :: Dialog
// Helper used in many places.
var TeamDialog = ( function($) {

    TeamDialog = function(options) {
        var that = this;

        // DOM
        that.$wrapper = $(options["html"]);
        that.$block = false;
        that.is_full_screen = ( that.$wrapper.hasClass("is-full-screen") );
        if (that.is_full_screen) {
            that.$block = that.$wrapper.find(".t-dialog-block");
        }

        // VARS
        that.position = ( options["position"] || false );

        // DYNAMIC VARS
        that.is_closed = false;

        //
        that.userPosition = ( options["setPosition"] || false );

        // HELPERS
        that.onBgClick = ( options["onBgClick"] || false );
        that.onOpen = ( options["onOpen"] || function() {} );
        that.onClose = ( options["onClose"] || function() {} );
        that.onRefresh = ( options["onRefresh"] || false );
        that.onResize = ( options["onResize"] || false );

        // INIT
        that.initClass();
    };

    TeamDialog.prototype.initClass = function() {
        var that = this;
        // save link on dialog
        that.$wrapper.data("teamDialog", that);
        //
        that.show();
        //
        that.bindEvents();
    };

    TeamDialog.prototype.bindEvents = function() {
        var that = this,
            $document = $(document),
            $block = (that.$block) ? that.$block : that.$wrapper;

        // Delay binding close events so that dialog does not close immidiately
        // from the same click that opened it.
        setTimeout(function() {

            $document.on("click", close);
            $document.on("wa_before_load", close);
            that.$wrapper.on("close", close);

            // Click on background, default nothing
            if (that.is_full_screen) {
                that.$wrapper.on("click", ".t-dialog-background", function(event) {
                    if (!that.onBgClick) {
                        event.stopPropagation();
                    } else {
                        that.onBgClick(event);
                    }
                });
            }

            $block.on("click", function(event) {
                event.stopPropagation();
            });

            $(document).on("keyup", function(event) {
                var escape_code = 27;
                if (event.keyCode === escape_code) {
                    that.close();
                }
            });

            $block.on("click", ".js-close-dialog", function() {
                close();
            });

            function close() {
                if (!that.is_closed) {
                    that.close();
                }
                $document.off("click", close);
                $document.off("wa_before_load", close);
            }

            if (that.is_full_screen) {
                $(window).on("resize", onResize);
            }

            function onResize() {
                var is_exist = $.contains(document, that.$wrapper[0]);
                if (is_exist) {
                    that.resize();
                } else {
                    $(window).off("resize", onResize);
                }
            }

        }, 0);

    };

    TeamDialog.prototype.show = function() {
        var that = this;

        $("body").append( that.$wrapper );

        //
        that.setPosition();
        //
        that.onOpen(that.$wrapper, that);
    };

    TeamDialog.prototype.setPosition = function() {
        var that = this,
            $window = $(window),
            window_w = $window.width(),
            window_h = (that.is_full_screen) ? $window.height() : $(document).height(),
            $block = (that.$block) ? that.$block : that.$wrapper,
            wrapper_w = $block.outerWidth(),
            wrapper_h = $block.outerHeight(),
            pad = 10,
            css;

        if (that.position) {
            css = that.position;

        } else {
            var getPosition = (that.userPosition) ? that.userPosition : getDefaultPosition;
            css = getPosition({
                width: wrapper_w,
                height: wrapper_h
            });
        }

        if (css.left > 0) {
            if (css.left + wrapper_w > window_w) {
                css.left = window_w - wrapper_w - pad;
            }
        }

        if (css.top > 0) {
            if (css.top + wrapper_h > window_h) {
                css.top = window_h - wrapper_h - pad;
            }
        } else {
            css.top = pad;

            if (that.is_full_screen) {
                var $content = $block.find(".t-dialog-content");

                $content.hide();

                var block_h = $block.outerHeight(),
                    content_h = window_h - block_h - pad * 2;

                $content
                    .height(content_h)
                    .addClass("is-long-content")
                    .show();

            }
        }

        $block.css(css);

        function getDefaultPosition( area ) {
            // var scrollTop = $(window).scrollTop();

            return {
                left: parseInt( (window_w - area.width)/2 ),
                top: parseInt( (window_h - area.height)/2 ) // + scrollTop
            };
        }
    };

    TeamDialog.prototype.close = function() {
        var that = this;
        //
        that.is_closed = true;
        //
        that.$wrapper.remove();
        //
        that.onClose(that.$wrapper, that);
    };

    TeamDialog.prototype.refresh = function() {
        var that = this;

        if (that.onRefresh) {
            //
            that.onRefresh();
            //
            that.close();
        }
    };

    TeamDialog.prototype.resize = function() {
        var that = this,
            animate_class = "is-animated",
            do_animate = true;

        if (do_animate) {
            that.$block.addClass(animate_class);
        }

        that.setPosition();

        if (that.onResize) {
            that.onResize(that.$wrapper, that);
        }
    };

    return TeamDialog;

})(jQuery);

// Team :: Editable
// Helper used in many places. (group, profile)
var TeamEditable = ( function($) {

    TeamEditable = function(wrapper, options) {
        var that = this;

        // DOM
        that.$wrapper = wrapper;

        // OPTIONS
        this.options = options;

        // INIT
        that.initClass();
    };

    TeamEditable.prototype.initClass = function() {
        const that = this;

        that.bindEvents();
    };

    TeamEditable.prototype.bindEvents = function() {
        const that = this;

        that.$wrapper.on('keydown', $.proxy(that.checkPressEnter, that));
        that.$wrapper.on('focus', $.proxy(that.enableEditor, that));
        that.$wrapper.on('blur', $.proxy(that.disableEditor, that));
        that.$wrapper.on('paste', $.proxy(that.clearHtml, that));
    }

    TeamEditable.prototype.checkPressEnter = function(event) {
        const that = this;

        if (event.keyCode !== 13) {
            return;
        }

        event.preventDefault();
        that.$wrapper.blur();
    }

    TeamEditable.prototype.cacheText = function() {
        const that = this;

        that.cachedText = that.$wrapper.text();
    }

    TeamEditable.prototype.enableEditor = function() {
        const that = this;

        that.cacheText();

        that.$wrapper.addClass('editable-highlight');
    }

    TeamEditable.prototype.disableEditor = function() {
        const that = this;

        that.$wrapper.removeClass('editable-highlight');

        if (that.$wrapper.text() === that.cachedText) {
            return;
        }

        that.save();
    }

    TeamEditable.prototype.clearHtml = function(event) {
        event.preventDefault();

        let text = event.originalEvent.clipboardData.getData('text/plain');
        text = text.replace(/<[^>]*>?/gm, '');

        if (document.queryCommandSupported('insertText')) {
            document.execCommand('insertText', false, text);
        } else {
            document.execCommand('paste', false, text);
        }
    }

    TeamEditable.prototype.save = function() {
        const that = this;

        const data = {
            "data[id]": that.options.groupId,
            [that.options.target]: that.$wrapper.text()
        };

        const $loading = $('<span class="smaller text-gray custom-ml-4"><i class="fas fa-spin fa-spinner wa-animation-spin speed-1000"></i></span>');
        that.$wrapper.append($loading);

        $.post(that.options.api.save, data, function() {
            $loading.remove();

            if (that.options.reloadSidebar) {
                $.team.sidebar.reload();
            }
        });
    }

    return TeamEditable;

})($);
;
// Team :: Sidebar
// Initialized in templates/actions/Sidebar.html
var Sidebar = ( function($) {

    Sidebar = function(wrapper, options) {
        var that = this;

        // DOM
        that.$wrapper = wrapper;

        // OPTIONS
        that.options = options;

        // INIT
        that.initClass();
    };

    Sidebar.prototype.initClass = function() {
        const that = this;

        that.$body = that.$wrapper.find('.sidebar-body');
        that.$addUserLink = that.$wrapper.find('#t-new-user-link');
        that.$groupsWrapper = that.$wrapper.find('.t-groups-list');
        that.$groups = that.$groupsWrapper.find('> li');
        that.$locationsWrapper = that.$wrapper.find('.t-locations-list');
        that.$locations = that.$locationsWrapper.find('> li');
        that.$searchForm = that.$wrapper.find('.t-search-form');
        that.$addGroupLink = that.$wrapper.find('.js-add-user-group');
        that.$addOfficeLink = that.$wrapper.find('.js-add-user-location');

        const options = {
            storage_count_name: 'team/sidebar_counts',
            link_count_update_date: false,
            counters: {},
            storageCount: false,
            xhr: false,
            timer: 0
        }

        $.extend(that.options, options);

        that.$activeMenuItem = (that.$wrapper.find(`li.${that.options.classes.selected}:first`) || false);
        that.groupDialog = {};

        that.setCounts();

        if (that.options.can_sort) {
            that.initSortable();
        }

        that.initDroppable();

        if (!that.$activeMenuItem.length) {
            that.selectLink();
        }

        that.initUpdater();

        that.bindEvents();
    };

    Sidebar.prototype.bindEvents = function() {
        var that = this;

        that.unBindEvents();

        that.$wrapper.on('click', 'li > a', $.proxy(that.onLinkClick, that));
        that.$addGroupLink.on('click', $.proxy(that.showGroupDialog, that));
        that.$addOfficeLink.on('click', $.proxy(that.showGroupDialog, that));
        that.$searchForm.on('submit', $.proxy(that.showSearch, that));
        that.$addUserLink.on('click', $.proxy(that.showInviteDialog, that));
    };

    Sidebar.prototype.unBindEvents = function() {
        const that = this;

        that.$wrapper.off('click', 'li > a');
        that.$addGroupLink.off('click');
        that.$addOfficeLink.off('click');
        that.$searchForm.off('submit');
        that.$addUserLink.off('click');
    };

    Sidebar.prototype.onLinkClick = function(event) {
        const that = this;
        const link = $(event.target).closest('a');
        const uri = link.attr('href');

        if (uri && uri.substr(0, 11) !== 'javascript:' && !link.hasClass(that.options.classes.noHighlight)) {
            that.setItem(link.closest('li'));
            $.team.setTitle(link.text());
        }
    };

    Sidebar.prototype.setItem = function($item) {
        const that = this;

        if (that.$activeMenuItem && that.$activeMenuItem[0] === $item[0]) {
            return;
        }

        if (that.$activeMenuItem) {
            that.$activeMenuItem.removeClass(that.options.classes.selected);
        }

        $item.addClass(that.options.classes.selected);
        that.$activeMenuItem = $item;
    };

    Sidebar.prototype.selectLink = function(uri) {
        const that = this;
        let $link;

        if (uri) {
            $link = that.$wrapper.find(`a[href="${uri}"]:first`);
        } else if (uri === false) {
            if (that.$activeMenuItem) {
                that.$activeMenuItem.removeClass(that.options.classes.selected);
                that.$activeMenuItem = null;
            }
            return;
        }

        if ($link && $link.length) {
            that.setItem($link.closest('li'));
        } else {
            const $links = that.$wrapper.find(`a[href^="${that.options.app_url}"]`);
            const location_string = location.pathname;
            let max_length = 0;
            let link_index = 0;

            $links.each(function(index) {
                const $link = $(this);
                const href = $link.attr('href');
                const href_length = href.length;

                if (location_string.indexOf(href) >= 0) {
                    if (href_length > max_length) {
                        max_length = href_length;
                        link_index = index;
                    }
                }
            });

            if (link_index || link_index === 0) {
                $link = $links.eq(link_index);
                that.setItem($link.closest('li'));
            }
        }
    };

    Sidebar.prototype.reload = function(background) {
        const that = this;
        let sidebar_uri = $.team.app_url + that.options.api.reload;

        if (background) {
            sidebar_uri += '&background_process=1'
        }

        clearTimeout(that.options.timer);

        if (that.options.xhr) {
            that.options.xhr.abort();
        }

        that.options.xhr = $.get(sidebar_uri, {is_reload: 1}, function(html) {
            that.options.xhr = false;
            that.$body.replaceWith(html);
            that.$wrapper.find('.sidebar-header').css('display', '');
            that.$wrapper.find('.sidebar-body').css('display', '');
            that.$wrapper.find('.sidebar-footer').css('display', '');

            that.initClass();
        });
    };

    Sidebar.prototype.showInviteDialog = function(event) {
        event.preventDefault();

        const href = $.team.app_url + this.options.api.inviteDialog;
        $.get(href, function(html) {
            $.waDialog({
                html
            });
        });
    };

    Sidebar.prototype.showGroupDialog = function(event) {
        event.preventDefault();

        const that = this;

        const groupType = $(event.target).hasClass(that.options.classes.initGroupDialog) ? 'group' : 'location';

        if (that.groupDialog[groupType]) {
            that.groupDialog[groupType].show();
            return;
        }

        const href = $.team.app_url + that.options.api.group;
        const data = {
            type: groupType
        };

        $.get(href, data, function(html) {
            that.groupDialog[groupType] = $.waDialog({
                html,
                onOpen($dialog, dialog) {
                    dialog.$content.find('.js-edit-group-name').focus();
                },
                onClose(dialog) {
                    dialog.hide();
                    return false;
                }
            });
        });
    };

    // set counts
    Sidebar.prototype.setCounts = function() {
        const that = this;
        const currentCount = getCountArray();
        const storageCount = getStorage(that.options.storage_count_name);

        that.options.storageCount = $.extend(true, {}, currentCount);

        if (storageCount) {
            $.each(storageCount, function(href, item) {
                const is_exist = (href in currentCount);
                const is_number = (is_exist && currentCount[href].count >= 0);
                const is_changed = (is_number && currentCount[href].count !== item.count);
                const is_item_exist = (item.count >= 0);

                if (is_item_exist && is_changed) {
                    that.options.storageCount[href].count = item.count;
                    that.options.storageCount[href].date = item.date;
                    showCounter(href, currentCount[href].count, item.count, item.date);
                }
            });
        }

        that.setStorage();

        function showCounter(href, new_count, old_count, date) {
            const is_good_href = (href.indexOf(that.options.app_url) >= 0);
            const $link = that.$wrapper.find(`a[href="${href}"]`);

            if (!is_good_href || !$link.length) {
                return;
            }

            const delta_count = new_count - old_count;
            if (delta_count < 0) {
                return;
            }

            const $counter = $(`<strong class="highlighted small js-sidebar-counter" style="height: fit-content;">+ ${delta_count}</strong>`),
                $existed_counter = $link.find('.js-sidebar-counter');

            if ($existed_counter.length) {
                $existed_counter.text(`+ ${delta_count}`);
            }else{
                $link.append($counter);
            }

            $link.one('click', function(event) {
                event.preventDefault();
                $counter.remove();
                that.saveCount(href, new_count);
                that.options.link_count_update_date = date;

                $(document).one('wa_loaded', function() {
                    that.options.link_count_update_date = false;
                });
            });
        }

        function getStorage(storage_name) {
            let result = {};
            const storageData = localStorage.getItem(storage_name);

            if (storageData) {
                result = JSON.parse(storageData);
            }

            return result;
        }

        function getCountArray() {
            let result = {};
            const $counts = that.$wrapper.find("li .js-count");
            const current_date = getDate();

            $counts.each( function() {
                const $count = $(this);
                const count = parseInt($count.text());
                const $li = $count.closest("li");
                const $link = $li.find('> a');

                if (count >= 0) {
                    that.options.counters[$link.attr("href")] = $count;
                    result[$link.attr('href')] = {
                        count: count,
                        date: current_date
                    }
                }
            });

            return result;
        }

        function getDate() {
            const date = new Date();
            const day = parseInt(date.getUTCDate());
            const month = parseInt(date.getUTCMonth()) + 1;
            const year = parseInt(date.getUTCFullYear());
            const hours = parseInt(date.getUTCHours());
            const minutes = parseInt(date.getUTCMinutes());
            const seconds = parseInt(date.getUTCSeconds());

            return result = {
                'year': year,
                'month': month,
                'day': day,
                'hours': hours,
                'minutes': minutes,
                'seconds': seconds
            };
        }
    };

    // update count in class
    Sidebar.prototype.saveCount = function(href, count) {
        const that = this;
        if (href in that.options.storageCount) {
            that.options.storageCount[href].count = count;
        }
        that.setStorage();
    };

    // render count in dom
    Sidebar.prototype.updateCount = function(href, count) {
        const that = this;
        let $counter;

        if (!(href && (count || count === 0))) {
            return;
        }

        $counter = (that.options.counters[href] || false);

        that.saveCount(href, count);

        if ($counter.length) {
            $counter.text(count);
        } else {
            that.reload();
        }
    };

    // save to local storage
    Sidebar.prototype.setStorage = function() {
        const that = this;

        localStorage.setItem(that.options.storage_count_name , JSON.stringify(that.options.storageCount));
    };

    Sidebar.prototype.initUpdater = function() {
        const that = this;
        const time = that.options.updateTime;

        that.options.timer = setTimeout( function() {
            if ($.contains(document, that.$wrapper[0]) ) {
                that.reload(true);
            }
        }, time);
    };

    Sidebar.prototype.initSortable = function() {
        const that = this;

        const href = $.team.app_url + that.options.api.sort;
        let xhr = false;

        if (that.$groups.length > 1) {
            that.$groupsWrapper.sortable({
                animation: 150,
                handle: `.${that.options.classes.drop}`,
                direction: 'vertical',
                onEnd(event) {
                    if (event.oldIndex === event.newIndex) {
                        return;
                    }

                    const sortArray = getSortArray(that.$groupsWrapper);

                    const data = [];
                    $.each(sortArray, function(index, item) {
                        data.push({
                            name: 'groups[]',
                            value: item
                        });
                    });

                    saveSort(href, data);
                }
            });
        }

        if (that.$locations.length > 1) {
            that.$locationsWrapper.sortable({
                animation: 150,
                handle: `.${that.options.classes.drop}`,
                direction: 'vertical',
                onEnd(event) {
                    if (event.oldIndex === event.newIndex) {
                        return;
                    }

                    const sortArray = getSortArray(that.$locationsWrapper);

                    saveSort(href, {
                        locations: sortArray
                    });
                }
            });
        }

        function getSortArray($list) {
            const result = [];
            const $items = $list.find('> li');

            $items.each( function() {
                const $item = $(this);
                const id = $item.data('group-id');

                if (id && id > 0) {
                    result.push(id);
                }
            });

            return result;
        }

        function saveSort(href, data) {
            if (xhr) {
                xhr.abort();
                xhr = false;
            }

            xhr = $.post(href, data, function() {
                xhr = false;
            });
        }
    };

    Sidebar.prototype.initDroppable = function() {
        const that = this;
        let xhr = false;

        that.$groups.each(function() {
            const $group = $(this);
            const is_drop_place = $group.hasClass(that.options.classes.drop);

            if (!is_drop_place) {
                return;
            }

            $group.droppable({
                tolerance: 'pointer',
                hoverClass: that.options.classes.highlighted,
                over: function(event, ui) {
                    const is_drag_item = ui.draggable.hasClass(that.options.classes.uiDraggable);
                    if (!is_drag_item) {
                        $group.removeClass(that.options.classes.highlighted);
                    }
                },
                drop: function(event, ui) {
                    addUserToGroup($(this), ui.draggable);
                }
            });
        });

        that.$locations.each( function() {
            const $location = $(this);
            const is_drop_place = $location.hasClass(that.options.classes.drop);

            if (!is_drop_place) {
                return;
            }

            $location.droppable({
                tolerance: 'pointer',
                hoverClass: that.options.classes.highlighted,
                over: function(event, ui) {
                    var is_drag_item = ui.draggable.hasClass(that.options.classes.uiDraggable);
                    if (!is_drag_item) {
                        $location.removeClass(that.options.classes.highlighted);
                    }
                },
                drop: function(event, ui) {
                    addUserToGroup($(this), ui.draggable);
                }
            });
        });

        function addUserToGroup($dropZone, $item) {
            const group_id = parseInt($dropZone.data('group-id'));
            const user_id = parseInt($item.data('user-id'));
            const href = $.team.app_url + that.options.api.moveUser;

            if (!(group_id > 0 && user_id > 0)) {
                return;
            }

            const data = {
                user_id: user_id,
                group_id: group_id
            };

            if (xhr) {
                xhr.abort();
            }

            xhr = $.post(href, data, function(response) {
                xhr = false;

                if (response.status !== 'ok') {
                    console.warn(response);
                    return;
                }

                $.team.sidebar.reload();
            });
        }
    };

    Sidebar.prototype.showSearch = function(event) {
        event.preventDefault();

        const that = this;

        const searchValue = $(event.target).find('.t-search-field').val();
        if (searchValue) {
            const search_string = encodeURIComponent(searchValue);
            const content_uri = `${$.team.app_url}search/${search_string}/`;

            $.team.content.load(content_uri);
            that.$wrapper.find('.sidebar-mobile-toggle').trigger('click');
        }
    };

    Sidebar.prototype.setSelected = function(data) {
        const that = this;

        let $item;

        switch(data.type) {
            case 'invited':
                $item = that.$body.find('[data-invited-item]');
                break;

            case 'inactive':
                $item = that.$body.find('[data-inactive-item]');
                break;

            case 'search':
                $item = that.$body.find('#all-users-sidebar-link');
                break;

            case 'group':
                $item = that.$body.find(`[data-group-id="${data.groupId}"]`);
                break;
        }

        that.setItem($($item));
    }

    return Sidebar;

})(jQuery);
;
// Pages

// Team :: Calendar Page
var CalendarPage = ( function($) {

    // Team :: Date Filter
    var DateFilter = ( function($) {

        DateFilter = function(options) {
            var that = this;

            // DOM
            that.$wrapper = options["$wrapper"];
            that.$monthSelect = that.$wrapper.find(".month");
            that.$yearSelect = that.$wrapper.find(".year");

            // VARS
            that.filters_href = options["filters_href"];

            // DYNAMIC VARS
            that.month = parseInt( that.$monthSelect.val() );
            that.year = parseInt( that.$yearSelect.val() );

            // INIT
            that.initClass();
        };

        DateFilter.prototype.initClass = function() {
            var that = this;

            that.$monthSelect.on("change", function() {
                var month = $(this).val();
                if (month) {
                    that.month = parseInt(month);
                }
                that.useFilter();
                return false;
            });

            that.$yearSelect.on("change", function() {
                var year = $(this).val();
                if (year) {
                    that.year = parseInt(year);
                }
                that.useFilter();
                return false;
            });

            that.$wrapper.on("click", ".t-arrow", function() {
                var $arrow = $(this);
                if ($arrow.hasClass("left")) {
                    that.changeMonth( false );
                }
                if ($arrow.hasClass("right")) {
                    that.changeMonth( true );
                }
                that.useFilter();
                return false;
            });

        };

        DateFilter.prototype.changeMonth = function( next ) {
            var that = this;

            if (next) {
                if (that.month >= 12) {
                    that.month = 1;
                    that.year++;
                } else {
                    that.month++;
                }
            } else {
                if (that.month <= 1) {
                    that.month = 12;
                    that.year--;
                } else {
                    that.month--;
                }
            }
        };

        DateFilter.prototype.useFilter = function() {
            var that = this,
                start_value = that.year + "-" + ( (that.month > 9) ? that.month : "0" + that.month) + "-01",
                start_string = "start=" + start_value,
                content_uri;

            var location = that.filters_href.split("?"),
                pathname = location[0],
                search = ( location[1] || "" ),
                searchArray = (search.indexOf("&") >= 0) ? search.split("&") : [search],
                start_index = false;

            if (searchArray.length) {
                $.each(searchArray, function(index, item) {
                    var name = item.split("=")[0];
                    if (name == "start") {
                        start_index = index;
                    }
                });
            }

            // Add "month" get param
            if (start_index || start_index === 0) {
                searchArray[start_index] = start_string;
            } else {
                searchArray.push(start_string);
            }

            content_uri = pathname + "?" + searchArray.join("&");

            $.team.content.load(content_uri);
        };

        return DateFilter;

    })(jQuery);

    CalendarPage = function(options) {
        var that = this;

        // DOM
        that.$wrapper = options["$wrapper"];
        that.$dateFilter = options["$dateFilter"];


        // VARS
        that.filters_href = options["filters_href"];
        that.user_id = options["user_id"];
        that.local_storage = new $.store();

        // DYNAMIC VARS

        // INIT
        that.initClass();
    };

    CalendarPage.prototype.initClass = function() {
        var that = this;

        // Init Date Filter
        new DateFilter({
            $wrapper: that.$dateFilter,
            filters_href: that.filters_href
        });

        //
        that.initInfoBlock();
    };

    CalendarPage.prototype.initInfoBlock = function () {
        const that = this;
        const $info_block = that.$wrapper.find('.t-info-notice-wrapper');
        const $info_block_close = $info_block.find('.t-info-notice-toggle');
        const storage = new $.store();
        const key = 'team/calendar_info_warn_block_hide';

        if (storage.get(key)) {
            $info_block.hide();
        } else {
            $info_block.show();
        }

        $info_block_close.on('click', function (event) {
            event.preventDefault();

            storage.set(key, 1);
            $info_block.remove();
        });
    };

    return CalendarPage;

})(jQuery);

// Team :: Calendar
var TeamCalendar = ( function($) {

    TeamCalendar = function(options) {
        var that = this;

        // DOM
        that.$wrapper = options["$wrapper"];
        that.$rows = that.$wrapper.find(".t-week-row");

        // VARS
        that.days_count = 7;
        that.weeks_count = that.$rows.length;
        that.selected_class = "is-selected";
        that.active_class = "is-active";
        that.locales = options["locales"];
        that.is_profile = options["is_profile"];

        //
        that.event_view_uri = "?module=schedule&action=eventView";
        that.event_edit_uri = "?module=schedule&action=eventEdit";
        that.day_uri = "?module=schedule&action=day";
        that.user_id = options["user_id"];
        that.has_right_to_change = options["has_right_to_change"];
        that.selected_user_id = options["selected_user_id"];
        that.selected_calendar_id = options["selected_calendar_id"];
        that.period_start = options["period_start"];
        that.period_end = options["period_end"];
        that.daysArray = getDays( that.$rows );     // days matrix

        // DYNAMIC VARS
        that.wrapper_o = that.$wrapper.offset();
        that.wrapper_w = that.$wrapper.width();
        that.wrapper_h = that.$wrapper.height();
        that.day_w = 0;
        that.day_h = 0;
        that.dialogs = [];
        that.xhr = false;

        // SELECTION
        that.start = false;         // {week: int, day: int}
        that.end = false;           // {week: int, day: int}
        that.$selectedDays = [];    // arrays of selected $days
        that.is_locked = false;     // lock for move

        // INIT
        that.bindEvents();
        //
        that.initHoverOnDay();
        //
        that.initMove();
    };

    TeamCalendar.prototype.bindEvents = function() {
        var that = this,
            $document = $(document),
            can_add_event = that.has_right_to_change;

        if (can_add_event) {
            // Block out the selection by clicking on the event
            that.$wrapper.find(".show-full-days-events, .t-event-wrapper").on("mousedown", function(event) {
                event.stopPropagation();
                that.clearSelection();
            });

            // Remove selection when you click outside the block
            $document.on("mousedown", function() {
                that.clearSelection();
            });

            // Selection block on mouse down/move
            that.$wrapper.on("mousedown", function(event) {
                event.stopPropagation();
                var dialog_was_exist = that.closeDialogs();
                if (!dialog_was_exist) {
                    // Start
                    that.onMouseDown(event);

                    // Add nexts events
                    that.$wrapper.on("mousemove", move);
                    $document.on("mouseup", mouseUp);
                }
                return false;
            });
        }

        // Show full days events
        that.$wrapper.on("click", ".show-full-days-events", function(event) {
            event.preventDefault();
            var dialog_was_exist = that.closeDialogs();
            if (!dialog_was_exist) {
                that.showFullDayEvents( $(this) );
            }
        });

        // Show event details
        that.$wrapper.on("click", ".t-event-block.js-view-event", function(event) {
            event.preventDefault();
            var dialog_was_exist = that.closeDialogs();
            if (!dialog_was_exist) {
                that.showEventDetails( $(this).closest(".t-event-wrapper") );
            }
        });

        $(document).on("keydown", keydownWatcher);

        // FUNCTIONS

        function keydownWatcher(event) {
            var is_exist = $.contains(document, that.$wrapper[0]);
            if (is_exist) {
                var key = event.keyCode;
                if (key === 27) {
                    that.deselectDays();
                }
            } else {
                $(document).off("keydown", keydownWatcher);
            }
        }

        function move(event) {
            if (!that.is_locked) {
                that.is_locked = true;
                that.onMouseMove(event);

                setTimeout( function () {
                    that.is_locked = false;
                }, 10);
            }
            return false;
        }

        function mouseUp() {
            that.onMouseUp();
            that.$wrapper.off("mousemove", move);
            $document.off("mouseup", mouseUp);
            return false;
        }
    };

    TeamCalendar.prototype.showFullDayEvents = function( $link ) {
        const that = this,
            events_id = $link.data("events-id").toString().split(","),
            date = $link.data("date"),
            data = {
                date: date,
                id: events_id,
            };

        if(that.is_profile) {
            data['selected_user_id'] = that.selected_user_id
        }

        if (that.xhr) {
            that.xhr.abort();
            that.xhr = false;
        }

        that.xhr = $.post( that.day_uri, data, function(html) {
            var dialog = $.waDialog({
                html,
                animate: false,
                onBgClick(event, $dialog, dialog_instance) {
                    dialog_instance.close()
                }
            });

            that.addDialog(dialog);
        });
    };

    TeamCalendar.prototype.showEventDetails = function( $event ) {
        var that = this,
            event_id = $event.data("id"),
            data = {
                "data[id]": event_id
            };

        if (that.xhr) {
            that.xhr.abort();
            that.xhr = false;
        }

        that.xhr = $.post( that.event_view_uri, data, function(html) {
            var dialog = $.waDialog({
                html: html
            });
            that.addDialog(dialog);
        });
    };

    TeamCalendar.prototype.createEvent = function() {
        var that = this,
            $startDay = that.daysArray[that.start.week - 1][that.start.day - 1],
            $endDay = that.daysArray[that.end.week - 1][that.end.day - 1],
            start_date = $startDay.data("date"),
            end_date = $endDay.data("date"),
            data = {
                "data[start]": false,
                "data[end]": false,
                "data[contact_id]": ( that.selected_user_id || that.user_id )
            };

        var current_date = new Date(),
            current_hour = current_date.getHours();

        data["data[start]"] = start_date.replace("00:00:00", ( (current_hour >= 23) ? "23:59:59" : ( current_hour + 1 ) + ":00:00"  ) );
        data["data[end]"] = end_date.replace("00:00:00", ( (current_hour >= 22) ? "23:59:59" : ( current_hour + 2 ) + ":00:00"  ) );

        if (that.selected_calendar_id) {
            data["data[calendar_id]"] = that.selected_calendar_id;
        }

        if (that.xhr) {
            that.xhr.abort();
            that.xhr = false;
        }

        that.xhr = $.post( that.event_edit_uri, data, function(response) {
            var dialog = $.waDialog({
                html: response
            });
            that.addDialog(dialog);
        });

    };

    TeamCalendar.prototype.onMouseDown = function(event) {
        var that = this;
        //
        that.start = that.getDayPosition( event );
        that.end = that.start;
        //
        that.markDays();
    };

    TeamCalendar.prototype.onMouseMove = function(event) {
        var that = this,
            newPosition = that.getDayPosition( event );

        if ( !(that.end && that.end.week == newPosition.week && that.end.day == newPosition.day) ) {
            that.end = newPosition;
            that.markDays();
        }
    };

    TeamCalendar.prototype.initHoverOnDay = function(event) {
        var that = this,
            $wrapper = that.$wrapper,
            $hoverDay = false,
            active_class = "is-highlighted";

        $wrapper
            .on("mousemove", onMove)
            .on("mouseleave", onLeave);

        function onMove(event) {
            var day = that.getDayPosition(event),
                $day = getDay( day, that.daysArray );

            var $target = $(event.target);
            if ( $target.hasClass("t-event-block") || $target.closest(".t-event-block").length ) {
                clear();
                return false;
            }

            if (that.start) {
                clear();
                return false;
            }

            if (!$day) {
                clear();
                return false;
            } else if ($day.hasClass(active_class)) {
                return false;
            }

            if ($hoverDay) {
                clear();
            }

            markDay($day);
        }

        function onLeave() {
            clear();
        }

        function markDay( $day ) {
            $day.addClass(active_class);
            $hoverDay = $day;
        }

        function clear() {
            if ($hoverDay) {
                $hoverDay.removeClass(active_class);
            }
            $hoverDay = false;
        }

        function getDay(day, array ) {
            var result = false;

            if (array[day.week - 1] && array[day.week - 1][day.day - 1]) {
                result = array[day.week - 1][day.day - 1];
            }

            return result;
        }
    };

    TeamCalendar.prototype.onMouseUp = function() {
        var that = this;

        if ( that.start.week > that.end.week || ( that.start.week == that.end.week && that.start.day > that.end.day ) ) {
            var end = {
                    week: that.start.week,
                    day: that.start.day
                };

            that.start = {
                week: that.end.week,
                day: that.end.day
            };
            that.end = end;
        }

        that.createEvent();

        that.start = false;
        that.end = false;
    };

    TeamCalendar.prototype.initMove = function() {
        var schedule = this,
            $wrapper = schedule.$wrapper,
            $events = $wrapper.find(".js-move-event"),
            $event = false,
            is_locked = false,
            xhr;

        $events.draggable({
            helper: "clone",
            appendTo: "body",
            cursor: "move",
            zIndex: 1100,
            cursorAt: {
                top: 11,
                left: 16
            },
            start: function(event, ui) {
                var $_event = $(event.target),
                    $clone = ui.helper;

                $event = $_event;

                var size = parseInt( $event.closest(".t-column").attr("colspan") ),
                    hint = ( $_event.data("move-hint") || false );

                if (hint) {
                    $clone.find(".t-event-block").append("<span class='t-day-count'>(" + hint + ")</span>");
                }

                $clone.addClass("is-clone").css({
                    minWidth: parseInt( $_event.width() / size ) + "px",
                    height: $_event.height() + "px"
                });
            },
            drag: function(event, ui) {
                if (!is_locked) {
                    is_locked = true;
                    setTimeout( function() {
                        is_locked = false;
                    }, 100);
                    onMove(event);
                }
            },
            stop: function(event, ui) {
                schedule.clearSelection();
                $event = false;
            }
        });

        $wrapper.droppable({
            drop: function(event) {
                onDrop(event)
            }
        });

        function onDrop(event) {
            var day = schedule.getDayPosition(event),
                $day = schedule.daysArray[day.week - 1][day.day - 1];

            if (!$day) {
                if (console && console.log) {
                    console.log("error: date is not exist");
                }
                return false;
            }

            var href = $.team.app_url + "?module=schedule&action=eventMove",
                data = {
                    id: parseInt( $event.data("id") ),
                    start: $day.data("date").replace(" 00:00:00", "")
                };

            if (xhr) {
                xhr.abort();
            }

            xhr = $.post(href, data, function(response) {
                if (response.status == "ok") {
                    schedule.reload();
                }
            }, "json");
        }

        function onMove(event) {
            var wrapper_o = $wrapper.offset(),
                x = [wrapper_o.left, wrapper_o.left + $wrapper.outerWidth()],
                y = [wrapper_o.top, wrapper_o.top + $wrapper.outerHeight()];

            // clear
            schedule.clearSelection();
            //
            if (event.pageX <= x[0] || event.pageX >= x[1]) {
                return false;
            }
            if (event.pageY <= y[0] || event.pageY >= y[1]) {
                return false;
            }

            // marking
            var size = parseInt( ($event.data("day-count") || $event.closest(".t-column").attr("colspan") ) );
            schedule.start = schedule.getDayPosition(event);
            schedule.end = getEnd(schedule.daysArray, schedule.start, size);
            schedule.markDays();

            function getEnd(daysArray, start, size) {
                var result = {
                        week: start.week,
                        day: start.day
                    },
                    days_after_start =  (7 - start.day);

                size = size - 1; // today = start

                if (size <= days_after_start) {
                    result.day = result.day + size;
                } else {
                    result.week = result.week + 1;
                    result.day = (size - days_after_start);

                    if (result.week > daysArray.length) {
                        result = {
                            week: daysArray.length,
                            day: 7
                        }
                    }
                }

                return result;
            }
        }
    };

    TeamCalendar.prototype.markDays = function() {
        var that = this;

        //
        that.deselectDays();

        //
        var start = $.extend({}, that.start),
            end = $.extend({}, that.end);

        // Swap data in motion to the left
        if (start.week > end.week) {
            start = $.extend({}, that.end);
            end = $.extend({}, that.start);
        }

        var week_start = start.week,
            week_end = end.week;

        for ( var week_index = week_start; week_index <= week_end; week_index++ ) {
            var day_start, day_end;

            // If the movement within one week
            if (week_start == week_end) {
                day_start = start.day;
                day_end = end.day;

                // Swap data in motion to the left
                if (day_start > day_end) {
                    day_start = end.day;
                    day_end = start.day;
                }

                // If this initial week
            } else if (week_index == week_start) {
                day_start = start.day;
                day_end = that.days_count;

                // If this is the final week
            } else if (week_index == week_end) {
                day_start = 1;
                day_end = end.day;

                // If this intermediate week
            } else {
                day_start = 1;
                day_end = that.days_count;
            }

            // Day render
            for ( var day_index = day_start; day_index <= day_end; day_index++ ) {
                render(week_index, day_index);
            }
        }

        function render(week_index, day_index) {
            if ( !(week_index > 0 && day_index > 0) ) {
                return false;
            }

            var $day = that.daysArray[week_index - 1][day_index - 1];
            if ($day.length) {
                $day.addClass(that.selected_class);
                that.$selectedDays.push($day);
            } else {
                console.log("Error: Day isn't exist");
                return false;
            }
        }
    };

    TeamCalendar.prototype.getDayPosition = function( event ) {
        var that = this;

        that.wrapper_o = that.$wrapper.offset();
        that.wrapper_w = that.$wrapper.width();
        that.wrapper_h = that.$wrapper.height();
        that.day_w = that.wrapper_w/that.days_count;
        that.day_h = that.wrapper_h/that.weeks_count;

        var lift_offset = {
            top: (event.pageY - that.wrapper_o.top),
            left: (event.pageX - that.wrapper_o.left)
        };

        var week = parseInt(lift_offset.top/that.day_h) + ( (lift_offset.top % that.day_h > 0 ) ? 1 : 0 );
        var day = parseInt(lift_offset.left/that.day_w) + ( (lift_offset.left % that.day_w > 0 ) ? 1 : 0 );

        return {
            week: week,
            day: day
        }
    };

    TeamCalendar.prototype.deselectDays = function() {
        var that = this;

        if (that.$selectedDays.length) {
            $.each(that.$selectedDays, function() {
                $(this).removeClass(that.selected_class);
            });
            that.$selectedDays = [];
        }
    };

    TeamCalendar.prototype.clearSelection = function() {
        var that = this;
        that.deselectDays();
        that.start = false;
        that.end = false;
    };

    TeamCalendar.prototype.reload = function() {
        var that = this,
            href = "?module=schedule&action=inc",
            data = {};

        that.closeDialogs();

        if (that.selected_user_id) {
            data.user = that.selected_user_id;
        }

        if (that.selected_calendar_id) {
            data.calendar = that.selected_calendar_id;
        }

        if (that.period_start) {
            data.start = that.period_start;
        }

        if (that.period_end) {
            data.end = that.period_end;
        }

        if (that.is_profile) {
            data.period = 1;
        }

        $.get(href, data, function(html) {
            $.team.calendar = false;
            that.$wrapper.closest(".t-calendar-wrapper").replaceWith(html);
            $.team.profile.$calendar_wrapper = $(html);
        });
    };

    TeamCalendar.prototype.addDialog = function( dialog ) {
        var that = this;
        that.dialogs.push(dialog);
    };

    TeamCalendar.prototype.closeDialogs = function() {
        var that = this,
            result = false;

        // Prev Dialog
        if (that.dialogs.length) {

            $.each(that.dialogs, function(index, dialog) {
                if ( $.contains(document, dialog.$wrapper[0]) ) {
                    dialog.close();
                    result = true;
                }
            });

            // or $.each()splice
            that.dialogs = [];
        }

        // DatePicker
        var $datePicker = $("#ui-datepicker-div");
        if ($datePicker.length) {
            $(document).trigger("mousedown")
        }

        return result;
    };

    return TeamCalendar;

    function getDays( $rows ) {
        var result = [];

        $rows.each( function() {
            var $row = $(this),
                row_result = [];

            $row.find(".t-day-ornament").each( function() {
                row_result.push( $(this) );
            });

            result.push(row_result);

        });

        return result;
    }

})(jQuery);

// Dialogs

// Team :: Calendar :: Day Dialog
var DayEventsDialog = ( function($) {

    DayEventsDialog = function(options) {
        var that = this;

        // DOM
        that.$wrapper = options["$wrapper"];

        // VARS
        that.event_view_uri = "?module=schedule&action=eventView";

        // DYNAMIC VARS
        that.dialog = false;
        that.xhr = false;

        // INIT
        that.initClass();
    };

    DayEventsDialog.prototype.initClass = function() {
        var that = this;

        // Show event details
        that.$wrapper.on("click", ".t-event-block.js-view-event", function(event) {
            event.preventDefault();
            that.showEventDetails( $(this).closest(".t-event-wrapper") );
        });
    };

    DayEventsDialog.prototype.showEventDetails = function( $event ) {
        var that = this,
            event_id = $event.data("id"),
            data = {
                "data[id]": event_id
            };

        if (that.xhr) {
            that.xhr.abort();
            that.xhr = false;
        }

        that.xhr = $.post( that.event_view_uri, data, function(html) {
            that.dialog = $.waDialog({ html });
        });
    };

    return DayEventsDialog;

})(jQuery);

// Team :: Calendar :: Event Edit
var EventEditDialog = ( function($) {

    EventEditDialog = function(options) {
        var that = this;

        // DOM
        that.$wrapper = options["$wrapper"];
        that.$form = that.$wrapper.find("form");
        that.$statusToggle = that.$wrapper.find(".t-status-toggle");
        that.$calendarToggle = that.$wrapper.find(".js-calendar-dropdown");
        that.$typeToggle = that.$wrapper.find(".t-type-toggle");
        that.$userToggle = that.$wrapper.find(".js-user-dropdown");
        that.$startAltField = that.$wrapper.find("input[name='data[start_alt]']");
        that.$endAltField = that.$wrapper.find("input[name='data[end_alt]']");
        that.$summaryField = that.$form.find("input[name='data[summary]']");

        // VARS
        that.teamDialog = that.$wrapper.data("dialog");
        that.active_class = "is-active";
        that.extended_class = "is-extended";
        that.selected_class = "selected";
        that.has_error_class = "state-error";
        that.locales = options["locales"];
        that.event_id = options["event_id"];
        that.calendars = options["calendars"];
        that.users = options["users"];

        // DYNAMIC VARS
        that.$activeStatusToggle = ( that.$statusToggle.find("." + that.active_class) || false );
        that.is_status = options["is_status"];
        that.is_locked = false;
        that.is_changed = false;
        that.user_id = options["user_id"];
        that.calendar_id = options["calendar_id"];
        that.summary = options["summary"];
        that.summary_type = options["summary_type"];
        that.start_date_locale = false;
        that.end_date_locale = false;

        // INIT
        that.initClass();
    };

    EventEditDialog.prototype.initClass = function() {
        var that = this;
        //
        that.initDatePicker();
        //
        that.initTimePicker();
        //
        that.bindEvents();
        //
        that.setStatusLocale();

        if (that.is_status) {
            //
            that.generateStatusTypes();
        }
    };

    EventEditDialog.prototype.bindEvents = function() {
        var that = this;

        that.$form.on("submit", function(event) {
            event.preventDefault();
            if (!that.is_locked) {
                that.save( that.$form );
            }
            return false;
        });

        that.$form.on("click", ".js-delete-event", function(event) {
            event.preventDefault();
            if (!that.is_locked) {
                that.showDeleteConfirm();
            }
        });

        that.$statusToggle.on("click", ".t-toggle-button", function() {
            that.changeStatus( $(this) );
            that.changeColors();
            return false;
        });

        that.$calendarToggle.on("click", ".menu a", function(event) {
            event.preventDefault();
            that.changeCalendar( $(this) );
        });

        that.$startAltField.on("change", function() {
            that.setStatusLocale();
            that.generateStatusTypes();
        });

        that.$endAltField.on("change", function() {
            that.setStatusLocale();
            that.generateStatusTypes();
        });

        that.$summaryField.on("change", function() {
            that.summary = $(this).val();
            that.summary_type = "custom";
        });

        that.$form.on("change", "input[name='data[status_summary]']", function() {
            that.summary = $(this).val();
            that.$summaryField.val( that.summary );
        });

        that.$form.on("change", "textarea[name=\"data[description]\"]", function() {
            var value = $(this).val();
            that.$form.find("textarea[name=\"data[status_description]\"]").val(value);
        });

        that.$form.on("change", "textarea[name=\"data[status_description]\"]", function() {
            var value = $(this).val();
            that.$form.find("textarea[name=\"data[description]\"]").val(value);
        });

        that.$form.on("summaryChange", function() {
            that.$summaryField.val( that.summary.replace(/&amp;/g,'&').replace(/&lt;/g,'<').replace(/&gt;/g,'>').replace(/&#039;/g,"'").replace(/&quot;/g,'"') );
        });

        if (that.$userToggle.length) {
            that.$userToggle.on("click", ".menu a", function(event) {
                event.preventDefault();
                that.changeUser( $(this) );
            });
        }

        that.$form.on("change", ".js-extended-date", function() {
            that.dateToggle( $(this) );
            return false;
        });

        // Remove errors hints
        var $fields = that.$form.find("input");
        $fields.on("mousedown", function() {
            var $field = $(this),
                has_error = $field.hasClass( that.has_error_class );

            if (has_error) {
                $field
                    .removeClass(that.has_error_class)
                    .closest(".value")
                        .find(".state-error-hint").remove();
            }
        });

        that.$form.on('click', '.js-datepicker-trigger, .js-timepicker-trigger', function () {
            $(this).parent().find('input').trigger('focus')
        });

    };

    EventEditDialog.prototype.initDatePicker = function() {
        var that = this;

        var $datePickers = that.$wrapper.find(".js-datepicker");
        $datePickers.each( function() {
            var $input = $(this),
                $altField = $input.closest(".t-date-wrapper").find("input[type='hidden']");

            $input.datepicker({
                altField: $altField,
                altFormat: "yy-mm-dd",
                changeMonth : true,
                changeYear : true,
                shortYearCutoff: 2,
                showOtherMonths: true,
                selectOtherMonths: true,
                stepMonths: 2,
                numberOfMonths: 2,

                beforeShow: function(input, ui) {
                    ui.dpDiv.on("click", function(event) {
                        event.stopPropagation();
                    });

                    setTimeout(() => ui.dpDiv.css({"z-index": '1051'}));

                    $(input).on("click", function(event) {
                        var is_date_picker_opened = isDatePickerOpened();
                        if (is_date_picker_opened) {
                            event.stopPropagation();
                            closeDatePicker();
                        }
                    });
                }
            });
        });

        function isDatePickerOpened() {
            var result = false,
                $datePicker =  $("#ui-datepicker-div");

            if ( $datePicker.length && !( $datePicker.css("display") == "none") ) {
                result = $datePicker;
            }

            return result;
        }

        function closeDatePicker() {
            $(document).trigger("mousedown");
        }
    };

    EventEditDialog.prototype.initTimePicker = function() {
        var that = this,
            $timePickers = that.$wrapper.find(".js-timepicker");

        $timePickers.each( function() {
            var $input = $(this),
                is_rendered = false;

            $input.timepicker();

            $input.on("showTimepicker", function() {
                var $timepicker = $input.data("timepicker-list");

                if (!is_rendered) {
                    $timepicker.on("click", function (event) {
                        event.stopPropagation();
                    });
                    is_rendered = true;
                }

                var top = ( parseInt($input.offset().top) + parseInt($input.outerHeight()) - parseInt($(window).scrollTop()) );

                $timepicker.css({
                    "position": "fixed",
                    "top": top
                })
            });
        });
    };

    EventEditDialog.prototype.showDeleteConfirm = function() {
        var that = this,
            href = "?module=schedule&action=eventDeleteConfirm",
            data = {
                id: that.event_id
            };

        that.is_locked = true;

        if (that.xhr) {
            that.xhr.abort();
            that.xhr = false;
        }

        that.xhr = $.get(href, data, function(html) {
            $.waDialog({
                html: html
            });

            that.is_locked = false;

            that.close();
        });
    };

    EventEditDialog.prototype.changeColors = function( ) {
        let that = this,
            colors = {bg_color, font_color, status_bg_color, status_font_color} = that.calendars[that.calendar_id];

        that.setCalendarSelectColors(colors);
    }

    EventEditDialog.prototype.changeStatus = function( $toggle ) {
        var that = this,
            is_active = $toggle.hasClass(that.active_class);

        if (!is_active) {
            var status = $toggle.data("status-id");

            if (that.$activeStatusToggle) {
                that.$activeStatusToggle.removeClass(that.active_class + ' ' + that.selected_class);
            }

            // Marking
            $toggle.addClass(that.active_class + ' ' + that.selected_class);
            that.$activeStatusToggle = $toggle;

            that.$form.find('input[name="data[is_status]"]')
                .val(status)
                .trigger("change");

            // Show/Hide status fields
            var is_status = (status == 1),
                event_class = "is-event",
                status_class = "is-status";

            that.is_status = is_status;

            if (!is_status) {
                that.$wrapper.removeClass(status_class).addClass(event_class);

            } else {
                that.$wrapper.removeClass(event_class).addClass(status_class);

                // For status is_allday always true
                var $input = that.$form.find(".js-extended-date");

                if (!$input.prop("checked")) {
                    $input.click();
                }
            }

            // Generate preview
            that.generateStatusTypes();

            // Resize
            that.teamDialog.resize();
        }
    };

    EventEditDialog.prototype.changeCalendar = function( $link ) {
        var that = this,
            $li = $link.closest("li"),
            calendar_id = $li.data("calendar-id"),
            is_active = $li.hasClass(that.selected_class);

        if (!is_active && !that.is_locked) {
            that.is_locked = true;
            const colors = {bg_color, font_color, status_bg_color, status_font_color} = that.calendars[calendar_id],
                name = $.wa.encodeHTML($link.text()),
                {prefix, icon} = $link.find('svg').data();

            //
            that.calendar_id = calendar_id;
            // unset selected
            that.$calendarToggle.find("." + that.selected_class).removeClass(that.selected_class);

            // set selection
            that.setCalendarSelectColors(colors);
            that.$calendarToggle.find(".t-selected-item").html(`<i class="${prefix} fa-${icon}"></i><span class="custom-ml-8">${name}</span>`);

            // set data
            that.$form
                .find('input[name="data[calendar_id]"]')
                .val(calendar_id)
                .trigger("change");

            // render
            var $menu = that.$calendarToggle.find(".menu");

            setTimeout( function() {
                //$menu.removeAttr("style");
                that.is_locked = false;
            }, 500);

            //
            that.generateStatusTypes();
        }
    };

    EventEditDialog.prototype.setCalendarSelectColors = function(colors) {
        const that = this;

        const bgColor = () => {
            if (that.is_status) {
                return colors.status_bg_color ? colors.status_bg_color : colors.bg_color
            } else {
                return colors.status_bg_color ? colors.bg_color : 'transparent'
            }
        };
        const fontColor = () => {
            if (that.is_status) {
                return colors.status_font_color ? colors.status_font_color : colors.font_color
            } else {
                return !colors.status_font_color ? colors.bg_color : colors.font_color
            }
        };
        const innerShadow = () => {
            if (!that.is_status) {
                return colors.status_bg_color ? 'none' : 'inset 0 0 0 1px currentColor'
            } else {
                return 'none'
            }
        }

        that.$calendarToggle.find('.t-selected-item').css({
            'color': fontColor,
            'background-color': bgColor,
            'box-shadow': innerShadow
        });
    }

    EventEditDialog.prototype.changeUser = function( $link ) {
        var that = this,
            $li = $link.closest("li"),
            user_id = $li.data("user-id"),
            is_active = $li.hasClass(that.selected_class);

        if (!is_active && !that.is_locked) {
            that.is_locked = true;
            const photo_url = $link.data('user-photo-url'),
                name = $.wa.encodeHTML($link.text());
            //
            that.user_id = user_id;
            // unset selected
            that.$userToggle.find("." + that.selected_class).removeClass(that.selected_class);
            // set selection
            that.$userToggle.find(".t-selected-item").html( `
                <img src="${photo_url}" class="userpic userpic20">
                <span class="custom-ml-8">${name}</span>` );
            // set data
            that.$form.find('input[name="data[contact_id]"]')
                .val(user_id)
                .trigger("change");
            // render
            var $menu = that.$userToggle.find(".menu");
            $menu.hide();

            setTimeout( function() {
                $menu.removeAttr("style");
                that.is_locked = false;
            }, 200);

        }
    };

    EventEditDialog.prototype.save = function( $form ) {
        var that = this,
            data = prepareData( $form.serializeArray() ),
            href = "?module=schedule&action=eventSave";

        that.is_locked = true;

        if (data) {
            $.post(href, data, function(response) {

                if (response.status == "ok") {
                    if (response.data && response.data.message) {
                        alert(response.data.message);
                    }
                    that.reloadCalendar();
                } else if (response.errors) {
                    var redirect = null;
                    $.each(response.errors, function (i, error) {
                        if (error[0] === 'redirect') {
                            redirect = error[1];
                        }
                    });
                    redirect && (location.href = redirect);
                }

                that.close();

                that.is_locked = false;
            }, "json");
        } else {
            that.is_locked = false;
        }

        function prepareData(data) {
            var result = {},
                errors = [];

            $.each(data, function(index, item) {
                result[item.name] = item.value;
            });

            if (!result["data[summary_type]"]) {
                result["data[summary_type]"] = "custom";
            }

            var is_status = that.is_status;
            if (is_status) {
                result["data[description]"] = ( result["data[status_description]"] ) ? result["data[status_description]"] : "";
                delete result["data[status_description]"];

                result["data[summary]"] = that.summary;
                delete result["data[status_summary]"];
            }

            if (!$.trim(result["data[summary]"]).length) {
                if (is_status) {
                    errors.push({
                        field: "data[status_summary]",
                        locale: "empty"
                    });
                } else {
                    errors.push({
                        field: "data[summary]",
                        locale: "empty"
                    });
                }
            }

            if (!result["data[start]"].match(/^(\d){4}-(\d){2}-(\d){2}$/)) {
                errors.push({
                    field: "data[end]",
                    locale: "date"
                });
            }

            if (!result["data[end]"].match(/^(\d){4}-(\d){2}-(\d){2}$/)) {
                errors.push({
                    field: "data[end]",
                    locale: "date"
                });
            }

            var startDate = getDate( result["data[start]"] );
            var endDate = getDate( result["data[end]"] );
            if (startDate > endDate) {
                errors.push({
                    field: "data[start_alt]",
                    locale: "period"
                });
                errors.push({
                    field: "data[end_alt]",
                    locale: "period"
                });
            }

            if (result["data[start_time]"] > result["data[end_time]"]) {
                errors.push({
                    field: "data[start_time]",
                    locale: "period"
                });
                errors.push({
                    field: "data[end_time]",
                    locale: "period"
                });
            }

            if (errors.length) {
                showErrors(errors);
                return false;
            }

            if (!result["data[start_time]"].length) {
                result["data[start_time]"] = "00:00"
            }

            if (!result["data[end_time]"].length) {
                result["data[end_time]"] = "00:00"
            }

            result["data[start]"] = result["data[start]"] + " " + result["data[start_time]"];
            result["data[end]"] = result["data[end]"] + " " + result["data[end_time]"];
            result["data[is_allday]"] = ( result["data[is_allday]"] ) ? 1 : 0;

            delete result["data[start_time]"];
            delete result["data[end_time]"];
            delete result["data[start_alt]"];
            delete result["data[end_alt]"];

            return result;

            function getDate( string ) {
                var dateArray = string.split("-"),
                    year = parseInt(dateArray[0]),
                    month = parseInt(dateArray[1]),
                    day = parseInt(dateArray[2]);

                if (year > 0 && month > 0 && day > 0) {
                    return new Date(year, (month - 1), day);
                } else {
                    return false;
                }
            }

            function showErrors( errors ) {
                // Remove old errors
                that.$form.find(".state-error-hint").remove();

                // Display new errors
                $.each(errors, function(index, item) {
                    var $field = that.$form.find("[name='" + item.field + "']");
                    if ($field.length) {
                        if ($field.parent('.value').length) {
                            $field
                                .addClass(that.has_error_class)
                                .after('<span class="state-error-hint custom-mt-4">' + that.locales[item.locale] + '</span>')
                        }else{
                            $field
                                .addClass(that.has_error_class)
                                .closest('.t-date-wrapper')
                                .append('<div class="state-error-hint custom-mt-4">' + that.locales[item.locale] + '</div>')
                        }
                    }
                });
            }
        }
    };

    EventEditDialog.prototype.reloadCalendar = function() {
        var that = this;

        // $.team.content.reload();
        $.team.calendar.reload();
    };

    EventEditDialog.prototype.dateToggle = function( $toggle ) {
        var that = this,
            $dateFields = that.$form.find(".t-date-wrapper");

        $dateFields.toggleClass(that.extended_class, !$toggle.prop("checked"))
    };

    EventEditDialog.prototype.generateStatusTypes = function() {
        var that = this,
            $typeToggle = that.$typeToggle;

        // render
        var $wrapper = renderList();

        // events
        setBinds( $wrapper );

        // mark selected items
        setActive( $wrapper );

        function renderList() {
            var $templateItems = $typeToggle.find(".is-template li"),
                $text = $templateItems.eq(0),
                $field = $templateItems.eq(1);

            var $list = $("<ul></ul>"),
                calendar = that.calendars[that.calendar_id];

            if (calendar.default_status) {
                // 2
                var $li2 = $text.clone();
                $li2.find(".t-type").text(calendar.default_status);
                $li2.find("input:radio").val("default");
                $list.append($li2);
            }

            // 1
            var $li1 = $text.clone();
            $li1.find(".t-type").text(calendar.name);
            $li1.find("input:radio").val("calendar");
            $list.append($li1);

            // 3
            var $li3 = $text.clone();
            $li3.find(".t-type").text( ( calendar.default_status ? calendar.default_status : calendar.name ) + " " + that.locales.till + " " + that.end_date_locale);
            $li3.find("input:radio").val("till");
            $list.append($li3);

            // 5
            var $li5 = $text.clone();
            $li5.find(".t-type").text( ( calendar.default_status ? calendar.default_status : calendar.name ) + " " + that.locales.from + " " + that.start_date_locale + " " + that.locales.till + " " + that.end_date_locale);
            $li5.find("input:radio").val("interval");
            $list.append($li5);

            // 4
            var $li4 = $field.clone();
            $li4.find("input:radio").val("custom");
            if (that.summary) {
                $li4.find("input:text").val( that.summary );
            }
            $list.append( $li4 );

            // final
            $typeToggle.find(".value").html("").append( $list );

            return $list;
        }

        function setBinds( $wrapper ) {

            $wrapper.on("change", "input:radio", function() {
                var $input = $(this),
                    is_checked = $input.is(':checked'),
                    $text = $input.closest("li").find(".t-type"),
                    $textInput = $input.closest("li").find("input:text");

                if (is_checked) {
                    if ($text.length) {
                        that.summary = $text.text();
                    } else if ($textInput.length) {
                        that.summary = $textInput.val();
                    } else {
                        return false;
                    }
                    that.summary_type = $input.val();
                    that.$form.trigger("summaryChange");
                }
            });

            $wrapper.on("focus set", "input:text", function() {
                var $input = $(this);

                // set active
                var $radio = $input.closest("li").find("input:radio");
                if (!$radio.is(':checked')) {
                    $radio.prop('checked', true).trigger("change");
                }

                if ( $input.hasClass( that.has_error_class ) ) {
                    $input
                        .removeClass(that.has_error_class)
                        .closest(".value")
                        .find(".state-error-hint").parent().remove();
                }
            });

            $wrapper.on("focus change keyup", "input:text", function() {
                var $input = $(this),
                    value = $input.val();
                that.summary = $("<div />").html( $input.val() ).text();

                if (value.length) {
                    that.summary_type = "custom";
                    that.summary = value;
                }

            });

        }

        function setActive( $wrapper ) {
            // case 1
            if (!that.summary_type && that.summary) {
                that.summary_type = "custom";
            }

            // case 2
            if (that.summary_type) {
                var $active = $wrapper.find("input:radio[value='" + that.summary_type + "']");

                // case 3
                if ($active.length) {
                    $active.click();

                    if (that.summary_type !== "custom") {
                        $wrapper.find("input:text").val("");
                    }

                // case 4
                } else if (that.summary_type == "default") {
                    $wrapper.find("input[value='calendar']").click();

                // case 5
                } else {
                    $wrapper.find("input:text").val( (that.summary ? that.summary : "" ) ).trigger("change");
                }

            // case 3
            } else {
                $wrapper.find("input:radio:first").click();
            }
        }

    };

    EventEditDialog.prototype.setStatusLocale = function() {
        var that = this,
            $startField = that.$wrapper.find("input[name='data[start]']"),
            $endField = that.$wrapper.find("input[name='data[end]']");

        that.start_date_locale = getLocale($startField);
        that.end_date_locale = getLocale($endField);

        function getLocale( $field ) {
            var value = $field.val().split(" ")[0],
                date_array = value.split("-"),
                day = parseInt(date_array[2]),
                month = parseInt(date_array[1]),
                year = parseInt(date_array[0]),
                current_month = ( new Date() ).getFullYear();

            var format = that.locales.status_type.format,
                month_locale = that.locales.status_type.months[month],
                datepicker_locale = $.datepicker.formatDate(format, new Date(year,month-1,day));

            datepicker_locale = datepicker_locale.replace("f", month_locale);

            if ( current_month == year) {
                datepicker_locale = datepicker_locale
                    .replace(", " + year, "")
                    .replace(" " + year, "")
                    .replace(year + " ", "");
            }

            return datepicker_locale;
        }
    };

    EventEditDialog.prototype.close = function() {
        var that = this;

        that.teamDialog.close();
    };

    return EventEditDialog;

})(jQuery);

// Team :: Calendar :: Event View
var EventViewDialog = ( function($) {

    EventViewDialog = function(options) {
        var that = this;

        // DOM
        that.$dialogWrapper = options["$wrapper"];
        that.$wrapper = that.$dialogWrapper.find(".dialog-body");

        // VARS
        that.event_id = options["event_id"];
        that.event_edit_uri = "?module=schedule&action=eventEdit";

        // DYNAMIC VARS
        that.xhr = false;

        // INIT
        that.initClass();
    };

    EventViewDialog.prototype.initClass = function() {
        var that = this;

        that.$wrapper.on("click", ".js-edit-event", function(event) {
            event.preventDefault();
            that.showEditForm();
        });

    };

    EventViewDialog.prototype.showEditForm = function() {
        var that = this,
            data = {
                "data[id]": that.event_id
            };

        if (that.xhr) {
            that.xhr.abort();
            that.xhr = false;
        }

        that.xhr = $.post( that.event_edit_uri, data, function(response) {
            var position = that.$wrapper.offset(),
                calendar = $.team.calendar;

            that.close();

            var dialog = $.waDialog({
                html: response
            });
            calendar.addDialog(dialog);
        });
    };

    EventViewDialog.prototype.close = function() {
        var that = this;

        that.$dialogWrapper.data('dialog').close();
    };

    return EventViewDialog;

})(jQuery);

// Team :: Calendar :: Delete
var EventDeleteDialog = ( function($) {

    EventDeleteDialog = function(options) {
        var that = this;

        // DOM
        that.$wrapper = options["$wrapper"];
        that.$block = that.$wrapper.find(".dialog-body");

        // VARS
        that.event_id = options["event_id"];

        // DYNAMIC VARS
        that.is_locked = false;

        // INIT
        that.initClass();
    };

    EventDeleteDialog.prototype.initClass = function() {
        var that = this;

        that.$block.on("click", ".js-delete-event", function(event) {
            event.preventDefault();
            if (!that.is_locked) {
                that['delete']();
            }
        });
    };

    EventDeleteDialog.prototype['delete'] = function() {
        var that = this,
            href = "?module=schedule&action=eventDelete",
            data = {
                id: that.event_id
            };

        that.is_locked = true;

        $.post(href, data, function(response) {
            if (response.status == "ok") {
                if (response.data && response.data.message) {
                    alert(response.data.message);
                }
                that.$wrapper.data('dialog').close();
                $.team.calendar.reload();
            }
        });
    };

    return EventDeleteDialog;

})(jQuery);
;
// Team :: Profile
var Profile = ( function($) {

    Profile = function(options) {
        var that = this;

        // DOM
        that.$wrapper = options["$wrapper"];
        that.$tabs = that.$wrapper.find(".t-profile-tabs");
        that.$tabContentPlace = that.$wrapper.find(".t-dynamic-content");
        that.$calendarPlace = that.$wrapper.find(".t-calendar-place");
        that.$profile_header_links = that.$wrapper.find('.t-profile-actions-btn');
        that.$profile_sidebar = that.$wrapper.find('.t-profile-sidebar');

        // VARS
        that.api_enabled = ( window.history && window.history.pushState );
        that.user = options.user || { id: 0 };
        that.photo_dialog_url = options.photo_dialog_url;
        that.is_own_profile = options.is_own_profile || false;
        that.wa_app_url = options.wa_app_url || '';
        that.wa_backend_url = options.wa_backend_url || '';
        that.wa_url = options.wa_url || '';
        that.wa_version = options.wa_version || '';
        that.webasyst_id_auth_url = options.webasyst_id_auth_url || '';

        // DYNAMIC VARS
        that.is_locked = false;
        that.xhr = false;
        that.dialogs = [];
        that.$calendar_wrapper = null;
        that.$calendar_date_filter = null;
        that.sidebar_drawer = null;
        that.sidebarDialog = {};

        // INIT
        that.initClass();
        that.initEditor(options.editor || {});
    };

    Profile.prototype.initEditor = function (editor_data) {
        if ($.isEmptyObject(editor_data) || $.isEmptyObject(editor_data.options) || $.isEmptyObject(editor_data.data)) {
            return;
        }

        const that = this;

        $.storage = new $.store();

        // init editor options
        $.each(editor_data.options || {}, function (key, value) {
            $.wa.contactEditor[key] = value;
        })

        if (that.is_own_profile){
            $.wa.contactEditor.wa_app_url = that.wa_backend_url;
        }else{
            $.wa.contactEditor.wa_app_url = that.wa_app_url;
        }

        $.wa.contactEditor.wa_backend_url = that.wa_backend_url;

        $.wa.contactEditor.initFactories(editor_data.data.contactFields, editor_data.data.contactFieldsOrder);
        $.wa.contactEditor.resetFieldEditors();
        $.wa.contactEditor.initFieldEditors(editor_data.data.fieldValues);

        // initially set to 'view' mode
        $.wa.contactEditor.initContactInfoBlock('view');

        if (that.is_own_profile || !editor_data.data.fieldValues.timezone){
            // If user timezone setting is 'Auto', use JS to set timezone.
            $.wa.determineTimezone(that.wa_url);
        }

        // Edit contact data
        const dialog_template = `<div class="dialog t-edit-profile">
            <div class="dialog-background"></div>
            <div class="dialog-body" style="width: 800px;">
            <h3 class="dialog-header">${ $_('Contact info') }</h3>
                <div class="dialog-content fields"></div>
                <div class="dialog-footer"></div>
            </div>
        </div>`;

        that.$profile_header_links.on('click', '.edit-link', function() {
            const $user_info = $('.js-user-info')
            let $contact_info_block;

            if (that.contactsDialog) {
                that.contactsDialog.show();
                return;
            }

            that.contactsDialog = $.waDialog({
                html: dialog_template,
                onOpen($dialog, dialog){
                    $.wa.contactEditor.dialogInstance(dialog);
                    $.wa.contactEditor.switchMode('edit');
                    $contact_info_block = $('#contact-info-block');
                    dialog.$content.append($contact_info_block);
                    dialog.resize();
                    $($.wa.contactEditor).on('contact_saved', function() {
                        dialog.hide();
                    });
                },
                onClose(dialog){
                    dialog.hide();
                    return false;
                }
            })
        });

    };

    Profile.prototype.initClass = function() {
        var that = this;
        //
        that.bindEvents();
        //
        if ($.team && $.team.sidebar) {
            $.team.sidebar.selectLink(false);
        }

        new ProfileWebasystID({
            is_own_profile: that.is_own_profile,
            user: that.user,
            backend_url: that.wa_backend_url,
            wa_url: that.wa_url,
            wa_version: that.wa_version,
            webasyst_id_auth_url: that.webasyst_id_auth_url,
            ui: '2.0'
        });

        $(document).on('wa_before_load', () => {
            that.sidebar_drawer = null;
            that.showSidebarDrawer(true);
        });

        that.showSidebarDrawer(true);
    };

    Profile.prototype.bindEvents = function() {
        var that = this;

        that.$tabs.on("click", ".t-tab a", function() {
            that.changeTab( $(this) );
            return false;
        });

        that.$calendarPlace.on("click", ".js-calendar-toggle", function(event) {
            event.preventDefault();
            that.calendarToggle( $(this) );
        });

        that.$wrapper.find('.js-sidebar-calendar').on("click", ".js-show-outer-calendar-manager", function(event) {
            event.stopPropagation();
            that.showOuterDialogDialog();
        });

        $(document).on("click", ".t-profile-drawer .js-show-outer-calendar-manager", function(event) {
            event.stopPropagation();
            that.showOuterDialogDialog();
        });

        // When photo editor dialog changes something, update the contact photo
        that.$wrapper.on('photo_updated photo_deleted', function(evt, data) {
            that.$wrapper.find('.t-userpic').attr('src', data.url);
        });

        // Open photo editor when user clicks on "Change photo" link
        that.$wrapper.find('.js-change-photo').on('click', function() {
            let $wrapper = $('#contact-photo-crop-dialog');

            if (!$wrapper.length) {
                $wrapper = $('<div class="dialog" id="contact-photo-crop-dialog"/>');
                $("body").append($wrapper);
            }

            $wrapper.load(that.photo_dialog_url, function () {
                $.waDialog({
                    $wrapper
                })
            })
        });

        that.$profile_header_links.on('click', '.access-link', function() {
            const href = "?module=profile&action=sidebarDialog";
            let is_params_error = false;

            const options = $(this)[0].dataset;
            options.userId = that.user.id

            if (that.accessDialog) {
                that.accessDialog.show();
                return;
            }

            const html = `
                <div class="dialog t-sidebar-profile-dialog">
                    <div class="dialog-background"></div>
                    <div class="dialog-body flexbox vertical" ${options.dialogWidth ? ' style="width:' + options.dialogWidth?.replace(/(<([^>]+)>)/gi, "")  +'"': "" }>
                        <h3 class="dialog-header">${options.dialogHeader?.replace(/(<([^>]+)>)/gi, '') || ''}</h3>
                        <div class="dialog-content wide"></div>
                        <div class="dialog-footer custom-mt-auto">
                            <button type="button" class="button light-gray js-close-dialog">${is_params_error ? 'Ok' : $_('Close')}</button>
                        </div>
                    </div>
                </div>
            `;

            that.accessDialog = $.waDialog({
                html,
                onOpen($dialog, dialog) {
                    dialog.$content.empty().append('<div class="align-center"><span class="spinner custom-p-16"></span></div>');

                    $.post(href, options, function (content) {
                        dialog.$content.empty().html(content);
                        that.$wrapper.trigger('dialog_opened', dialog);
                    });
                },
                onClose(dialog) {
                    dialog.hide();
                    $.team.content.reload();
                    return false;
                }
            });
        });

        that.$profile_header_links.on('click', '.delete-link', function() {
            const $link = $(this)
            $(document).on('wa_confirm_contact_delete_dialog', function() {
                $link.find('[data-icon="trash-alt"]').removeClass('hidden');
                $link.find('[data-icon="spinner"]').addClass('hidden');
            })
            $link.find('svg').toggleClass('hidden')
            $.team.confirmContactDelete([that.user.id]);
        });

        $('.js-edit-groups').on('click', function(){
            that.showSidebarDialog($('.access-link').data());
        });

        that.$wrapper.find('.js-profile-user-slider').one('click touchstart', function() {
            $(this).animate({
                height: '375px'
            },function () {
                $(this).removeClass('cursor-pointer');
            })
        });

        that.$wrapper.find('.js-toggle-user-info').on("click", function(event) {
            event.preventDefault();
            $(this).find('svg').toggleClass('fa-caret-down fa-caret-up')
            that.$wrapper.find('.js-user-info').toggleClass('hidden')
        });

        that.$profile_sidebar.on("click", '.js-sidebar-profile-dialog', function(event) {
            event.preventDefault();
            let section_data = this.dataset
            if (section_data.sectionId === undefined) {
                section_data = this.closest('[data-section]').querySelector('.js-sidebar-profile-dialog').dataset;
            }
            // send all data-* attributes to controller
            that.showSidebarDialog(section_data);
        });

        // use ONE to avoid double dialog opening. because content reload when dialog closed
        $(document).one("click", '.t-profile-drawer .js-sidebar-profile-dialog', function(event) {
            event.preventDefault();
            let section_data = this.dataset
            if (section_data.sectionId === undefined) {
                section_data = this.closest('[data-section]').querySelector('.js-sidebar-profile-dialog').dataset;
            }
            // send all data-* attributes to controller
            that.showSidebarDialog(section_data);
        });

        that.$wrapper.find(".js-show-drawer").on("click", function (event) {
            event.preventDefault();
            that.showSidebarDrawer();
        });
    };

    /**
     * @deprecated
     * @param tab_id
     * @param testCallback
     * @returns {any}
     */
    Profile.prototype.switchToTab = function(tab_id, testCallback) {

        var $iframes_wrapper = this.$wrapper.find('.t-profile-tabs-iframes');
        var $tab_a = this.$wrapper.find('.t-tab a[data-tab-id="'+tab_id+'"]');
        var deferred = $.Deferred();

        $tab_a.on('tab_content_updated', tryCallback);
        var interval = setInterval(tryCallback, 100);
        if ($tab_a.closest('.t-tab').hasClass('is-selected')) {
            tryCallback();
        } else {
            $tab_a.click();
        }

        // Animate scroll to tabs
        if ($tab_a.length) {
            $('html, body').animate({
                scrollTop: $tab_a.offset().top
            }, 500);
        }

        return deferred.promise();

        function tryCallback() {
            var $iframe = $iframes_wrapper.children().filter(function() {
                return tab_id == $(this).data('tab-id');
            }).first();
            try {
                if (!$iframe[0].contentWindow || !testCallback($iframe)) {
                    return;
                }
                setTimeout(function() {
                    deferred.resolve($iframe);
                }, 0);
                $tab_a.off('tab_content_updated', tryCallback);
                if (interval) {
                    clearInterval(interval);
                }
                interval = null;
            } catch (e) {
            }
        }
    };

    /**
     * @deprecated
     * @param $link
     */
    Profile.prototype.changeTab = function( $link ) {

        if (this.api_enabled) {

            var tab_id = $link.data('tab-id');
            var profile_uri = window.location.href.match(/^.*\/(id|u)\/[^\/]+/);
            if (!profile_uri || !tab_id) {
                return;
            }

            var uri = profile_uri[0] + '/' + tab_id + '/';
            history.replaceState({
                reload: true,
                content_uri: uri
            }, "", uri);
        }

    };

    Profile.prototype.calendarToggle = function( $toggle ) {
        var that = this,
            short_class = "is-short",
            $text = $toggle.find(".t-calendar-toggle .text"),
            is_active = that.$calendarPlace.hasClass(short_class);

        if ( is_active ) {
            $text.text( $toggle.data("hide-text") );
            that.$calendarPlace.removeClass(short_class);
        } else {
            $text.text( $toggle.data("show-text") );
            that.$calendarPlace.addClass(short_class);
        }
    };

    Profile.prototype.showOuterDialogDialog = function() {
        var that = this,
            href = "?module=schedule&action=settings",
            data = {};

        if (that.user.id > 0) {
            href += '&id=' + that.user.id;
        }

        if (!that.is_locked) {
            that.is_locked = true;

            load();
        }

        function load() {
            $.post(href, data, function(html) {
                $.waDialog({
                    html
                });
            }).always( function() {
                that.is_locked = false;
            });
        }
    };

    Profile.prototype.showSidebarDialog = function (options) {
        const that = this,
            href = "?module=profile&action=sidebarDialog",
            $profile_sidebar_body = $('.js-profile-sidebar-body');
        let is_params_error = false;

        options.userId = that.user.id;

        if (that.sidebarDialog[options.sectionId]) {
            that.sidebarDialog[options.sectionId].show();
            return;
        }

        if(!options.sectionId || !options.userId) {
            is_params_error = true;
        }

        let full_calendar_link = '';
        if (options.sectionId === 'calendar') {
            full_calendar_link = `<a href="${that.wa_app_url}calendar/">
                                    <span>${options.dialogTeamCalendar}</span> 
                                    <i class="fas fa-external-link-alt fa-xs"></i>
                                </a>`;
        }

        const html = `
            <div class="dialog t-sidebar-profile-dialog">
                <div class="dialog-background"></div>
                <div class="dialog-body flexbox vertical" ${options.dialogWidth ? ' style="width:' + options.dialogWidth?.replace(/(<([^>]+)>)/gi, "")  +'"': "" }>
                    <div class="dialog-header flexbox"><h3>${options.dialogHeader?.replace(/(<([^>]+)>)/gi, '') || ''}</h3></div>
                    <div class="dialog-content wide"></div>
                    <div class="dialog-footer custom-mt-auto">
                        <button type="button" class="button light-gray js-close-dialog">${is_params_error ? 'Ok' : $_('Close')}</button>
                        ${full_calendar_link}
                    </div>
                </div>
            </div>
        `;

        that.sidebarDialog[options.sectionId] = $.waDialog({
            html,
            onOpen($dialog, dialog) {
                dialog.$content.empty().append('<div class="align-center"><span class="spinner custom-p-16"></span></div>');

                if (options.sectionId === 'calendar') {
                    if(!that.$calendar_wrapper) {
                        that.$calendar_wrapper = $profile_sidebar_body.find('.js-calendar-html > .t-calendar-wrapper').detach();
                    }

                    // if (!that.$calendar_date_filter) {
                    //     that.$calendar_date_filter = $profile_sidebar_body.find('.js-calendar-html > .js-date-filter').detach();
                    // }

                    dialog.$content.empty().append(that.$calendar_wrapper);
                    //dialog.$block.find('.dialog-header').append(that.$calendar_date_filter);
                    dialog.resize();
                    return;
                }

                if (options.url === '') {
                    const content = $('.js-tab-content-' + options.sectionId).html();
                    dialog.$content.empty().html(content);
                    dialog.resize();
                    that.$wrapper.trigger('dialog_opened', dialog);
                    return;
                }

                $.post(href, options, function(content) {
                    dialog.$content.empty().html(content);
                    that.$wrapper.trigger('dialog_opened', dialog);
                    const $section_iframe = $dialog.find(`.t-profile-section-iframe`);
                    if($section_iframe.length) {
                        $section_iframe.data('dialog', dialog);
                    }
                });
            },
            onClose(dialog) {
                dialog.hide();
                if (options.sectionId === 'calendar') {
                    $.team.content.reload();
                }
                return false;
            }
        });
    };

    Profile.prototype.showSidebarDrawer = function (is_init = false) {
        const that = this;
        if (!that.sidebar_drawer) {
            that.sidebar_drawer = $.waDrawer({
                $wrapper: $('.js-profile-sidebar-drawer'),
                lock_body_scroll: !is_init,
                onClose() {
                    this.hide()
                    return false;
                }
            });
            if (is_init) {
                setTimeout(() => {
                    that.sidebar_drawer.close();
                }, 100)
            }
        }else{
            let wrapper_style = that.sidebar_drawer.$wrapper[0].style;
            wrapper_style.removeProperty('z-index')
            wrapper_style.removeProperty('opacity')
            that.sidebar_drawer.show();
        }
    };

    // `static` function, not in prototype
    // JS for templates/actions/profile/sidebarWidgets/Access.html
    // This loads twice with two different `$wrapper`s.
    // One for sidebar that is always visible on wide screens.
    // One for slide-open drawer for narrow screens.
    // Both present in DOM but only one is visible at a time.
    Profile.initSidebarWidgetAccess = function(opts) {

        const $wrapper = opts.$wrapper,
            wa_backend_url = opts.wa_backend_url,
            user_id = opts.user_id,
            loc = opts.loc,
            $waid = $wrapper.find('.js-waid'),
            $sent_email_ok = $waid.find('.js-sent-email-ok');
        var is_loading = false;

        // Connect own profile to WAID by auth on WA domain with email and password
        $waid.on('click', '.js-send-email-invitation', function (e) {
            e.preventDefault();

            const $link = $(this),
                $loading = $waid.find('.js-loading');

            if (is_loading) {
                return;
            }

            $loading.show();
            is_loading = true;

            $.post(wa_backend_url+"?module=settings&action=waIDInviteUser", { id: user_id }).done(function ({ errors, data }) {
                if(errors) {
                    $.waDialog.alert({
                        title: loc.error,
                        text: errors,
                        button_title: loc.ok
                    });
                    return;
                }
                if (data) {
                    $link.addClass('hidden').find('.js-text').text(loc.email_again).end()
                        .find('.js-last-send-datetime').text(data.sent);
                    $sent_email_ok.removeClass('hidden');

                    setTimeout(() => {
                        $link.removeClass('hidden');
                        $sent_email_ok.addClass('hidden');
                    }, 1500);
                }
            })
            .always(function () {
                is_loading = false;
                $loading.hide();
            });
        });

        // Connect another user to WAID by telling them 8-digit numeric code
        $wrapper.on('click', '.js-connect-by-numeric-code', function(e) {

            const $a = $(this),
                  $loading = $a.find('.js-loading');

            if (is_loading) {
                return;
            }

            $loading.show();
            is_loading = true;

            var promises = [];

            // Generate code using system controller
            promises.push($.post(wa_backend_url+"?module=settings&action=waIDInviteUserByCode", { id: user_id }).then(function ({ errors, data }) {
                if(errors) {
                    return (new $.Deferred()).reject(errors).promise();
                }
                return data;
            }, function(xhr, test_status, error_thrown) {
                return test_status+' '+error_thrown;
            }));

            // Load dialog content from a Team controller
            // see templates/actions/profile/ProfileWaidConnectCodeDialog.html
            promises.push($.post("?module=profile&action=waidConnectCodeDialog", { id: user_id }).then(function (html) {
                return html;
            }, function(xhr, test_status, error_thrown) {
                return (new $.Deferred()).reject(test_status+': '+error_thrown).promise();
            }));

            // When both load, show dialog
            $.when.apply($, promises).then(function(code_info, dialog_html) {
                $.waDialog({
                    html: dialog_html,
                    onOpen: function($dialog, dialog_instance) {
                        // Code that initializes the dialog see inside dialog template
                        $dialog.trigger('dialog_opened', [code_info, dialog_instance]);
                    }
                });
            }, function(errors) {
                $.waDialog.alert({
                    title: loc.error,
                    text: errors,
                    button_title: loc.ok
                });
            }).always(function () {
                is_loading = false;
                $loading.hide();
            });
        });

        // Connect own profile to WAID user by scanning QR code with mobile app
        $wrapper.on('click', '.js-connect-by-qr-code', function(e) {

            const $a = $(this),
                  $loading = $a.find('.js-loading'),
                  $code_icon = $a.find('.js-code-icon');

            if (is_loading) {
                return;
            }

            $loading.show();
            $code_icon.hide();
            is_loading = true;

            var promises = [];

            // Generate code using system controller
            promises.push($.post(wa_backend_url+"?module=settings&action=waIDInviteUserByCode", { id: user_id, qrcode: 1 }).then(function ({ errors, data }) {
                if(errors) {
                    return (new $.Deferred()).reject(errors).promise();
                }
                return data;
            }, function(xhr, test_status, error_thrown) {
                return test_status+' '+error_thrown;
            }));

            // Load dialog content from a Team controller
            // see templates/actions/profile/ProfileWaidConnectCodeDialog.html
            promises.push($.post("?module=profile&action=waidConnectQrcodeDialog", { id: user_id }).then(function (html) {
                return html;
            }, function(xhr, test_status, error_thrown) {
                return (new $.Deferred()).reject(test_status+': '+error_thrown).promise();
            }));

            // Load JS library that draws QR-codes
            promises.push($.getScript(opts.wa_url + 'wa-content/js/qrcode/qrcode.min.js'));

            // When everything loads, show dialog
            $.when.apply($, promises).then(function(code_info, dialog_html) {
                $.waDialog({
                    html: dialog_html,
                    onOpen: function($dialog, dialog_instance) {
                        // Code that initializes the dialog see inside dialog template
                        $dialog.trigger('dialog_opened', [code_info, dialog_instance]);
                    }
                });
            }, function(errors) {
                $.waDialog.alert({
                    title: loc.error,
                    text: errors,
                    button_title: loc.ok
                });
            }).always(function () {
                is_loading = false;
                $loading.hide();
                $code_icon.show();
            });
        });
    };

    return Profile;

})(jQuery);

// Team :: Activity :: Lazy Loading
var ActivityLazyLoading = ( function($) {

    ActivityLazyLoading = function(options) {
        var that = this;

        // VARS
        that.list_name = options["names"]["list"];
        that.items_name = options["names"]["items"];
        that.pagind_name = options["names"]["paging"];
        that.user_id = options["user_id"];

        // DOM
        that.$wrapper = ( options["$wrapper"] || false );
        that.$list = that.$wrapper.find(that.list_name);
        that.$window = $(window);

        // Handler
        that.onLoad = ( options["onLoad"] || function() {} );

        // DYNAMIC VARS
        that.$paging = that.$wrapper.find(that.pagind_name);
        that.xhr = false;
        that.is_locked = false;

        // INIT
        that.addWatcher();
    };

    ActivityLazyLoading.prototype.addWatcher = function() {
        var that = this,
            window_parent = window.parent;

        that.$window.on("scroll", onScroll);
        if (window_parent && window.frameElement) {
            $(window_parent).on("scroll", onScroll);
        }

        function onScroll() {
            var is_paging_exist = window && ( $.contains(document, that.$paging[0]) );
            if (is_paging_exist && window_parent && window.frameElement) {
                is_paging_exist = $.contains(window_parent.document, window.frameElement);
            }

            if (is_paging_exist) {
                try {
                    that.onScroll();
                } catch (e) {
                    is_paging_exist = false;
                }
            }
            if (!is_paging_exist) {
                that.$window.off("scroll", onScroll);
                $(window_parent).off("scroll", onScroll);
            }
        }
    };

    ActivityLazyLoading.prototype.onScroll = function() {
        var that = this,
            $window = that.$window,
            scroll_top = $window.scrollTop(),
            display_height = $window.height(),
            paging_top = that.$paging.offset().top;

        if (window.parent && window.frameElement) {
            var $parent_window = $(window.parent);
            display_height = $parent_window.height();
            scroll_top += $parent_window.scrollTop();
            paging_top += $(window.frameElement).offset().top;
        }

        // If we see paging, stop watcher and run load
        if (scroll_top + display_height >= paging_top) {

            if (!that.is_locked) {
                that.is_locked = true;
                that.loadNextPage();
            }
        }
    };

    ActivityLazyLoading.prototype.loadNextPage = function() {
        var that = this,
            href = $.team.app_url + "?module=profile&action=activity",
            data = {
                max_id: that.$paging.data("max-id"),
                id: that.user_id,
                timestamp: that.$list.find(that.items_name).last().data("timestamp")
            };

        if (that.xhr) {
            that.xhr.abort();
            that.xhr = false;
        }

        that.xhr = $.get(href, data, function(response) {
            var $wrapper = $(response),
                $newItems = $wrapper.find(that.list_name + " " + that.items_name),
                $newPaging = $wrapper.find(that.pagind_name);

            that.$list.append($newItems);
            that.$paging.after($newPaging);
            that.$paging.remove();
            that.$paging = $newPaging;
            that.is_locked = false;
            //
            that.onLoad();
        });
    };

    return ActivityLazyLoading;

})(jQuery);

var OutsideCalendarsDialog = ( function($) {

    OutsideCalendarsDialog = function(options) {
        var that = this;

        // DOM
        that.$dialogWrapper = options["$wrapper"];
        that.$wrapper = that.$dialogWrapper.find(".dialog-body");
        that.$form = that.$wrapper;

        // VARS
        that.dialog = that.$dialogWrapper.data('dialog');

        // DYNAMIC VARS
        that.is_locked = false;
        that.xhr = false;

        // INIT
        that.initClass();
    };

    OutsideCalendarsDialog.prototype.initClass = function() {
        var that = this;

        that.bindEvents();
    };

    OutsideCalendarsDialog.prototype.bindEvents = function() {
        var that = this;

        that.$wrapper.on("click", ".t-external-calendar-unmount", function () {
            that.deleteExternalCalendar( $(this).data('id') );
        });

        that.$wrapper.find(".js-add-external-calendar").on("click", function(event) {
            event.preventDefault();
            //
            that.dialog.close();
            //
            var content_uri = $(this).attr("href");
            if (content_uri) {
                $.team.content.load(content_uri);
            }
        });
    };

    OutsideCalendarsDialog.prototype.deleteExternalCalendar = function (id) {
        var that = this;
        $.get('?module=calendarExternal&action=DeleteConfirm', { id }, function (html) {
            $.waDialog({
                html,
                onOpen($dialog, dialog) {
                    $dialog.on('afterDelete', () => {
                        $.team.content.reload();
                        that.dialog.close();
                        dialog.close();
                    });
                }
            });
        });
    };

    return OutsideCalendarsDialog;

})(jQuery);
;

(function ($) {

/**
  * Base classs for all editor factory types, all editor factories and all editors.
  * Implements JS counterpart of contactsFieldEditor with no validation.
  *
  * An editor factory can be created out of factory type (see $.wa.contactEditorFactory.initFactories())
  *
  * Editor factories create editors using factory.createEditor() method. Under the hood
  * a factory simply copies self, removes .createEditor() method from the copy and calls
  * its .initialize() method.
  */
$.wa.fieldTypesFactory = function(contactEditor, fieldType) { "use strict";

    contactEditor = contactEditor || $.wa.contactEditorFactory();

    if (!contactEditor.baseFieldType) {//{{{
        contactEditor.baseFieldType = {

            //
            // Public editor factory functions. Not available in editor instances.
            //

            contactType: 'person',

            options: {},

            /** For multifields, return a new (empty) editor for this field. */
            createEditor: function(contactType) {
                this.contactType = contactType || 'person';
                var result = $.extend({}, this);
                delete result.createEditor; // do not allow to use instance as a factory
                delete result.initializeFactory;
                result.parentEditorData = {};
                result.initialize();
                return result;
            },

            //
            // Editor properties set in subclasses.
            //

            /** Last value set by setValue() (or constructor).
              * Default implementation expects fieldValue to be string.
              * Subclasses may store anything here. */
            fieldValue: '',

            //
            // Editor functions that should be redefined in subclasses
            //

            /** Factory constructor. */
            initializeFactory: function(fieldData, options) {
                this.fieldData = fieldData;
                this.options = options || {};
            },

            /** Editor constructor. Should set all appropriate fields as if
              * this.setValue() got called with an empty data (with no record in db).
              * this.fieldData is available for standalone fields,
              * or empty {} for subfields of a multifield. */
            initialize: function() {
                this.setValue('');
            },

            reinit: function() {
                this.currentMode = 'null';
                this.initialize();
            },

            /** Load field contents from given data and update DOM. */
            setValue: function(data) {
                this.fieldValue = data;
                if (this.currentMode == 'null' || this.domElement === null) {
                    return;
                }

                if (this.currentMode == 'edit') {
                    this.domElement.find('.val').val(this.fieldValue);
                } else {
                    this.domElement.find('.val').html($.wa.encodeHTML(this.fieldValue));
                }
            },

            /** Get data from this field after (possible) user modifications.
              * @return mixed Data object as accepted by this.setValue() and server-side handler. */
            getValue: function() {
                var result = this.fieldValue;
                if (this.currentMode == 'edit' && this.domElement !== null) {
                    var input = this.domElement.find('.val');
                    if (input.length > 0) {
                        result = '';
                        if (!input.hasClass('empty')) { // default values use css class .empty to grey out value
                            if (input.attr('type') != 'checkbox' || input.prop('checked')) {
                                result = input.val();
                            }
                        }
                    }
                }
                return result;
            },

            /** true if this field was modified by user and now needs to save data */
            isModified: function() {
                return this.fieldValue != this.getValue();
            },

            /** Validate field value (and possibly change it if needed)
              * @param boolean skipRequiredCheck (default false) set to true to skip check required fields to be not empty
              * @return mixed Validation data accepted by showValidationErrors(), or null if no errors. Default implementation accepts simple string. */
            validate: function(skipRequiredCheck) {
                var val = this.getValue();
                if (!skipRequiredCheck && this.fieldData.required && !val) {
                    return $_('This field is required.');
                }
                return null;
            },

            /** Return a new jQuery object that represents this field in given mode.
              * Use of contactEditor.wrapper is recommended if apropriate.
              * In-place editors are initialized here.
              * Must contain exactly one element, even when field is currently not visible.
              * Default implementation uses this.newInlineFieldElement(), wraps it and initializes in-place editor.
              */
            newFieldElement: function(mode) {
                if(this.fieldData.read_only) {
                    mode = 'view';
                }
                var inlineElement = this.newInlineFieldElement(mode);

                // Do not show anything if there's no inline element
                if(inlineElement === null && (!this.fieldData.show_empty || mode == 'edit')) {
                    return $('<div style="display: none" class="field" data-field-id="' + this.fieldData.id + '"></div>');
                }

                var nameAddition = '';
                //if (mode == 'edit') {
                //    nameAddition = (this.fieldData.required ? '<span class="req-star">*</span>' : '')+':';
                //}
                var cssClass;
                if (this.contactType === 'person') {
                    if (['firstname', 'middlename', 'lastname'].indexOf(this.fieldData.id) >= 0) {
                        cssClass = 'subname';
                        inlineElement.find('.val').attr('placeholder', this.fieldData.name).attr('title', this.fieldData.name).addClass('small width-100-mobile');
                    } else if (this.fieldData.id === 'title') {
                        cssClass = 'subname title';
                        inlineElement.find('.val').attr('placeholder', this.fieldData.name).attr('title', this.fieldData.name).addClass('small width-100-mobile');
                    } else if (this.fieldData.id === 'jobtitle') {
                        cssClass = 'jobtitle-company jobtitle';
                        inlineElement.find('.val').addClass('small width-100-mobile');
                    } else if (this.fieldData.id === 'company') {
                        cssClass = 'jobtitle-company company';
                        inlineElement.find('.val').addClass('small width-100-mobile');
                    }
                } else if (this.fieldData.id === 'company') {
                    cssClass = 'company';
                }
                return contactEditor.wrapper(inlineElement, this.fieldData.name+nameAddition, cssClass).attr('data-field-id', this.fieldData.id);
            },

            /** When used as a part of multi or composite field, corresponding wrapper
              * uses this function (if defined and not null) instead of newFieldElement().
              * Unwrapped value (but still $(...) wrapped) is expected. If null returned, field is not shown.
              */
            newInlineFieldElement: function(mode) {
                // Do not show anything in view mode if field is empty
                if(mode == 'view' && !this.fieldValue) {
                    return null;
                }
                var value = $.isPlainObject(this.fieldValue) ? this.fieldValue.value : this.fieldValue;
                var result = null;
                if (mode == 'edit') {
                    result = $('<span class="width-100-mobile custom-mr-0-mobile"><input class="val small width-100-mobile" type="text"></span>');
                    result.find('.val').val(value);
                } else {
                    result = $('<span class="val small"></span>');
                    result.text(value);
                }
                return result;
            },

            /** Remove old validation errors if any and show given error info for this field.
              * Optional to redefine in subclasses.
              * Must be redefined for editors that do not use the default contactEditor.wrapper().
              * Default implementation accepts simple string.
              * @param errors mixed Validation error data as generated by this.validate() (or server), or null to hide all errors. */
            showValidationErrors: function(errors) {
                if (this.domElement === null) {
                    return;
                }

                var input = this.domElement.find('.val');
                input.nextAll('.state-error-hint').remove();

                if (errors !== null) {
                    input.after($('<p class="state-error-hint custom-mt-8">'+errors+'</p>'));
                    input.addClass('state-error');
                } else {
                    input.removeClass('state-error');
                }

                contactEditor.dialog.resize();
            },

            //
            // Public properties that can be used in editors
            //

            /** Field data as returned from $typeClass->getValue() for this class in PHP.
              * When this field is a subfield for a multifield, this var contains
              * {id: null, multi: false, name: 'Subfield Name'} */
            fieldData: null,

            /** jQuery object that contains wrapping DOM element that currently
              * represents this field in contact info block. When not null,
              * always contains exactly one element, even if field is currently not visible. */
            domElement: null,

            /** Is domElement in 'view', 'edit' or 'null' mode. */
            currentMode: 'null',

            /** Editor that uses this one as a subfield */
            parentEditor: null,

            /** Any data that parent would want to put here. */
            parentEditorData: null,

            //
            // Public editor functions
            //

            /** Set given editor mode and return DOM element that represents this field.
              * If this editor is already initialized (i.e. this.currentMode is not 'null'),
              * this function replaces old this.domElement in DOM with new value.
              * @param mode string 'edit' or 'view'
              * @param replaceEditor boolean (optional, default true) pass false to avoid creating dom element (e.g. to use as a subfield)
              */
            setMode: function(mode, replaceEditor) {
                if (typeof replaceEditor == 'undefined') {
                    replaceEditor = true;
                }
                if (mode != 'view' && mode != 'edit') {
                    throw new Error('Unknown mode: '+mode);
                }
                if (this.currentMode != mode) {
                    this.currentMode = mode;
                    if (replaceEditor) {
                        var oldDom = this.domElement;
                        this.domElement = this.newFieldElement(mode);
                        if (oldDom !== null) {
                            oldDom.replaceWith(this.domElement);
                        }
                    }
                }

                return this.domElement;
            }
        }; // end of baseFieldType
    }//}}}

    //
    // Factory Types
    // {{{

    contactEditor.factoryTypes.Hidden = $.extend({}, contactEditor.baseFieldType, {//{{{
        newFieldElement: function(mode) {
            var inlineElement = this.newInlineFieldElement(mode);
            return contactEditor.wrapper(inlineElement, this.fieldData.name).attr('data-field-id', this.fieldData.id).hide();
        },
        newInlineFieldElement: function(mode) {
            // Do not show anything in view mode if field is empty
            if(mode == 'view' && !this.fieldValue) {
                return null;
            }
            var result = null;
            if (mode == 'edit') {
                result = $('<span><input type="hidden" class="val" type="text"></span>');
                result.find('.val').val(this.fieldValue);
            }
            return result;
        }
    });//}}}

    contactEditor.factoryTypes.String = $.extend({}, contactEditor.baseFieldType, {//{{{
        setValue: function(data) {
            this.fieldValue = data;
            if (this.currentMode == 'null' || this.domElement === null) {
                return;
            }

            if (this.currentMode == 'edit') {
                this.domElement.find('.val').val(this.fieldValue);
            } else {
                this.domElement.find('.val').html($.wa.encodeHTML(this.fieldValue));
            }
        },

        getValue: function() {
            var result = this.fieldValue;
            if (this.currentMode == 'edit' && this.domElement !== null) {
                var input = this.domElement.find('.val');
                result = '';
                if (!input.hasClass('empty')) { // default values use css class .empty to grey out value
                    result = input.val();
                }
            }
            return result;
        },

        newInlineFieldElement: function(mode) {
            // Do not show anything in view mode if field is empty
            if(mode == 'view' && !this.fieldValue) {
                return null;
            }

            var result = null;
            var value = this.fieldValue;
            if (mode == 'edit') {
                if (this.fieldData.input_height <= 1) {
                    result = $('<span><input class="val small" type="text"><i class="fas fa-spinner fa-spin loading wa-animation-spin speed-1000" style="display:none;"></i></span>');
                } else {
                    result = $('<span><textarea class="val small width-100" rows="'+this.fieldData.input_height+'"></textarea></span>');
                }
                result.find('.val').val(value);
            } else {
                if (this.fieldData.input_height <= 1) {
                    result = $('<span class="val small"></span><i class="fas fa-spinner fa-spin loading wa-animation-spin speed-1000" style="display:none;">').text(value);
                } else {
                    var text = $.wa.encodeHTML(value || '').replace(/\n/g, '<br>');
                    result = $('<span class="val small"></span><i class="fas fa-spinner fa-spin loading wa-animation-spin speed-1000" style="display:none;">').html(text);
                }
            }
            return result;
        },

        setMode: function(mode, replaceEditor) {
            if (typeof replaceEditor == 'undefined') {
                replaceEditor = true;
            }
            if (mode != 'view' && mode != 'edit') {
                throw new Error('Unknown mode: '+mode);
            }

            if (this.currentMode != mode) {
                this.currentMode = mode;
                if (replaceEditor) {
                    var oldDom = this.domElement;
                    this.domElement = this.newFieldElement(mode);
                    if (oldDom !== null) {
                        oldDom.replaceWith(this.domElement);
                    }
                }
            }

            return this.domElement;
        }


    });//}}}

    contactEditor.factoryTypes.Text = $.extend({}, contactEditor.factoryTypes.String);
    contactEditor.factoryTypes.Phone = $.extend({}, contactEditor.baseFieldType);

    contactEditor.factoryTypes.Select = $.extend({}, contactEditor.baseFieldType, {//{{{
        notSet: function() {
            return '';
        },

        newInlineFieldElement: function(mode) {
            // Do not show anything in view mode if field is empty
            if(mode == 'view' && !this.fieldValue) {
                return null;
            }

            if(mode == 'view') {
                return $('<span class="val small"></span>').text(this.fieldData.options[this.fieldValue] || this.fieldValue);
            } else {
                var options = '';
                var selected = false, attrs;
                for(var i = 0; i<this.fieldData.oOrder.length; i++) {
                    var id = this.fieldData.oOrder[i];
                    if (!selected && id == this.fieldValue && this.fieldValue) {
                        selected = true;
                        attrs = ' selected';
                    } else {
                        attrs = '';
                    }
                    if (id === '') {
                        attrs += ' disabled';
                    }

                    id = id || '';
                    id = typeof id === 'string' ? id : ('' + id);

                    // Escape not only html tags but also quote
                    var id_safe = $.wa.encodeHTML(id).replace('"', '&quot;');

                    var opt = '<option value="{$id}" {$attrs}>{$text}</option>'
                            .replace('{$id}', id_safe)
                            .replace('{$attrs}', attrs)
                            .replace('{$text}', $.wa.encodeHTML(this.fieldData.options[id]));

                    options += opt;
                }

                return $('<div class="wa-select small width-100-mobile"><select class="val '  + (this.fieldData.type + '').toLowerCase() + '"><option value=""'+(selected ? '' : ' selected')+'>'+this.notSet()+'</option>'+options+'</select></div>');
            }
        }
    });//}}}

    contactEditor.factoryTypes.Conditional = $.extend({}, contactEditor.factoryTypes.Select, {//{{{

        unbindEventHandlers: function() {},

        getValue: function() {
            var result = this.fieldValue;
            if (this.currentMode == 'edit' && this.domElement !== null) {
                var input = this.domElement.find('.val:visible');
                if (input.length > 0) {
                    if (input.hasClass('empty')) {
                        result = '';
                    } else {
                        result = input.val();
                    }
                }
            }
            return result;
        },

        newInlineFieldElement: function(mode) {
            // Do not show anything in view mode if field is empty
            if(mode == 'view' && !this.fieldValue) {
                return null;
            }
            this.unbindEventHandlers();

            if(mode == 'view') {
                return $('<div></div>').append($('<span class="val"></span>').text((this.fieldData.options && this.fieldData.options[this.fieldValue]) || this.fieldValue));
            } else {
                var cond_field = this;

                // find the the field we depend on
                var parent_field_id_parts = (cond_field.fieldData.parent_field || '').split(':');
                var parent_field = contactEditor.fieldEditors[parent_field_id_parts.shift()];
                while (parent_field && parent_field_id_parts.length) {
                    var subfields = parent_field.subfieldEditors;
                    if (subfields instanceof Array) {
                        // This is a multi-field. Select the one that we're part of (if any)
                        parent_field = null;
                        for (var i = 0; i < subfields.length; i++) {
                            if (subfields[i] === cond_field.parentEditor) {
                                parent_field = subfields[i];
                                break;
                            }
                        }
                    } else {
                        // This is a composite field. Select subfield by the next id part
                        parent_field = subfields[parent_field_id_parts.shift()];
                    }
                }

                if (parent_field) {
                    var initial_value = (this.fieldData.options && this.fieldData.options[this.fieldValue]) || this.fieldValue;
                    var input = $('<input type="text" class="hidden val">').val(initial_value);
                    var select = $('<select class="hidden val"></select>').hide();

                    var getVal = function() {
                        if (input.is(':visible')) {
                            return input.val();
                        } else if (select.is(':visible')) {
                            return select.val();
                        } else {
                            return initial_value;
                        }
                    };

                    var change_handler = function() {
                        var parent_val_element = $(this);
                        var old_val = getVal();
                        var parent_value = (parent_val_element.val() || '').toLowerCase();
                        var values = cond_field.fieldData.parent_options[parent_value];
                        if (values) {
                            input.hide();
                            select.show().children().remove();
                            for (i = 0; i < values.length; i++) {
                                select.append($('<option></option>').attr('value', values[i]).text(values[i]).attr('selected', cond_field.fieldValue == values[i]));
                            }
                            select.val(old_val);
                        } else {
                            input.val(old_val || '').show().blur();
                            select.hide();
                        }
                    };

                    // Listen to change events from field we depend on.
                    // setTimeout() to ensure that field created its new domElement.
                    setTimeout(function() {
                        if (!parent_field.domElement) {
                            input.show();
                            return;
                        }
                        parent_field.domElement.on('change', '.val', change_handler);
                        var el = parent_field.domElement.find('.val:visible');
                        if (el.length) {
                            change_handler.call(el.get(0));
                        }
                    }, 0);

                    cond_field.unbindEventHandlers = function() {
                        if (change_handler && parent_field.domElement) {
                            parent_field.domElement.find('.val').unbind('change', change_handler);
                        }
                        cond_field.unbindEventHandlers = function() {};
                    };

                    return $('<div></div>').append(input).append(select);
                } else {
                    return $('<div></div>').append($('<input type="text" class="val small width-100-mobile">').val(cond_field.fieldValue));
                }
            }
        }
    });//}}}

    contactEditor.factoryTypes.Timezone = $.extend({}, contactEditor.factoryTypes.Select, {//{{{
        notSet: function() {
            return $_('Auto');
        }
    });//}}}

    contactEditor.factoryTypes.Region = $.extend({}, contactEditor.factoryTypes.Select, {//{{{
        notSet: function() {
//            if (this.fieldData.options && this.fieldValue && !this.fieldData.options[this.fieldValue]) {
//                return this.fieldValue;
//            }
            return '';
        },

        unbindEventHandlers: function() {},

        setCurrentCountry: function() {
            var old_country = this.current_country;
            this.current_country = this.parentEditorData.parent.subfieldEditors.country.getValue();
            if (old_country !== this.current_country) {
                delete this.fieldData.options;
                return true;
            }
            return false;
        },

        getRegionsControllerUrl: function(country) {
            return contactEditor.getRegionsUrl() + country;
        },

        newInlineFieldElement: function(mode) {

            // Do not show anything in view mode if field is empty
            if(mode == 'view' && !this.fieldValue) {
                return null;
            }

            this.unbindEventHandlers();

            var options = this.options || {};
            if (options.country !== undefined) {
                this.current_country = options.country;
            }

            if(mode == 'view') {
                return $('<div></div>').append($('<span class="val"></span>').text((this.fieldData.options && this.fieldData.options[this.fieldValue]) || this.fieldValue));
            } else {
                var region_field = this;

                // This field depends on currently selected country in address
                if (this.parentEditorData.parent && this.parentEditorData.parent.subfieldEditors.country) {
                    this.setCurrentCountry();
                    var handler;
                    $(document).on('change', 'select.country', handler = function() {
                        if (region_field.setCurrentCountry()) {
                            var prev_val = '';
                            var prev_val_el = region_field.domElement.find('.val');
                            if (prev_val_el.is('input')) {
                                prev_val = prev_val_el.val().trim();
                            } else {
                                prev_val = prev_val_el.find(':selected').text().trim();
                            }

                            var lookup = function(select, val) {
                                var v = val.toLocaleLowerCase();
                                select.find('option').each(function() {
                                    if ($(this).text().trim().toLocaleLowerCase() === v) {
                                        $(this).attr('selected', true);
                                        return false;
                                    }
                                });
                            };

                            region_field.domElement.empty().append(region_field.newInlineFieldElement(mode).children());

                            var val_el = region_field.domElement.find('.val');
                            if (val_el.is('input') && !val_el.val()) {
                                val_el.val(prev_val);
                            } else if (val_el.is('select') && prev_val) {
                                lookup(val_el, prev_val);
                            } else {
                                region_field.domElement.unbind('load.fieldTypes').bind('load.fieldTypes', function() {
                                    var val_el = region_field.domElement.find('.val');
                                    if (val_el.is('select') && prev_val) {
                                        lookup(val_el, prev_val);
                                    }
                                });
                            }
                        }
                    });
                    region_field.unbindEventHandlers = function() {
                        $(document).off('change', 'select.country', handler);
                        region_field.unbindEventHandlers = function() {};
                    };
                }

                if (!options.no_ajax_select && this.fieldData.options === undefined && this.current_country && this.fieldData.region_countries[this.current_country]) {
                    // Load list of regios via AJAX and then show select
                    var country = this.current_country;
                    $.get(this.getRegionsControllerUrl(country), function(r) {
                        if (mode !== region_field.currentMode || country !== region_field.current_country) {
                            return;
                        }
                        region_field.fieldData.options = r.data.options || false;
                        region_field.fieldData.oOrder = r.data.oOrder || [];
                        if ($.isPlainObject(region_field.options) && region_field.options.country !== undefined) {
                            delete region_field.options.country;
                        }
                        var d = $('<div></div>');
                        d.append(region_field.newInlineFieldElement(mode).children());
                        region_field.domElement.empty().append(region_field.newInlineFieldElement(mode).children());
                        region_field.domElement.trigger('load');
                    }, 'json');
                    return $('<div></div>').append($('<i class="icon16 loading"></i>'));
                } else if (this.fieldData.options) {
                    // Show as select
                    return $('<div></div>').append(contactEditor.factoryTypes.Select.newInlineFieldElement.call(this, mode));
                } else {
                    // show as input
                    var result = $('<div></div>').append(contactEditor.baseFieldType.newInlineFieldElement.call(this, mode));

                    result.find('.val').attr('placeholder', this.fieldData.name+(this.fieldData.required ? ' ('+$_('required')+')' : '')).addClass('small width-100-mobile');
                    return result;
                }
            }
        }
    });//}}}

    contactEditor.factoryTypes.Country = $.extend({}, contactEditor.factoryTypes.Select);

    contactEditor.factoryTypes.Checklist = $.extend({}, contactEditor.baseFieldType, {//{{{
        validate: function(skipRequiredCheck) {
//            if (!skipRequiredCheck && this.fieldData.required && this.getValue().length <= 0) {
//                return $_('This field is required.');
//            }
            return null;
        },
        setValue: function(data) {
            this.fieldValue = data;

            if(this.currentMode == 'edit' && this.domElement) {
                this.domElement.find('input[type="checkbox"]').attr('checked', false);
                for (var id in this.fieldValue) {
                    this.domElement.find('input[type="checkbox"][value="'+id+'"]').attr('checked', true);
                }
            } else if (this.currentMode == 'view' && this.domElement) {
                this.domElement.find('.val').html(this.getValueView());
            }
        },
        getValue: function() {
            if(this.currentMode != 'edit' || !this.domElement) {
                return this.fieldValue;
            }

            var result = [];
            this.domElement.find('input[type="checkbox"]:checked').each(function(k,input) {
                result.push($(input).val());
            });
            return result;
        },
        getValueView: function() {
            var options = '';
            // Show categories in alphabetical (this.fieldData.oOrder) order
            for(var i = 0; i<this.fieldData.oOrder.length; i++) {
                var id = this.fieldData.oOrder[i];
                if (this.fieldValue.indexOf(id) < 0) {
                    continue;
                }
                options += (options ? ', ' : '')+'<a href="'+(this.fieldData.hrefPrefix || '#')+id+'">'+((this.fieldData.options[id] && contactEditor.htmlentities(this.fieldData.options[id])) || $_('&lt;no name&gt;'))+'</a>';
            }
            return options || $_('&lt;none&gt;');
        },
        newInlineFieldElement: function(mode) {
            // Do not show anything in view mode if field is empty
            if(mode == 'view' && !(this.fieldValue && this.fieldValue.length)) {
                return null;
            }

            if(mode == 'view') {
                return $('<span class="val"></span>').html(this.getValueView());
            }

            //
            // Edit mode
            //

            // Is there more than one option to select from?
            var optionsAvailable = 0; // 0, 1 or 2
            var id;
            for(id in this.fieldData.options) {
                optionsAvailable++;
                if (optionsAvailable > 1) {
                    break;
                }
            }
            // Do not show the field at all if there's no options to select from
            if (!optionsAvailable) {
                return null;
            }

            var options = '';
            for(var i = 0; i<this.fieldData.oOrder.length; i++) {
                id = this.fieldData.oOrder[i];
                options += '<li><label><span class="wa-checkbox"><input type="checkbox" value="'+id+'"';

                // Checkboxes for system categories are disabled
                if (this.fieldData.disabled && this.fieldData.disabled[id]) {
                    options += ' disabled="disabled"';
                }

                if ((this.fieldValue || []).indexOf(id) !== -1) {
                    options += ' checked="checked"';
                }

                options += ' /><span><span class="icon"><i class="fas fa-check"></i></span></span></span>'+((this.fieldData.options[id] && contactEditor.htmlentities(this.fieldData.options[id])) || $_('&lt;no name&gt;'))+'</label></li>';
            }
            return contactEditor.initCheckboxList('<div class="c-checkbox-menu-container val"><div><ul class="menu c-checkbox-menu">'+options+'</ul></div></div>');
        }
    });//}}}

    contactEditor.factoryTypes.Name = $.extend({}, contactEditor.baseFieldType, {//{{{
        /** Cannot be used inline */
        newInlineFieldElement: null,

        newFieldElement: function(mode) {
            return $('<div style="display: none;" class="field" data-field-id="'+this.fieldData.id+'"></div>');
        },
        setValue: function(data) {
            this.fieldValue = data;
        },
        getValue: function(forced) {
            if (this.fieldValue && !forced) {
                return this.fieldValue;
            }

            // Have to build it manually for new contacts
            var val = [];
            if (this.contactType == 'person') {
                if (contactEditor.fieldEditors.firstname) {
                    val.push(contactEditor.fieldEditors.firstname.getValue());
                }
                if (contactEditor.fieldEditors.middlename) {
                    val.push(contactEditor.fieldEditors.middlename.getValue());
                }
                if (contactEditor.fieldEditors.lastname) {
                    val.push(contactEditor.fieldEditors.lastname.getValue());
                }
            } else {
                if (contactEditor.fieldEditors.company) {
                    val.push(contactEditor.fieldEditors.company.getValue());
                }
            }
            return val.join(' ').trim();
        },

        validate: function(skipRequiredCheck) {
            var that = this,
                val = this.getValue(true);
            if (!skipRequiredCheck && this.fieldData.required && !val) {
                // If all name parts are empy then set firstname to be value of the first visible non-empty input:text
                var newfname = $('#' + that.options.el +  ' input:visible:text[value]:not(.empty)').val();
                if (!newfname) {
                    return $_('At least one of these fields must be filled');
                }
                contactEditor.fieldEditors.firstname.setValue(newfname);
            }
            return null;
        },

        showValidationErrors: function(errors) {
            var that = this,
                el = $('#' + that.options.el);
            el.find('div.wa-errors-block').remove();
            if (errors !== null) {
                var err = $('<div class="field wa-errors-block"><div class="value"><p class="state-error-hint custom-mt-8">'+errors+'</p></div></div>');
                if (contactEditor.fieldEditors.lastname) {
                    contactEditor.fieldEditors.lastname.domElement.after(err);
                } else {
                    el.prepend(err);
                }
            }
            var a = ['firstname', 'middlename', 'lastname'];
            for(var i=0; i<a.length; i++) {
                var df = a[i];
                if (contactEditor.fieldEditors[df]) {
                    if (errors !== null) {
                        contactEditor.fieldEditors[df].domElement.find('.val').addClass('state-error');
                    } else {
                        contactEditor.fieldEditors[df].domElement.find('.val').removeClass('state-error');
                    }
                }
            }
        },

        setMode: function(mode, replaceEditor) {
            if (typeof replaceEditor == 'undefined') {
                replaceEditor = true;
            }
            if (mode != 'view' && mode != 'edit') {
                throw new Error('Unknown mode: '+mode);
            }

            if (this.currentMode != mode) {
                this.currentMode = mode;
                if (replaceEditor) {
                    var oldDom = this.domElement;
                    this.domElement = this.newFieldElement(mode);
                    if (oldDom !== null) {
                        oldDom.replaceWith(this.domElement);
                    }
                }
            }

            var title = '';
            if (contactEditor.fieldEditors.title) {
                title = contactEditor.fieldEditors.title.getValue()+' ';
            }

            return this.domElement;
        }

    });//}}}

    contactEditor.factoryTypes.NameSubfield = $.extend({}, contactEditor.baseFieldType, {});

    contactEditor.factoryTypes.Multifield = $.extend({}, contactEditor.baseFieldType, {//{{{
        subfieldEditors: null,
        subfieldFactory: null,
        emptySubValue: null,

        initializeFactory: function(fieldData) {

            this.fieldData = fieldData;
            if (typeof this.fieldData.ext != 'undefined') {
                this.fieldData.extKeys = [];
                this.fieldData.extValues = [];
                for(var i in this.fieldData.ext) {
                    this.fieldData.extKeys[this.fieldData.extKeys.length] = i;
                    this.fieldData.extValues[this.fieldData.extValues.length] = this.fieldData.ext[i];
                }
            }
        },

        initialize: function() {
            this.subfieldFactory = $.extend({}, contactEditor.factoryTypes[this.fieldData.type]);
            this.subfieldFactory.parentEditor = this;
            this.subfieldFactory.initializeFactory($.extend({}, this.fieldData));
            this.fieldData = $.extend({}, this.fieldData, {'required': this.subfieldFactory.fieldData.required});
            this.subfieldEditors = [this.subfieldFactory.createEditor(this.contactType)];
            if ($.isPlainObject(this.subfieldEditors[0].fieldValue)) {
                this.emptySubValue = $.extend({}, this.subfieldEditors[0].fieldValue);
                if (this.fieldData.ext) {
                    this.emptySubValue.ext = this.fieldData.extKeys[0];
                }
            } else {
                this.emptySubValue = {value: this.subfieldEditors[0].fieldValue};
                if (this.fieldData.ext) {
                    this.emptySubValue.ext = this.fieldData.extKeys[0];
                }
            }
            this.fieldValue = [this.emptySubValue];
        },

        setValue: function(data) {
            // Check if there's at least one value
            if (!data || typeof data[0] == 'undefined') {
                data = [this.emptySubValue];
            }
            this.fieldValue = data;

            // Update data in existing editors
            // (If there's no data from PHP, still need to have at least one editor. Therefore, do-while.)
            var i = 0;
            do {
                // Add an editor if needed
                if (this.subfieldEditors.length <= i) {
                    this.subfieldEditors[i] = this.subfieldFactory.createEditor(this.contactType);
                    if (this.currentMode != 'null') {
                        this.subfieldEditors[i].setMode(this.currentMode).insertAfter(this.subfieldEditors[i-1].parentEditorData.domElement);
                    }
                }
                if (typeof data[i] != 'undefined') {
                    // if data[i] contain only ext and value, then pass value to child;
                    // if there's something else, then pass the whole object.
                    var passObject = false;
                    for(var k in data[i]) {
                        if (k != 'value' && k != 'ext' && k != 'status') {
                            passObject = true;
                            break;
                        }
                    }

                    this.subfieldEditors[i].setValue(passObject ? data[i] : (data[i].value ? data[i].value : ''));

                    // save ext
                    if (typeof this.fieldData.ext != 'undefined') {
                        var ext = data[i].ext;
                        if (this.currentMode != 'null' && this.subfieldEditors[i].parentEditorData.domElement) {
                            var el = this.subfieldEditors[i].parentEditorData.domElement.find('input.ext');
                            if (el.size() > 0) {
                                el[0].setExtValue(ext);
                            }
                        }
                    }
                } else {
                    throw new Error('At least one record must exist in data at this time.');
                }
                i++;

            } while(i < data.length);

            // Remove excess editors if needed
            if (data.length < this.subfieldEditors.length) {
                // remove dom elements
                for(i = data.length; i < this.subfieldEditors.length; i++) {
                    if (i === 0) { // Never remove the first
                        continue;
                    }
                    if (this.currentMode != 'null') {
                        this.subfieldEditors[i].parentEditorData.domElement.remove();
                    }
                }

                // remove editors
                var a = data.length > 0 ? data.length : 1; // Never remove the first
                this.subfieldEditors.splice(a, this.subfieldEditors.length - a);
            }

            this.origFieldValue = null;
        },

        getValue: function() {
            if (this.currentMode == 'null') {
                return $.extend({}, this.fieldValue);
            }

            var val = [];
            for(var i = 0; i < this.subfieldEditors.length; i++) {
                var sf = this.subfieldEditors[i];
                val[i] = {
                    'value': sf.getValue()
                };

                // load ext
                if (typeof this.fieldData.ext != 'undefined') {
                    var ext = this.fieldValue[i].ext;
                    var el = sf.parentEditorData.domElement.find('input.ext')[0];
                    if (sf.currentMode == 'edit' && el) {
                        ext = el.getExtValue();
                    }
                    val[i].ext = ext;
                }
            }

            return val;
        },

        isModified: function() {
            for(var i = 0; i < this.subfieldEditors.length; i++) {
                var sf = this.subfieldEditors[i];
                if (sf.isModified()) {
                    return true;
                }
            }
            return false;
        },

        validate: function(skipRequiredCheck) {
            var result = [];

            // for each subfield add a record subfieldId => its validate() into result
            var allEmpty = true;
            for(var i = 0; i < this.subfieldEditors.length; i++) {
                var sf = this.subfieldEditors[i];
                var v = sf.validate(true);
                if (v) {
                    result[i] = v;
                }

                var val = sf.getValue();
                if (val || typeof val != 'string') {
                    allEmpty = false;
                }
            }

            if (!skipRequiredCheck && this.fieldData.required && allEmpty) {
                result[0] = 'This field is required.';
            }

            if (result.length <= 0) {
                return null;
            }
            return result;
        },

        showValidationErrors: function(errors) {
            for(var i = 0; i < this.subfieldEditors.length; i++) {
                var sf = this.subfieldEditors[i];
                if (errors !== null && typeof errors[i] != 'undefined') {
                    sf.showValidationErrors(errors[i]);
                } else {
                    sf.showValidationErrors(null);
                }
            }
        },

        /** Return button to delete subfield. */
        deleteSubfieldButton: function(sf) {
            var that = this;

            var r = $('<a class="delete-subfield text-red custom-mt-8 custom-mt-0-mobile" title="'+$_('delete')+'" href="javascript:void(0)"><i class="fas fa-trash-alt icon size-14"></i></a>').click(function() {
                if (that.subfieldEditors.length <= 1) {
                    return false;
                }

                var i = that.subfieldEditors.indexOf(sf);

                // remove dom element
                if (that.currentMode != 'null') {
                    that.subfieldEditors[i].parentEditorData.domElement.remove();
                }

                // remove editor
                that.subfieldEditors.splice(i, 1);

                // Hide delete button if only one subfield left
                // have to do this because IE<9 lacks :only-child support
                if (that.subfieldEditors.length <= 1) {
                    that.domElement.find('.delete-subfield').hide();
                }

                // (leaves a record in this.fieldValue to be able to restore it if needed)
                return false;
            });

            if (this.subfieldEditors.length <= 1) {
                r.hide();
            }

            return r;
        },

        newSubFieldElement: function(mode, i) {
            i = i-0;
            var sf = this.subfieldEditors[i];
            if(!sf.parentEditorData) {
                sf.parentEditorData = {};
            }
            sf.parentEditorData.parent = this;
            sf.parentEditorData.empty = false;
            var ext;

            // A (composite) field with no inline mode?
            if (typeof sf.newInlineFieldElement != 'function') {
                var nameAddition = '';
//                if (mode == 'edit') {
//                    nameAddition = (this.fieldData.required ? '<span class="req-star">*</span>' : '')+':';
//                }

                var label = '';
                if (i == 0 || this.fieldData.type === 'Composite') {
                    label = this.fieldData.name+nameAddition;
                }
                var wrapper = contactEditor.wrapper('<span class="replace-me-with-value"></span>', label, 'no-bot-margins');
                var rwv = wrapper.find('span.replace-me-with-value');

                // extension
                ext = this.fieldValue[i].ext;
                if (mode == 'edit') {
                    ext = contactEditor.createExtSelect(this.fieldData.ext, ext);
                } else {
                    ext = this.fieldData.ext[this.fieldValue[i].ext] || ext;
                    ext = $('<strong>'+contactEditor.htmlentities(ext)+'</strong>');
                }
                rwv.before(ext);

                // button to delete this subfield
                if (mode == 'edit') {
                    rwv.before(this.deleteSubfieldButton(sf));
                }
                rwv.remove();

                sf.domElement = this.subfieldEditors[i].newFieldElement(mode);
                var self = this;
                sf.domElement.find('div.name').each(function(i, el) {
                    if (el.innerHTML.substr(0, self.fieldData.name.length) === self.fieldData.name) {
                        el.innerHTML = '';
                    }
                });

                var cls_name = '';
                if (this.fieldData.type === 'Composite') {
                    cls_name = 'field-composite-subfields-block';
                }

                sf.domElement.data('multifield-index', i).attr('data-multifield-index', i);
                sf.parentEditorData.domElement = $('<div class="' + cls_name + '"></div>').append(wrapper).append(sf.domElement);

                if (mode == 'edit') {
                    sf.parentEditorData.empty = false;
                } else {
                    sf.parentEditorData.empty = !sf.fieldValue.value && !sf.fieldData.show_empty;
                }

                //this.initInplaceEditor(sf.parentEditorData.domElement, i);
                return sf.parentEditorData.domElement;
            }

            // Inline mode is available
            var value = sf.newInlineFieldElement(mode);
            if (value === null) {
                // Field is empty, return stub.
                sf.parentEditorData.domElement = sf.domElement = $('<div></div>');
                sf.parentEditorData.empty = true;
                return sf.parentEditorData.domElement;
            }

            sf.domElement = value;
            sf.domElement.data('multifield-index', i).attr('data-multifield-index', i);
            var result = $('<div class="value flexbox space-12 wrap-mobile"></div>').append(value);
            var rwe = result.find('.replace-with-ext');
            if (rwe.size() <= 0) {
                result.append('<span class="flexbox wide space-12"><span class="replace-with-ext"></span></span>');
                rwe = result.find('.replace-with-ext');
            }

            // Extension
            if (typeof this.fieldData.ext != 'undefined') {
                ext = this.fieldValue[i].ext;
                if (mode == 'edit') {
                    rwe.before(contactEditor.createExtSelect(this.fieldData.ext, ext));
                } else {
                    ext = this.fieldData.ext[this.fieldValue[i].ext] || ext;
                    if (rwe.parents('.ext').size() > 0) {
                        rwe.before(contactEditor.htmlentities(ext));
                    } else {
                        rwe.before($('<span class="hint" style="align-self: flex-end;"></span>').text(' '+ext));
                    }
                }
            }

            // button to delete this subfield
            if (mode == 'edit') {
                rwe.before(this.deleteSubfieldButton(sf));
            }
            rwe.remove();

            sf.parentEditorData.domElement = result;
            //this.initInplaceEditor(sf.parentEditorData.domElement, i);
            return result;
        },

        newInlineFieldElement: null,

        newFieldElement: function(mode) {
            var that = this;

            if(this.fieldData.read_only) {
                mode = 'view';
            }

            var childWrapper = $('<div class="multifield-subfields"></div>');
            var inlineMode = typeof this.subfieldFactory.newInlineFieldElement == 'function';

            var allEmpty = true;
            for(var i = 0; i < this.subfieldEditors.length; i++) {
                var result = this.newSubFieldElement(mode, i);
                result.data('subfieldEditor', this.subfieldEditors[i]);

                if (mode === 'edit') {
                    result.prepend('<span class="sort sort-handler custom-mr-16 custom-mt-8 custom-mt-0-mobile"><i class="fas fa-grip-vertical text-light-gray"></i></span>');
                }
                childWrapper.append(result);
                allEmpty = allEmpty && this.subfieldEditors[i].parentEditorData.empty;
            }


            // do not show anything if there are no values
            if (allEmpty && !this.fieldData.show_empty) {
                return $('<div style="display: none;" class="field" data-field-id="'+this.fieldData.id+'"></div>');
            }

            // Wrap over for all subfields to be in separate div
            var wrapper;
            if (inlineMode) {
                wrapper = $('<div class="value"></div>').append(childWrapper);
            } else {
                wrapper = $('<div class="field" data-field-id="'+this.fieldData.id+'"></div>').append(childWrapper);
            }

            // A button to add more fields
            if (mode == 'edit') {
                var adder;
                if (inlineMode) {
                    adder = $('<div class="value multifield-subfields-add-another"><span class="replace-me-with-value"></span></div>');
                } else {
                    adder = contactEditor.wrapper('<span class="replace-me-with-value"></span>');
                }
                var that = this;
                adder.find('.replace-me-with-value').replaceWith(
                    $('<a href="javascript:void(0)" class="button rounded outlined small light-gray custom-mb-16"><i class="fas fa-plus"></i> '+$_('Add another')+'</a>').click(function (e) {
                        var newLast = that.subfieldFactory.createEditor(this.contactType);
                        var index = that.subfieldEditors.length;

                        var val = {
                            value: newLast.getValue(),
                            temp: true
                        };
                        if (typeof that.fieldData.ext != 'undefined') {
                            val.ext = '';
                        }
                        that.fieldValue[index] = val;

                        that.subfieldEditors[index] = newLast;
                        if (that.currentMode != 'null') {
                            newLast.setMode(that.currentMode);
                        }

                        var $value = that.newSubFieldElement(mode, index);
                        $value.data('subfieldEditor', that.subfieldEditors[index]);
                        $value.prepend('<span class="sort sort-handler custom-mr-16 custom-mt-8 custom-mt-0-mobile"><i class="fas fa-grip-vertical text-light-gray"></i></span>');

                        childWrapper.append($value);
                        contactEditor.dialog.resize();
                    })
                );
                wrapper.append(adder);

                // init sortable
                if (this.fieldData.multi && $.fn.sortable) {
                    wrapper.find('.multifield-subfields').sortable({
                        direction: 'vertical',
                        handle: '.sort-handler',
                        animation: 150,
                        onEnd(event) {
                            let $item = $(event.item),
                                $multifield_subfields_block = $item.closest('.multifield-subfields'),
                                new_index = 0;

                            $multifield_subfields_block.find('[data-multifield-index]').each(function() {
                                let $item = $(this);
                                that.subfieldEditors[new_index] = $item.parent().data('subfieldEditor');
                                $item.data('subfieldIndex', new_index).attr('data-multifield-index', new_index);
                                new_index++;
                            });
                        }
                    });
                } else {
                    console.log(['$.fn.sortable available?', !!$.fn.sortable]);
                }

            }

            if (inlineMode) {
                var nameAddition = '';
//                if (mode == 'edit') {
//                    nameAddition = (this.fieldData.required ? '<span class="req-star">*</span>' : '')+':';
//                }
                wrapper = contactEditor.wrapper(wrapper, this.fieldData.name+nameAddition).attr('data-field-id', this.fieldData.id);
            }
            return wrapper;
        },

        setMode: function(mode, replaceEditor) {
            if (typeof replaceEditor == 'undefined') {
                replaceEditor = true;
            }
            if (mode != 'view' && mode != 'edit') {
                throw new Error('Unknown mode: '+mode);
            }

            if (this.currentMode != mode) {
                // When user switches from edit to view, we need to restore
                // deleted editors, if any. So we set initial value here to ensure that.
                if (mode == 'view' && this.currentMode == 'edit' && this.origFieldValue) {
                    this.setValue(this.origFieldValue);
                } else if (this.currentMode == 'view' && !this.origFieldValue) {
                    this.origFieldValue = [];
                    for (var i = 0; i < this.fieldValue.length; i++) {
                        this.origFieldValue.push($.extend({}, this.fieldValue[i]));
                    }
                }

                this.currentMode = mode;
                if (replaceEditor) {
                    var oldDom = this.domElement;
                    this.domElement = this.newFieldElement(mode);
                    if (oldDom !== null) {
                        oldDom.replaceWith(this.domElement);
                    }
                }
            }

            for(var i = 0; i < this.subfieldEditors.length; i++) {
                this.subfieldEditors[i].setMode(mode, false);
            }

            return this.domElement;
        }
    }); // }}} end of Multifield type

    contactEditor.factoryTypes.Composite = $.extend({}, contactEditor.baseFieldType, {//{{{
        subfieldEditors: null,

        initializeFactory: function(fieldData, options) {
            this.fieldData = fieldData;
            if (this.fieldData.required) {
                for(var i in this.fieldData.required) {
                    if (this.fieldData.required[i]) {
                        this.fieldData.required = true;
                        break;
                    }
                }
                if (this.fieldData.required !== true) {
                    this.fieldData.required = false;
                }
            }
            this.options = options || {};
        },

        initialize: function() {
            var val = {
                'data': {},
                'value': ''
            };

            this.subfieldEditors = {};
            this.fieldData.subfields = this.fieldData.fields;
            for(var sfid in this.fieldData.subfields) {
                var sf = this.fieldData.subfields[sfid];
                var editor = $.extend({}, contactEditor.factoryTypes[sf.type]);
                var sfData = this.fieldData.fields[sfid];
                if (this.fieldData.required && this.fieldData.required[sfid]) {
                    sfData.required = true;
                }
                var data = $.extend({}, sfData, {id: null, multi: false});
                editor.initializeFactory(data, this.options);
                editor.parentEditor = this;
                editor.parentEditorData = {};
                editor.initialize();
                editor.parentEditorData.sfid = sfid;
                editor.parentEditorData.parent = this;
                this.subfieldEditors[sfid] = editor;
                val.data[sfid] = editor.getValue();
            }

            this.fieldValue = val;
        },

        setValue: function(data) {
            if (!data) {
                return;
            }

            this.fieldValue = data;

            // Save subfields
            for(var sfid in this.subfieldEditors) {
                var sf = this.subfieldEditors[sfid];
                if (typeof data.data == 'undefined') {
                    sf.initialize();
                    sf.setValue(sf.getValue());
                } else if (typeof data.data[sfid] != 'undefined') {
                    sf.setValue(data.data[sfid]);
                } else {
                    sf.setValue(sf.getValue());
                }
            }
        },

        getValue: function() {
            if (this.currentMode == 'null') {
                return $.extend({}, this.fieldValue.data);
            }

            var val = {};

            for(var sfid in this.subfieldEditors) {
                var sf = this.subfieldEditors[sfid];
                val[sfid] = sf.getValue();
            }

            return val;
        },

        isModified: function() {
            for(var sfid in this.subfieldEditors) {
                if (this.subfieldEditors[sfid].isModified()) {
                    return true;
                }
            }
            return false;
        },

        validate: function(skipRequiredCheck) {
            var result = {};

            // for each subfield add a record subfieldId => its validate() into result
            var errorsFound = false;
            for(var sfid in this.subfieldEditors) {
                var v = this.subfieldEditors[sfid].validate(skipRequiredCheck);
                if (v) {
                    result[sfid] = v;
                    errorsFound = true;
                }
            }

            if (!errorsFound) {
                return null;
            }
            return result;
        },

        showValidationErrors: function(errors) {
            if (this.domElement === null) {
                return;
            }

            // for each subfield call its showValidationErrors with errors[subfieldId]
            for(var sfid in this.subfieldEditors) {
                var sf = this.subfieldEditors[sfid];
                if (errors !== null && typeof errors[sfid] != 'undefined') {
                    sf.showValidationErrors(errors[sfid]);
                } else {
                    sf.showValidationErrors(null);
                }
            }
        },

        /** Cannot be used inline */
        newInlineFieldElement: null,

        newFieldElement: function(mode) {
            if(this.fieldData.read_only) {
                mode = 'view';
            }
            if (mode == 'view') {
                // Do not show anything in view mode if field is empty
                if(!this.fieldValue.value && !this.fieldData.show_empty) {
                    return $('<div style="display: none;" class="field" data-field-id="'+this.fieldData.id+'"></div>');
                }
            }

            var wrapper = $('<div class="composite '+mode+'" data-field-id="'+this.fieldData.id+'"></div>').append(contactEditor.wrapper('<span style="display:none" class="replace-with-ext"></span>', this.fieldData.name, 'hdr'));

            // For each field call its newFieldElement and add to wrapper
            for(var sfid in this.subfieldEditors) {
                var sf = this.subfieldEditors[sfid];
                var element = sf.newFieldElement(mode);
                element.attr('data-field-id', sfid);
                element.data('fieldId', sfid);
                sf.domElement = element;
                wrapper.append(element);
            }

            // In-place editor initialization (when not part of a multifield)
            /*if (mode == 'edit' && this.parent == null) {
                var that = this;
                result.find('span.info-field').click(function() {
                    var buttons = contactEditor.inplaceEditorButtons([that.fieldData.id], function(noValidationErrors) {
                        if (typeof noValidationErrors != 'undefined' && !noValidationErrors) {
                            return;
                        }
                        that.setMode('view');
                        buttons.remove();
                    });
                    result.after(buttons);
                    that.setMode('edit');
                });
            }*/

            return wrapper;
        },

        setMode: function(mode, replaceEditor) {
            if (typeof replaceEditor == 'undefined') {
                replaceEditor = true;
            }
            if (mode != 'view' && mode != 'edit') {
                throw new Error('Unknown mode: '+mode);
            }

            if (this.currentMode != mode) {
                this.currentMode = mode;
                if (replaceEditor) {
                    var oldDom = this.domElement;
                    this.domElement = this.newFieldElement(mode);
                    if (oldDom !== null) {
                        oldDom.replaceWith(this.domElement);
                    }
                }
            }
            for(var sfid in this.subfieldEditors) {
                this.subfieldEditors[sfid].setMode(mode, false);
            }

            return this.domElement;
        }
    }); // }}} end of Composite field type

    contactEditor.factoryTypes.Address = $.extend({}, contactEditor.factoryTypes.Composite, {//{{{
        showValidationErrors: function(errors) {
            if (this.domElement === null) {
                return;
            }

            // remove old errors
            this.domElement.find('.state-error-hint').remove();
            this.domElement.find('.val').removeClass('state-error');

            if (!errors) {
                return;
            }

            // Show new errors
            for(var sfid in this.subfieldEditors) {
                var sf = this.subfieldEditors[sfid];
                if (typeof errors[sfid] == 'undefined') {
                    continue;
                }
                var input = sf.domElement.find('.val').addClass('state-error');
                input.parents('.address-subfield').append($('<p class="state-error-hint custom-mt-8">'+errors[sfid]+'</p>'));
            }
        },

        newInlineFieldElement: function(mode) {
            var result = '';

            if (mode == 'view') {
                // Do not show anything in view mode if field is empty
                if(!this.fieldValue.value) {
                    return null;
                }
                var map_url = '';
                if (typeof this.fieldValue.for_map === 'string') {
                    map_url = this.fieldValue.for_map;
                } else {
                    if (this.fieldValue.for_map.coords) {
                        map_url = this.fieldValue.for_map.coords;
                    } else {
                        map_url = this.fieldValue.for_map.with_street;
                    }
                }
                result = $('<div class="address-field width-100-mobile"></div>')
                    //.append('<div class="ext"><strong><span style="display:none" class="replace-with-ext"></span></strong></div>')
                    .append('<span class="small">'+this.fieldValue.value+'</span>')
                    .append('<span style="display:none" class="replace-with-ext"></span> ')
                    .append('<a target="_blank" href="//maps.google.com/maps?q=' + encodeURIComponent(map_url) + '&z=15" class="map-link small">' + $_('map') + '<i class="fas fa-external-link-alt small custom-ml-4"></i></a>');
                return result;
            }

            //
            // edit mode
            //
            var wrapper = $('<div class="address-field width-100-mobile"></div>');
            wrapper.append('<span style="display:none" class="replace-with-ext"></span>');


            // Add fields
            // For each field call its newFieldElement and add to wrapper
            for(var sfid in this.subfieldEditors) {
                var sf = this.subfieldEditors[sfid];
                var element = sf.newInlineFieldElement('edit');
                sf.domElement = element;
                if (sf.fieldData.type !== 'Hidden') {
                    wrapper.append($('<div class="address-subfield custom-mt-12"></div>').append(element));
                } else {
                    wrapper.append($('<div class="address-subfield"></div>').append(element));
                }
                if (sf.fieldData.type !== 'Hidden') {
                    //$.wa.defaultInputValue(element.find('input.val'), sf.fieldData.name+(sf.fieldData.required ? ' ('+$_('required')+')' : ''), 'empty');
                    var placeholder_text = sf.fieldData.name+(sf.fieldData.required ? ' ('+$_('required')+')' : '');
                    element.find('input.val,textarea.val').attr('placeholder', placeholder_text).attr('title', placeholder_text).addClass('small width-100-mobile');
                }
            }
            return wrapper;
        }
    });//}}}

    contactEditor.factoryTypes.Birthday = $.extend({}, contactEditor.baseFieldType, {//{{{

        newInlineFieldElement: function(mode) {
            this.fieldValue = this.fieldValue || {};
            // Do not show anything in view mode if field is empty
            if(mode == 'view' && !this.fieldValue.value) {
                return null;
            }
            var result = null;
            var data = this.fieldValue.data || {};
            var that = this;
            if (mode == 'edit') {
                var day_html = $('<div class="wa-select small"></div>');

                const day_select = $('<select class="val" data-part="day"><option data=""></option></select>');
                const days = [...Array(32).keys()].slice(1);
                for (let day of days) {
                    const option = $('<option data="' + day + '" value="' + day + '">' + day + '</option>');
                    if (day === +data['day']) {
                        option.attr('selected', true);
                    }
                    day_select.append(option);
                }
                day_html.append(day_select);

                const month_html = $('<div class="wa-select small"></div>');
                const month_select = $('<select class="val" data-part="month"><option data=""></option></select>');
                const months = [
                    'January',
                    'February',
                    'March',
                    'April',
                    'May',
                    'June',
                    'July',
                    'August',
                    'September',
                    'October',
                    'November',
                    'December'
                ];
                for (let [index, month] of months.entries()) {
                    const monthIndex = index + 1;
                    const monthName = $_(months[index]);
                    const option = $('<option data="' + monthIndex + '" value="' + monthIndex + '">' + monthName + '</option>');
                    if (monthIndex === +data['month']) {
                        option.attr('selected', true);
                    }
                    month_select.append(option);
                }
                month_html.append(month_select);

                var year_html = $('<input type="text" data-part="year" class="val small" style="min-width: 54px; width: 54px;" placeholder="' + $_('year') + '">');
                if (data['year']) {
                    year_html.val(data['year']);
                }
                result = $('<span></span>').
                        append(day_html).
                        append(' ').
                        append(month_html).
                        append(' ').
                        append(year_html);
            } else {
                result = $('<span class="val small"></span>').text(this.fieldValue.value);
            }
            return result;
        },

        getValue: function() {
            var result = this.fieldValue;
            if (this.currentMode == 'edit' && this.domElement !== null) {
                var input = this.domElement.find('.val');
                if (input.length > 0) {
                    result = {
                        value: {
                            day: null,
                            month: null,
                            year: null
                        }
                    };
                    input.each(function() {
                        var el = $(this);
                        var p = el.data('part');
                        result.value[p] = parseInt(el.val(), 10) || null;
                    });
                }
            }
            return result;
        },

        setValue: function(data) {
            this.fieldValue = data;
            if (this.currentMode == 'null' || this.domElement === null) {
                return;
            }
            if (this.currentMode == 'edit') {
                if (data && data.data) {
                    this.domElement.find('.val').each(function() {
                        var el = $(this);
                        var part = el.data('part');
                        el.val(data.data[part] || '');
                    });
                }
            } else {

                var val = this.fieldValue;
                if (typeof this.fieldValue === 'object') {
                    if (this.fieldValue.value) {
                        val = this.fieldValue.value;
                    }
                }

                this.domElement.find('.val').html($.wa.encodeHTML(val));
            }
        }

    });//}}}

    contactEditor.factoryTypes.Date = $.extend({}, contactEditor.factoryTypes.String, {//{{{
        initializeFactory: function(fieldData, options) {
            this.fieldData = fieldData || {};
            this.options = options || {};
            this.fieldData.input_height = 1;
        },
        setValue: function(data) {
            this.fieldValue = data;
            if (this.currentMode == 'null' || this.domElement === null) {
                return;
            }

            if (this.currentMode == 'edit') {
                this.domElement.find('input:text').datepicker('setDate', this.fieldValue);
            } else {
                this.domElement.find('.val').html($.wa.encodeHTML(this.fieldValue));
            }
        },
        newInlineFieldElement: function(mode) {
            var result = contactEditor.factoryTypes.String.newInlineFieldElement.call(this, mode);
            if (mode == 'edit') {

                var that = this;
                var $input_text = result.addClass('state-with-inner-icon right').find('input:text').addClass('js-datepicker').removeClass('val');
                var $input_hidden = $('<input type="hidden" class="val">').insertAfter($input_text);
                $('<span class="icon cursor-pointer js-datepicker-trigger"><i class="fas fa-calendar-alt"></i></span>').insertAfter($input_text);

                (function(init) { "use strict";
                    if ($input_text.datepicker) {
                        init();
                    } else {
                        $.wa.loadFiles([
                            $.wa.contactEditor.wa_backend_url + 'wa-content/js/jquery-ui/jquery.ui.core.min.js',
                            $.wa.contactEditor.wa_backend_url + 'wa-content/js/jquery-ui/jquery.ui.datepicker.min.js'
                            //$.wa.contactEditor.wa_backend_url + '../wa-content/js/jquery-ui/i18n/jquery.ui.datepicker-'+locale+'.js'
                        ]).then(init);
                    }
                }
                (function() { "use strict";
                    $input_text.datepicker({
                        altField: $input_hidden,
                        altFormat: "yy-mm-dd",
                        dateFormat: that.fieldData.format,
                        changeMonth: true,
                        changeYear: true,
                        shortYearCutoff: 2,
                        showOtherMonths: true,
                        selectOtherMonths: true,
                        stepMonths: 2,
                        numberOfMonths: 2,
                        beforeShow: function(input, ui) {
                            setTimeout(() => ui.dpDiv.css({"z-index": '1051'}));
                        }
                    });

                    if (that.fieldValue) {
                        $input_text.datepicker('setDate', that.fieldValue);
                    }

                    // clearing hidden input on text input clearing

                    (function (onChange) {
                        var timer = null;
                        $input_text.keydown(function () {
                            timer && clearTimeout(timer);
                            timer = setTimeout(function () {
                                onChange();
                            }, 250);
                        });
                        $input_text.change(onChange);
                    })(function () {
                        if ($.trim($input_text.val()).length <= 0) {
                            $input_text.datepicker('setDate', null);
                            that.fieldValue = null;
                        }
                    });


                }));

                result.on('click', '.js-datepicker-trigger', function () {
                    $input_text.trigger('focus')
                });
            }

            return result;
        }
    });//}}}

    contactEditor.factoryTypes.IM = $.extend({}, contactEditor.baseFieldType, {//{{{
        /** Accepts both a simple string and {value: previewHTML, data: stringToEdit} */
        setValue: function(data) {
            if (typeof data == 'undefined') {
                data = '';
            }
            if ($.isPlainObject(data)) {
                this.fieldValue = data.data;
                this.viewValue = data.value;
            } else {
                this.fieldValue = this.viewValue = data;
            }
            if (this.currentMode == 'null' || !this.domElement) {
                return;
            }

            if (this.currentMode == 'edit') {
                this.domElement.find('input.val').val(this.fieldValue);
            } else {
                this.domElement.find('.val').html(this.viewValue);  // already encoded value with icon
            }
        },

        newInlineFieldElement: function(mode) {
            // Do not show anything in view mode if field is empty
            if(mode == 'view' && !this.fieldValue) {
                return null;
            }
            var result = null;
            if (mode == 'edit') {
                result = $('<span class="width-100-mobile custom-mr-0-mobile"><input class="val small width-100-mobile" type="text"></span>');
                result.find('.val').val(this.fieldValue);
            } else {
                result = $('<span class="val small custom-mt-12-mobile"></span>').html(this.viewValue);
            }
            return result;
        }
    });//}}}

    contactEditor.factoryTypes.SocialNetwork = $.extend({}, contactEditor.baseFieldType, {//{{{
        /** Accepts both a simple string and {value: previewHTML, data: stringToEdit} */
        setValue: function(data) {
            if (typeof data == 'undefined') {
                data = '';
            }
            if ($.isPlainObject(data)) {
                this.fieldValue = data.data;
                this.viewValue = data.value;
            } else {
                this.fieldValue = this.viewValue = data;
            }
            if (this.currentMode == 'null' || !this.domElement) {
                return;
            }

            if (this.currentMode == 'edit') {
                this.domElement.find('input.val').val(this.fieldValue);
            } else {
                this.domElement.find('.val').html(this.viewValue);  // alrady encoded value with icon
            }
        },

        newInlineFieldElement: function(mode) {
            // Do not show anything in view mode if field is empty
            if(mode == 'view' && !this.fieldValue) {
                return null;
            }
            var result = null;
            if (mode == 'edit') {
                result = $('<span class="width-100-mobile custom-mr-0-mobile"><input class="val small width-100-mobile" type="text"></span>');
                result.find('.val').val(this.fieldValue);
            } else {
                result = $('<span class="val small nowrap custom-mt-12-mobile"></span>').html(this.viewValue);
            }
            return result;
        }
    });//}}}

    contactEditor.factoryTypes.Url = $.extend({}, contactEditor.factoryTypes.IM, {//{{{
        validate: function(skipRequiredCheck) {
            var val = $.trim(this.getValue());

            if (!skipRequiredCheck && this.fieldData.required && !val) {
                return $_('This field is required.');
            }
            if (!val) {
                return null;
            }

            if (!(/^(https?|ftp|gopher|telnet|file|notes|ms-help)/.test(val))) {
                val = 'http://'+val;
                this.setValue(val);
            }

            var l = '[^`!()\\[\\]{};:\'".,<>?«»“”‘’\\s+]'; // letter allowed in url, including IDN
            var p = '[^`!\\[\\]{}\'"<>«»“”‘’\\s]'; // punctuation or letter allowed in url
            var regex = new RegExp('^(https?|ftp|gopher|telnet|file|notes|ms-help):((//)|(\\\\\\\\))+'+p+'*$', 'i');
            if (!regex.test(val)) {
                return $_('Incorrect URL format.');
            }

            // More restrictions for common protocols
            if (/^(http|ftp)/.test(val.toLowerCase())) {
                regex = new RegExp('^(https?|ftp):((//)|(\\\\\\\\))+((?:'+l+'+\\.)+'+l+'{2,6})((/|\\\\|#)'+p+'*)?$', 'i');
                if (!regex.test(val)) {
                    return $_('Incorrect URL format.');
                }
            }

            return null;
        }
    });//}}}

    contactEditor.factoryTypes.Email = $.extend({}, contactEditor.factoryTypes.Url, {//{{{
        validate: function(skipRequiredCheck) {
            var val = $.trim(this.getValue());

            if (!skipRequiredCheck && this.fieldData.required && !val) {
                return $_('This field is required.');
            }
            if (!val) {
                return null;
            }
            var regex = new RegExp('^([^@\\s]+)@[^\\s@]+\\.[^\\s@\\.]{2,}$', 'i');
            if (!regex.test(val)) {
                return $_('Incorrect email address format.');
            }
            return null;
        }
    });//}}}

    contactEditor.factoryTypes.Checkbox = $.extend({}, contactEditor.baseFieldType, {//{{{
        /** Load field contents from given data and update DOM. */
        setValue: function(data) {
            this.fieldValue = parseInt(data);
            if (this.currentMode == 'null' || !this.domElement) {
                return;
            }

            if (this.currentMode == 'edit') {
                this.domElement.find('input.val').attr('checked', !!this.fieldValue);
            } else {
                this.domElement.find('.val').text(this.fieldValue ? 'Yes' : 'No');
            }
        },

        newInlineFieldElement: function(mode) {
            var result = null;
            if (mode == 'edit') {
                result = $(`<label>
                    <span class="wa-checkbox">
                        <input class="val" type="checkbox" value="1" checked="checked">
                        <span>
                            <span class="icon">
                                <i class="fas fa-check"></i>
                            </span>
                        </span>
                    </span>
                </label>`);
                if (!this.fieldValue) {
                    result.find('.val').removeAttr('checked');
                }
            } else {
                result = $('<span class="val small"></span>').text(this.fieldValue ? 'Yes' : 'No');
            }
            return result;
        }
    });//}}}

    contactEditor.factoryTypes.Number = $.extend({}, contactEditor.baseFieldType, {//{{{
        validate: function(skipRequiredCheck) {
            var val = $.trim(this.getValue());
            if (!skipRequiredCheck && this.fieldData.required && !val && val !== 0) {
                return $_('This field is required.');
            }
            if (val && !(/^-?[0-9]+([\.,][0-9]+$)?/.test(val))) {
                return $_('Must be a number.');
            }
            return null;
        }
    });//}}}

    //}}}

    return contactEditor.factoryTypes;
};

$.wa.contactEditorFactory = function(options) { "use strict"; //{{{

    // OPTIONS

    options = $.extend({
        contact_id: null,
        current_user_id: null,
        contactType: 'person', // person|company
        baseFieldType: null, // defined in fieldTypes.js
        saveUrl: '?module=profile&action=save', // URL to send data when saving contact
        saveGeocoordsUrl: '?module=contacts&action=saveGeocoords',  // URL to send data when saving geocoords
        regionsUrl: '?module=backend&action=regions&country=',      // URL get load regions by country
        el: '#contact-info-block',  // default contact info block
        update_title: true,
        dialog: {}
    }, options);


    // INSTANCE OF EDITOR

    var contactEditor = $.extend({

        wa_app_url: '',

        fields: {},

        fieldsOrder: [],

        fieldsValues: {},

        /** Editor factory templates, filled below */
        factoryTypes: {},


        /** Editor factories by field id, filled by this.initFactories() */
        editorFactories: {/*
            ...,
            field_id: editorFactory // Factory to get editor for given type from
            ...,
        */},

        /** Fields that we need to show. All fields available for editing or viewing present here
          * (possibly with empty values). Filled by this.initFieldEditors() */
        fieldEditors: {/*
            ...,
            // field_id as specified in field metadata file
            // An editor for this field instance. If field exists, but there's no data
            // in DB, a fully initialized editor with empty values is present anyway.
            field_id: fieldEditor,
            ...
        */},

        /** Empty and reinit this.editorFactories given data from php.
          * this.factoryTypes must already be set.*/
        initFactories: function(fields, fieldsOrder) {
            var that = this;
            this.fields = fields;
            this.fieldsOrder = fieldsOrder,
            this.editorFactories = {};
            this.fieldEditors = {};
            this.fieldsOrder = $.each(fieldsOrder, function(i, fldId) {
                try {
                    if (typeof fields[fldId] != 'object' || !fields[fldId].type) {
                        throw new Error('Field data error for '+fldId);
                    }
                    if (typeof that.factoryTypes[fields[fldId].type] == 'undefined') {
                        throw new Error('Unknown factory type: '+fields[fldId].type);
                    }
                    if (fields[fldId].multi) {
                        that.editorFactories[fldId] = $.extend({}, that.factoryTypes['Multifield']);
                    } else {
                        that.editorFactories[fldId] = $.extend({}, that.factoryTypes[fields[fldId].type]);
                    }
                    that.editorFactories[fldId].initializeFactory(fields[fldId]);
                    return fldId;
                } catch(e) {
                    console.log('Unable to init field '+fldId);
                    console.log(e);

                    fields[fldId] = undefined;
                    delete fields[fldId];
                }
            }).filter(function(v) {
                return !!v;
            });
        },

        /** Init (or reinit existing) editors with empty data. */
        resetFieldEditors: function() {
            for (var i = 0; i < this.fieldsOrder.length; i += 1) {
                var f = this.fieldsOrder[i];
                if (typeof this.fieldEditors[f] == 'undefined') {
                    this.fieldEditors[f] = this.editorFactories[f].createEditor(this.contactType, f);
                } else {
                    this.fieldEditors[f].reinit();
                }
            }
        },

        /** Reinit (maybe not all) of this.fieldEditors using data from php. */
        initFieldEditors: function(newData) {
            if (newData instanceof Array) {
                // must be an empty array that came from json
                return;
            }
            this.fieldsValues = newData;
            for (var i = 0; i < this.fieldsOrder.length; i += 1) {
                var f = this.fieldsOrder[i];
                if (typeof this.editorFactories[f] == 'undefined') {
                    // This can happen when a new field type is added since user opened the page.
                    // Need to reload. (This should not happen often though.)
                    $.wa.controller.contactAction([this.contact_id]);
                    //throw new Error('Unknown field type: '+f);
                    return;
                }

                try {
                    if (typeof this.fieldEditors[f] == 'undefined') {
                        this.fieldEditors[f] = this.editorFactories[f].createEditor(this.contactType);
                    }
                    this.fieldEditors[f].setValue(newData[f]);
                } catch (e) {
                    console.log('Unable to initialize editor '+f);
                    console.log(e);
                }
            }

        },

        /** Empty info block and add editors there in given mode.
          * this.editorFactories and this.fieldEditors must already be initialized. */
        initContactInfoBlock: function (mode) {
            this.switchMode(mode, true);
        },

        getSaveUrl: function() {
            return this.saveUrl;
        },

        getSaveGeocoordsUrl: function() {
            return $.wa.contactEditor.wa_backend_url + '?module=profile&action=saveGeocoords';
        },

        getRegionsUrl: function() {
            return $.wa.contactEditor.wa_backend_url + '?module=profile&action=regions&country=';
        },

        /** Switch mode for all editors */
        switchMode: function (mode, init) {
            var el = $(this.el);
            var that = this;
            if (init) {
                el.html('');
                el.removeClass('edit-mode view-mode');
                el.off('click.map', '.map-link').on('click.map', '.map-link', function() {
                    var i = $(this).parent().data('multifield-index');
                    if (i !== undefined) {
                        var fieldValue = that.fieldEditors.address.fieldValue;
                        that.geocodeAddress(fieldValue, i);
                    }
                });
            }
            if (mode == 'edit' && el.hasClass('edit-mode')) {
                return;
            }
            if (mode == 'view' && el.hasClass('view-mode')) {
                return;
            }

            $(this).trigger('before_switch_mode', [mode, this]);

            // Remove all buttons
            el.find('.buttons').remove();

            // Update DOM for all fields
            var fieldsToUpdate = [];
            for (var i = 0; i < this.fieldsOrder.length; i += 1) {
                var f = this.fieldsOrder[i];
                fieldsToUpdate.push(f);
                try {
                    var fld = this.fieldEditors[f].setMode(mode);
                    $(this).trigger('set_mode', [{
                        mode: mode,
                        el: el,
                        field_id: f,
                        field: this.fieldEditors[f]
                    }]);
                    if (init) {
                        el.append(fld);
                    }
                } catch(e) {
                    console.log('Error initializing field', f, e);
                }
            }

            // Editor buttons
            if(mode == 'edit') {
                el.addClass('edit-mode');
                el.removeClass('view-mode');

                el.find('.subname').wrapAll('<div class="subname-wrapper custom-mt-0"></div>');
                el.find('.jobtitle-company').wrapAll('<div class="jobtitle-company-wrapper"></div>');

                // Save/cancel buttons
                var buttons = this.inplaceEditorButtons(fieldsToUpdate, function(noValidationErrors) {
                    if (typeof noValidationErrors != 'undefined' && !noValidationErrors) {
                        return false;
                    }

                    if (typeof that.justCreated != 'undefined' && that.justCreated) {
                        // new contact created
                        var c = $('#all-users-sidebar-link .count');
                        c.text(1+parseInt(c.text()));

                        // Redirect to profile just created
                        throw new Error('!!! Not implemented because never used. Redirect to contact_id=' + that.contact_id);
                        return false;
                    }

                    that.dialog.hide();
                });

                if (that.contact_id === null) {
                    buttons.find('.cancel').remove();
                }

                that.dialog.$body.find('.dialog-footer').append(buttons);

            } else {
                el.addClass('view-mode');
                el.removeClass('edit-mode');
                if (el.find('.subname-wrapper').length) {
                    el.find('.subname').unwrap();
                }
                if (el.find('.jobtitle-company-wrapper').length) {
                    el.find('.jobtitle-company').unwrap();
                }
            }

            $(this).trigger('after_switch_mode', [mode, this]);
        },

        /** Save all modified editors, reload data from php and switch back to view mode. */
        saveFields: function(ids, callback) {
            if (!ids) {
                ids = [];
                for (var k in this.fields) {
                    if (this.fields.hasOwnProperty(k)) {
                        ids.push(k);
                    }
                }
            }
            var data = {};
            var that = this;
            var validationErrors = false;
            for(var i = 0; i < ids.length; i++) {
                var f = ids[i];
                var err = this.fieldEditors[f].validate();
                if (err) {
                    if (!validationErrors) {
                        validationErrors = this.fieldEditors[f].domElement;
                        // find the first visible parent of the element
                        while(!validationErrors.is(':visible')) {
                            validationErrors = validationErrors.parent();
                        }
                    }
                    this.fieldEditors[f].showValidationErrors(err);
                } else {
                    this.fieldEditors[f].showValidationErrors(null);
                }
                data[f] = this.fieldEditors[f].getValue();
            }

            if (validationErrors) {
                //scrollTo(validationErrors, -100);
                callback(false);
                return;
            }

            save(true);
            return;

            function isEqual(o1, o2, keys) {
                if (!keys) {
                    for (var k in o1) {
                        if (o1.hasOwnProperty(k)) {
                            if (o1[k] && o2[k] && o1[k] != o2[k]) {
                                return false;
                            }
                        }
                    }
                    for (var k in o2) {
                        if (o2.hasOwnProperty(k)) {
                            if (o1[k] && o2[k] && o1[k] != o2[k]) {
                                return false;
                            }
                        }
                    }
                } else {
                    for (var i = 0; i < keys.length; i += 1) {
                        if (o1[keys[i]] && o2[keys[i]] && o1[keys[i]] != o2[keys[i]]) {
                            return false;
                        }
                    }
                }
                return true;
            }

            function save(with_geocoding) {
                with_geocoding = with_geocoding === undefined ? true : with_geocoding;

                $.post(that.getSaveUrl(), {
                    'data': JSON.stringify(data),
                    'type': that.contactType,
                    'id': that.contact_id != null ? that.contact_id : 0
                }, function(newData) {
                    if (newData.status !== 'ok') {
                        if (newData.errors.length) {
                            showError(newData.errors['0']);
                            return;
                        } else {
                            throw new Exception('AJAX error:', newData);
                        }
                    } else {
                        deleteError();
                    }

                    var oldData = that.fieldsValues || {};
                    newData = newData.data;

                    var data_top = null;
                    if (newData.data && newData.data.top) {
                        data_top = newData.data.top;
                    }
                    newData.data.top = undefined;
                    delete newData.data.top;

                    if(that.contact_id != null) {
                        that.initFieldEditors(newData.data);
                    }

                    // hide old validation errors and show new if exist
                    var validationErrors = false;
                    for(var f in that.fieldEditors) {
                        if (typeof newData.errors[f] != 'undefined') {
                            that.fieldEditors[f].showValidationErrors(newData.errors[f]);
                            if (!validationErrors) {
                                validationErrors = that.fieldEditors[f].domElement;
                                // find the first visible parent of the element
                                while(!validationErrors.is(':visible')) {
                                    validationErrors = validationErrors.parent();
                                }
                            }
                        } else if (that.fieldEditors[f].currentMode == 'edit') {
                            that.fieldEditors[f].showValidationErrors(null);
                        }
                    }

                    if (validationErrors) {
                        //scrollTo(validationErrors, -100);
                        return;
                    } else if (that.contact_id && newData.data.reload) {
                        if (window.profileTab) {
                            window.profileTab.rootWindow.location.reload();
                        } else {
                            window.location.reload();
                        }
                        return;
                    }

                    if (that.contact_id === null) {
                        that.justCreated = true;
                    }

                    that.contact_id = newData.data.id;
                    if (!validationErrors && with_geocoding) {
                        updateGeocoding(oldData, newData);
                    }

                    callback(!validationErrors);

                    if (!validationErrors) {
                        $(contactEditor).trigger('contact_saved', newData.data);
                        if (data_top) {
                            $(contactEditor).trigger('top_fields_updated', {
                                data: data_top
                            });
                        }

                        $.team.content.reload(true);
                    }

                }, 'json');
            }

            function showError(error) {
                $('.buttons .loading').hide();
                $('#validation-notice').text(error.text);
            }

            function deleteError() {
                $('#validation-notice').text('');
            }

            function updateGeocoding(oldData, newData) {
                // geocoding
                var last_geocoding = $.storage.get('contacts/last_geocoding') || 0;
                if ((new Date()).getTime() - last_geocoding > 3600) {
                    $.storage.del('contacts/last_geocoding');
                    var address = newData.data.address;
                    if (!$.isEmptyObject(address)) {

                        var requests = [];
                        var indexes = [];

                        // iterate throughout addresses but test if changed
                        for (var i = 0; i < address.length; i += 1) {
                            var is_diff = true;
                            if (data.address[i]) {
                                is_diff = !isEqual(
                                    address[i].data,
                                    (oldData.address[i] || {}).data || {},
                                    ['city', 'country', 'region', 'street', 'zip']
                                );
                            }
                            if (is_diff) {
                                requests.push(that.sendGeocodeRequest(address[i].for_map));
                                indexes.push(i);
                            }
                        }
                        if (requests.length) {
                            var fn = function(response, i) {
                                if (response.status === "OK") {
                                    var lat = response.lat || '';
                                    var lng = response.lng || '';
                                    data['address'][i]['value'].lat = lat;
                                    data['address'][i]['value'].lng = lng;
                                } else if (response.status === "OVER_QUERY_LIMIT") {
                                    $.storage.set('contacts/last_geocoding', (new Date()).getTime() / 1000);
                                }
                            };

                            $.when.apply($, requests).then(function() {
                                if (requests.length <= 1 && arguments[1] === 'success') {
                                    fn(arguments[0], indexes[0]);
                                } else {
                                    for (var i = 0; i < arguments.length; i += 1) {
                                        if (arguments[i][1] === 'success') {
                                            fn(arguments[i][0], indexes[i]);
                                        }
                                    }
                                }
                                // TODO: not cool send all data again, rework someday
                                save(false);
                            });
                        }
                    }
                }
            }

        },

        /** Return jQuery object representing ext selector with given options and currently selected value. */
        createExtSelect: function(options, defValue) {
            var optString = '';
            var custom = true;
            for(var i in options) {
                var selected = '';
                if (options[i] === defValue || i === defValue) {
                    selected = ' selected="selected"';
                    custom = false;
                }
                var v = this.htmlentities(options[i]);
                optString += '<option value="'+(typeof options.length === 'undefined' ? i : v)+'"'+selected+'>'+v+'</option>';
            }

            var input;
            if (custom) {
                optString += '<option value="%custom" selected="selected">'+$_('other')+'...</option>';
                input = '<input type="text" class="shorter small ext width-100-mobile custom-mt-12-mobile">';
            } else {
                optString += '<option value="%custom">'+$_('other')+'...</option>';
                input = '<input type="text" class="shorter small empty ext width-100-mobile custom-mt-12-mobile">';
            }

            var result = $('<div class="wa-select small width-100-mobile custom-mr-12 custom-mt-12-mobile"><select class="ext">'+optString+'</select></div><span class="width-100-mobile custom-mr-12 custom-mr-0-mobile">'+input+'</span>');
            var select = result.children('select');
            input = result.find('input');
            input.val(defValue);
            if(select.val() !== '%custom') {
                input.hide();
            }

            defValue = $_('which?');

            var inputOnBlur = function() {
                if(!input.val() && !input.hasClass('empty')) {
                    input.val(defValue);
                    input.addClass('empty');
                }
            };
            input.blur(inputOnBlur);
            input.focus(function() {
                if (input.hasClass('empty')) {
                    input.val('');
                    input.removeClass('empty');
                }
            });

            select.change(function() {
                var v = select.val();
                if (v === '%custom') {
                    if (input.hasClass('empty')) {
                        input.val(defValue);
                    }
                    input.show();
                } else {
                    input.hide();
                    input.addClass('empty');
                    input.val(v || '');
                }
                inputOnBlur();
            });

            input[0].getExtValue = function() {
                return select.val() === '%custom' && input.hasClass('empty') ? '' : input.val();
            };
            input[0].setExtValue = function(val) {
                if (options[val]) {
                    select.val(val);
                } else {
                    select.val('%custom');
                }
                input.val(val);
            };

            return result;
        },

        /** Create and return JQuery object with buttons to save given fields.
          * @param fieldIds array of field ids
          * @param saveCallback function save handler. One boolean parameter: true if success, false if validation errors occured
          * @param cancelCallback function cancel button handler. If not specified, then saveCallback() is called with no parameter. */
        inplaceEditorButtons: function(fieldIds, saveCallback) {
            var buttons = $('<div class="field buttons"><div class="value"><p class="state-error-hint custom-mt-8" id="validation-notice"></p></div></div>');
            //
            // Save button and save on enter in input fields
            //
            var that = this;
            var saveHandler = function() {
                $('.buttons .loading').show();
                that.saveFields(fieldIds, function(p) {
                    $('.buttons .loading').hide();
                    saveCallback(p);
                });
                return false;
            };

            // Submit the form when user clicks enter in the form
            $('#tc-contact').off('keyup.contact_save').on('keyup.contact_save', '#contact-info-block.edit-mode input[type="text"]', function(event) {
                if(event.keyCode == 13 && (!$(event.currentTarget).data('autocomplete') || !$(event.currentTarget).data('contact_id'))){
                    saveHandler();
                }
            });

            // Submit when user clicks save button
            var saveBtn = $('<input type="submit" class="button" value="'+$_('Save')+'" />').click(saveHandler);

            //
            // Cancel link
            //
            var that = this;
            var cancelBtn = $('<a href="javascript:void(0)" class="cancel button light-gray js-close-dialog">'+$_('Cancel')+'</a>');
            cancelBtn.on('click', function(event) {
                event.preventDefault();
                $('#validation-notice').text('');
                $('.buttons .loading').hide();

                // remove topmost validation errors
                that.fieldEditors.name.showValidationErrors(null);
            });
            buttons.children('.value')
                .append(saveBtn)
                .append(cancelBtn)
                .append($('<i class="fas fa-spinner fa-spin loading custom-ml-16 wa-animation-spin speed-1000" style="display: none;"></i>'));

            return buttons;
        },

        destroy: function() {
            $(this.el).html('');
        },

        dialogInstance: function(dialog_instance) {
            this.dialog = dialog_instance;
        },

        // UTILITIES

        /** Utility function for common name => value wrapper.
          * @param value    string|JQuery string to place in Value column, or a jquery collection of .value divs (possibly wrapped by .multifield-subfields)
          * @param name     string string to place in Name column (defaults to '')
          * @param cssClass string optional CSS class to add to wrapper (defaults to none)
          * @return resulting HTML
          */

        wrapper: function(value, name, cssClass) {
            cssClass = (typeof cssClass != 'undefined') && cssClass ? ' '+cssClass : '';
            var result = $('<div class="field'+cssClass+'"></div>');

            if ((typeof name != 'undefined') && name) {
                $(this).on('set_mode', function (e, data) {
                    if (data.field.fieldData.type === 'Checkbox') {
                        data.field.domElement.find('.name').toggleClass('for-checkbox', (data.mode == 'edit'));
                    }else {
                        data.field.domElement.find('.name').toggleClass('for-input', (data.mode == 'edit'));
                    }
                })
                result.append(`<div class="name${($(this.el).closest('.dialog-content').length) ? ' for-input' : ''}">${$.wa.encodeHTML(name)}</div>`);
            }

            if (typeof value != 'object' || !(value instanceof jQuery) || value.find('div.value').size() <= 0) {
                value = $('<div class="value custom-mb-12"></div>').append(value);
            }
            result.append(value);
            return result;
        },

        /** Convert html special characters to entities. */
        htmlentities: function(s){
            var div = document.createElement('div');
            var text = document.createTextNode(s);
            div.appendChild(text);
            return div.innerHTML;
        },

        geocodeAddress: function(fieldValue, i) {
            var self = this;
            if (!fieldValue[i].data.lat || !fieldValue[i].data.lng) {
                this.sendGeocodeRequest(fieldValue[i].for_map || fieldValue[i].value, function(r) {
                    fieldValue[i].data.lat = r.lat;
                    fieldValue[i].data.lng = r.lng;
                    $.post(self.getSaveGeocoordsUrl(), {
                        id: self.contact_id,
                        lat: r.lat,
                        lng: r.lng,
                        sort: i
                    });
                });
            }
        },

        sendGeocodeRequest: function(value, fn) {
            var address = [];
            if (typeof value === 'string') {
                address.push(value);
            } else {
                if (value.with_street && value.without_street && value.with_street === value.without_street) {
                    address.push(value.with_street);
                } else {
                    if (value.with_street) {
                        address.push(value.with_street);
                    }
                    if (value.without_street) {
                        address.push(value.without_street);
                    }
                }
            }

            var df = $.Deferred();

            var self = this,
                geocoding = self.geocoding || {};

            var googleGeocoding = function(key) {
                $.ajax({
                    url: 'https://maps.googleapis.com/maps/api/geocode/json',
                    data: {
                        sensor: false,
                        key: key,
                        address: address[0]
                    },
                    dataType: 'json',
                    success: function(response) {
                        var lat, lng;
                        if (response) {
                            if (response.status === "OK") {
                                var n = response.results.length;
                                var r = false;
                                for (var i = 0; i < n; i += 1) {
                                    if (!response.results[i].partial_match) {   // address correct, geocoding without errors
                                        lat = response.results[i].geometry.location.lat || '';
                                        lng = response.results[i].geometry.location.lng || '';
                                        if (fn instanceof Function) {
                                            fn({ lat: lat, lng: lng });
                                        }
                                        r = true;
                                        break;
                                    }
                                }

                                if (!r) {   // partial match results
                                    lat = response.results[0].geometry.location.lat || '';
                                    lng = response.results[0].geometry.location.lng || '';
                                    if (fn instanceof Function) {
                                        fn({ lat: lat, lng: lng });
                                    }
                                    df.resolve([{ lat: lat, lng: lng, status: response.status }, 'success']);
                                } else {
                                    df.resolve([{ lat: lat, lng: lng, status: response.status }, 'success']);
                                }
                            } else {
                                df.resolve([ { status: response.status } , 'success']);
                            }
                        } else {
                            df.resolve([{ status: 'FAIL' }, 'error']);
                        }
                    },
                    error: function(response) {
                        df.resolve([{ status: response.status }, 'error']);
                    }
                });
            };

            var yandexGeocoding = function(key) {
                $.ajax({
                    url: 'https://geocode-maps.yandex.ru/1.x/?format=json',
                    data: {
                        apikey: key,
                        geocode: address[0]
                    },
                    dataType: 'json',
                    success: function(data) {
                        var lat, lng;
                        if (data.response && data.response.GeoObjectCollection && data.response.GeoObjectCollection.featureMember) {
                            $.each(data.response.GeoObjectCollection.featureMember, function (index, res) {
                                if (res.GeoObject && res.GeoObject.Point && res.GeoObject.Point.pos && typeof res.GeoObject.Point.pos === 'string') {
                                    var coords = res.GeoObject.Point.pos.split(" ");
                                    if (coords.length === 2) {
                                        lng = coords[0];
                                        lat = coords[1];
                                        if (fn instanceof Function) {
                                            fn({ lat: lat, lng: lng });
                                        }
                                        df.resolve([{ lat: lat, lng: lng, status: 'OK' }, 'success']);
                                        return false;
                                    }
                                }
                            });
                            if (!lat || !lng) {
                                df.resolve([{ status: 'FAIL' }, 'error']);
                            }
                        } else {
                            df.resolve([{ status: 'FAIL' }, 'error']);
                        }
                    },
                    error: function(response) {
                        df.resolve([{ status: 'FAIL' }, 'error']);
                    }
                });
            };

            // options of geocoding
            if (geocoding.type === 'google' && geocoding.key) {
                googleGeocoding(geocoding.key);
            } else if (geocoding.type === 'yandex' && geocoding.key) {
                yandexGeocoding(geocoding.key);
            } else {
                df.resolve([{ geocoding: geocoding }, 'error']);
            }

            return df;
        },

        /**
        * Helper to append appropriate events to a checkbox list.
        * */
        initCheckboxList: function(ul) {
            ul = $(ul);

            var updateStatus = function(i, cb) {
                var self = $(cb || this);
                if (self.is(':checked')) {
                    self.parent().addClass('access-highlighted');
                } else {
                    self.parent().removeClass('access-highlighted');
                }
            };

            ul.find('input[type="checkbox"]')
                .click(updateStatus)
                .each(updateStatus);
            return ul;
        }

    }, options);
    $.wa.fieldTypesFactory(contactEditor);
    return contactEditor;
};//}}}

// one global instance of contact editor always exists
$.wa.contactEditor = $.wa.contactEditorFactory();

})(jQuery);
;
//
// Scripts for Access page in backend
//
var AccessPage = ( function($) {

    var Slider = ( function($) {

        Slider = function(options) {
            var that = this;

            // DOM
            that.$wrapper = options["$wrapper"];
            that.$accessWrapper = that.$wrapper.find(".t-access-wrapper");
            that.$accessSlider = that.$wrapper.find(".t-access-slider");
            that.$headerApps = that.$wrapper.find(".t-header-apps");
            that.$headerList = that.$headerApps.find(".t-apps-list");
            that.$apps = that.$headerList.find(".t-app-item");

            // VARS
            that.item_count = that.$apps.length;

            // DYNAMIC VARS
            that.type_class = false;
            that.left = 0;
            that.items_left = 0;
            that.access_wrapper_w = false;
            that.access_slider_w = false;
            that.item_w = false;

            // INIT
            that.initClass();
        };

        Slider.prototype.initClass = function() {
            var that = this;
            //
            that.detectSliderWidth();
            //
            that.showArrows();

            that.setWrapMaxWidth();
            $(window).on("resize", $.proxy(that.setWrapMaxWidth, that));

            $(window).on("resize", onResize);

            that.$wrapper.on("click", ".t-action", function () {
                var $link = $(this);
                if ($link.hasClass("left")) {
                    that.moveSlider( false );
                }
                if ($link.hasClass("right")) {
                    that.moveSlider( true );
                }
            });

            function onResize() {
                var is_exist = $.contains(document, that.$wrapper[0]);
                if (is_exist) {
                    that.reset();
                } else {
                    $(window).off("resize", onResize);
                }
            }
        };

        Slider.prototype.setWrapMaxWidth = function() {
            const that = this;

            const scrollbarWidth = window.innerWidth - document.documentElement.offsetWidth;
            const hasVerticalScroll = document.body.scrollHeight > window.innerHeight;
            let containerMaxWidth;

            if (hasVerticalScroll) {
                containerMaxWidth = window.innerWidth - scrollbarWidth - that.$wrapper.offset().left;
            } else {
                containerMaxWidth = window.innerWidth - that.$wrapper.offset().left;
            }

            that.$wrapper[0].style.setProperty('max-width', containerMaxWidth + 'px');
            $('body')[0].style.setProperty('overflow-x', 'hidden');
        }

        Slider.prototype.detectSliderWidth = function() {
            var that = this;

            that.access_wrapper_w = that.$accessWrapper.outerWidth();
            that.access_slider_w = that.$accessSlider.outerWidth();
            that.item_w = that.$apps.first().outerWidth();
        };

        Slider.prototype.showArrows = function() {
            var that = this;

            if (that.left >= 0) {
                if (that.access_wrapper_w < that.access_slider_w) {
                    setType("type-1");
                } else {
                    setType();
                }
            } else {
                if (that.access_wrapper_w < (that.access_slider_w - Math.abs(that.left) ) ) {
                    setType("type-2");
                } else {
                    setType("type-3");
                }
            }

            function setType( type_class ) {
                if (that.type_class) {
                    that.$accessWrapper.removeClass(that.type_class);
                    that.$headerApps.removeClass(that.type_class);
                }

                if (type_class) {
                    that.$accessWrapper.addClass(type_class);
                    that.$headerApps.addClass(type_class);
                    that.type_class = type_class;
                }
            }
        };

        Slider.prototype.setLeft = function( left ) {
            var that = this;

            that.$headerList.css({
                left: left
            });

            that.$accessSlider.css({
                left: left
            });

            that.left = left;
        };

        Slider.prototype.moveSlider = function( right ) {
            var that = this,
                step = 1,
                items_left = that.items_left,
                new_items_left, new_left;

            if (right) {
                new_items_left = items_left + step;
            } else {
                new_items_left = items_left - step;
                if (new_items_left < 0) {
                    new_items_left = 0;
                }
            }

            new_left = new_items_left * that.item_w;

            if ( new_left > -(that.access_wrapper_w - that.access_slider_w) ) {
                new_left = -(that.access_wrapper_w - that.access_slider_w)
            }

            that.items_left = new_items_left;
            that.setLeft(-new_left);
            that.showArrows();
        };

        Slider.prototype.reset = function() {
            var that = this;

            that.items_left = 0;
            that.setLeft(0);
            that.detectSliderWidth();
            that.showArrows();
        };

        return Slider;

    })($);

    var ElasticHeader = ( function($) {

        ElasticHeader = function(options) {
            var that = this;

            // DOM
            that.$wrapper = options["$wrapper"];
            that.$header = that.$wrapper.find(".t-elastic-header");

            // VARS
            that.wrapper_offset = that.$wrapper.offset();
            that.header_w = that.$header.outerWidth();
            that.header_h = that.$header.outerHeight();
            that.fixed_class = "is-fixed";

            // DYNAMIC VARS
            that.is_fixed = false;

            // INIT
            that.initClass();
        };

        ElasticHeader.prototype.initClass = function() {
            var that = this,
                $window = $(window);

            $window
                .on("scroll", onScroll)
                .on("resize", onResize);

            function onScroll() {
                var is_exist = $.contains(document, that.$header[0]);
                if (is_exist) {
                    that.onScroll( $window.scrollTop() );
                } else {
                    $window.off("scroll", onScroll);
                }
            }

            function onResize() {
                var is_exist = $.contains(document, that.$header[0]);
                if (is_exist) {
                    that.onResize();
                } else {
                    $window.off("resize", onResize);
                }
            }
        };

        ElasticHeader.prototype.onScroll = function( scroll_top ) {
            var that = this;

            var set_fixed = ( scroll_top > that.wrapper_offset.top );
            if (set_fixed) {
                that.$header
                    .addClass(that.fixed_class)
                    .css({
                        left: that.wrapper_offset.left,
                        width: that.header_w
                    });

                that.is_fixed = true;

            } else {

                that.$header
                    .removeClass(that.fixed_class)
                    .removeAttr("style");

                that.is_fixed = false;
            }
        };

        ElasticHeader.prototype.onResize = function() {
            var that = this;

            that.header_w = that.$wrapper.outerWidth();

            if (that.is_fixed) {
                that.$header.width(that.header_w);
            }
        };

        return ElasticHeader;

    })(jQuery);

    //

    AccessPage = function(options) {
        var that = this;

        // DOM
        that.$wrapper = options["$wrapper"];

        // VARS

        // DYNAMIC VARS
        that.slider = false;
        that.dialogs = [];

        // INIT
        that.initClass();
    };

    AccessPage.prototype.initClass = function() {
        var that = this;
        //
        that.initAccessSlider();
        //
        that.initElasticHeader();
        //
        that.initHover();
        //
        that.bindEvents();
    };

    AccessPage.prototype.bindEvents = function() {
        var that = this;

        that.$wrapper.on("click", ".t-access-status", function(event) {
            event.preventDefault();
            var $access = $(this);
            if ($access.hasClass("is-admin") && !that.dialogs.length) {
                $.team.content.load($access.data("uri"));
            } else {
                showAccessDialog($access, $access.data("app-id"), $access.data("user-id"));
            }
        });

        // When user changes rights of user, update the table
        var h;
        $(document).on('team_access_level_changed', h = function(evt, data) {
            if (!$.contains(document.body, that.$wrapper[0])) {
                $(document).off('team_access_level_changed', h);
                return;
            }
            var $access_status = that.$wrapper.find('table.t-access-table tr[data-user-id="'+data.contact_id+'"] .t-access-status[data-app-id="'+data.app_id+'"]');
            $access_status.removeClass('type-no type-limited type-full type-'+data.prev_level).addClass('type-'+data.new_level);
        });
    };

    AccessPage.prototype.initAccessSlider = function() {
        var that = this;

        if (!that.slider) {
            that.slider = new Slider({
                $wrapper: that.$wrapper
            });
        }
    };

    AccessPage.prototype.initElasticHeader = function() {
        var that = this;

        new ElasticHeader({
            $wrapper: that.$wrapper
        });
    };

    AccessPage.prototype.closeDialogs = function() {
        var that = this,
            result = false;

        // Prev Dialog
        if (that.dialogs.length) {

            $.each(that.dialogs, function(index, dialog) {
                if ( $.contains(document, dialog.$wrapper[0]) ) {
                    dialog.close();
                    result = true;
                }
            });

            // or $.each()splice
            that.dialogs = [];
        }

        return result;
    };

    AccessPage.prototype.initHover = function() {
        var that = this,
            $activeUser = false,
            $activeApp = false,
            hover_class = "access-highlighted";

        that.$wrapper.on("mouseenter", ".t-access-status", function() {
            render( $(this) );
        });

        that.$wrapper.on("mouseleave", ".t-access-status", clear);

        function render( $link ) {
            var user_id = $link.data("user-id"),
                app_id = $link.data("app-id");

            clear();

            if (user_id && app_id) {
                var $user = $("#t-user-" + user_id),
                    $app = $("#t-app-" + app_id);

                if ($user.length) {
                    $user.addClass(hover_class);
                    $activeUser = $user;
                }
                if ($app.length) {
                    $app.addClass(hover_class);
                    $activeApp = $app;
                }
            }
        }

        function clear() {
            if ($activeUser) {
                $activeUser.removeClass(hover_class);
                $activeUser = false;
            }
            if ($activeApp) {
                $activeApp.removeClass(hover_class);
                $activeApp = false;
            }
        }
    };

    return AccessPage;

})(jQuery);

( function($) {

/**
 * Dialog to set up access rights of a single user for a single app.
 * Used on access page, group access page, and access tab in profile.
 */
window.AccessDialog = ( function($) {

    function AccessDialog(options) {
        var that = this;

        // DOM
        that.$dialogWrapper = options["$wrapper"];
        that.$wrapper = that.$dialogWrapper.find(".dialog-body");
        that.$limitedContent = that.$wrapper.find(".t-limited-access-form");
        that.$submit_btn = that.$wrapper.find('[type="submit"]');

        //
        that.active_class = "selected";
        that.disabled_class = "disabled";

        // VARS
        that.wa_app_url = options["wa_app_url"];
        that.app_id = options["app_id"];
        that.contact_id = options["contact_id"];
        that.teamDialog = ( that.$dialogWrapper.data("dialog") || false );
        that.noticeToggle = getNoticeToggle( that.$wrapper );

        // DYNAMIC VARS
        that.$activeTab = that.$wrapper.find(".t-access-item." + that.active_class);
        that.active_access_id = that.$activeTab.data("access-id");
        that.is_locked = false;

        // INIT
        that.initClass();
    }

    AccessDialog.prototype.initClass = function() {
        var that = this;

        that.bindEvents();
    };

    AccessDialog.prototype.bindEvents = function() {
        var that = this,
        $access_list = that.$wrapper.find('.t-access-list');


        $access_list.waToggle({
            use_animation: false,
            change: function(event, target, toggle) {
                const $item = $(target),
                    is_disabled = $item.hasClass(that.disabled_class);

                that.$submit_btn.toggleClass('yellow', (toggle.$active.data('access-id') != that.active_access_id));
                if ( !is_disabled ) {
                    that.changeTab( $item );
                    if (that.teamDialog) {
                        that.teamDialog.resize();
                    }
                } else if (is_disabled) {
                    $.waDialog.alert({
                        text: $item.data('reason-disabled'),
                        button_title: 'Ok',
                        onClose(alert) {
                            toggle.$before.trigger('click')
                            alert.$wrapper.remove();
                        }
                    });
                }
            }
        });
        // Submit
        that.$wrapper.on("click","input[type=\"submit\"]", function(event) {
            event.stopPropagation();
            that.save();
        });

        that.$wrapper.on('change', 'input[type!="hidden"], select', function () {
            that.$submit_btn.toggleClass('yellow', !!(that.$limitedContent.find('tr[data-state-changed]').length));
        })
    };

    AccessDialog.prototype.changeTab = function( $link ) {
        var that = this,
            access_id = $link.data("access-id"),
            $limitedContent = that.$limitedContent,
            $access_hint = that.$wrapper.find(".js-access");

        that.$activeTab = $link;

        $access_hint.addClass('hidden').filter(`.${access_id}`).removeClass('hidden');

        // limited
        if (that.$limitedContent.length) {
            // "Limited" status is not saved right away. User can either press "Save" or "cancel"
            $limitedContent.toggleClass('hidden', !(access_id === 'limited'));
        }
    };

    AccessDialog.prototype.save = function() {
        var that = this,
            access_id = that.$activeTab.data("access-id"),
            access_code = getAccessCode( access_id );

        that.is_locked = true;
        that.noticeToggle.loading();

        var promise = setAppRight(access_code);

        if (access_id === "limited") {
            promise = promise.then( function() {
                var $form = that.$limitedContent.find("form");
                return $.post($form.attr('action'), $form.serialize(), 'json');
            });
        }

        promise.then( function() {
            triggerAccessLevelChangedEvent(that.active_access_id, access_id);
            that.active_access_id = access_id;
            that.noticeToggle.success();
            that.is_locked = false;
            that.teamDialog.close();
        });

        function triggerAccessLevelChangedEvent(prev_saved_access_id, new_access_id) {
            $(document).trigger("team_access_level_changed", {
                app_id: that.app_id,
                contact_id: that.contact_id,
                prev_level: prev_saved_access_id,
                new_level: new_access_id
            });
        }

        function setAppRight(value) {
            var href = that.wa_app_url + "?module=accessSave&action=rights&id=" +  that.contact_id;
            return $.post(href, {
                app_id: that.app_id,
                name: "backend",
                value: value
            }, "json");
        }

        function getAccessCode( access_id ) {
            var result = false,
                accessCodeTable = {
                    "no": 0,
                    "limited": 1,
                    "full": 2
                };

            if (accessCodeTable.hasOwnProperty(access_id)) {
                result = accessCodeTable[access_id];
            }

            return result;
        }
    };

    return AccessDialog;

    function getNoticeToggle( $wrapper ) {
        var $loading = $wrapper.find(".t-loading"),
            $success = $wrapper.find(".t-success"),
            visible_class = "is-visible",
            notice, timer;

        return notice = {
            loading: function() {
                $success.removeClass(visible_class);
                $loading.addClass(visible_class);
            },
            success: function() {
                $success.addClass(visible_class);
                $loading.removeClass(visible_class);
                if (timer) {
                    clearTimeout(timer);
                }
                timer = setTimeout(function() {
                    if ($.contains(document, $success[0])) {
                        notice.hide();
                    }
                }, 2000);
            },
            hide: function() {
                if (timer) {
                    clearTimeout(timer);
                }
                $loading.removeClass(visible_class);
                $success.removeClass(visible_class);
            }
        };
    }

})($);

//
// Scripts for access tab in contact profiles.
//
window.ProfileAccessTab = function(o) { "use strict";
    var login = o.login,
        password = o.password, // true/false
        contact_id = o.contact_id,
        wa_app_url = o.wa_app_url,
        url_change_api_token = o.url_change_api_token,
        loc = o.loc;

    initGroupsChecklist();
    initFormCreateUser();
    initFormChangeLogin();
    initFormChangePassword();
    initApiTokensEditor();

    if (!o.is_own_profile) {
        initToggleBan(o.wa_url, o.wa_framework_version);
    }

    if (o.is_own_profile) {
        initWebasystIDAuth();
    }

    initWebasystIDUnbindAuth();
    initWebasystIDHelpLink();

    initSelectorGlobalAccess(o.is_own_profile, o.contact_no_access, o.contact_groups_no_access);
    new UserAccessTable({
        $wrapper: $('#c-access-rights-wrapper'),
        contact_id: contact_id,
        is_frame: true
    });
    return;

    function initWebasystIDHelpLink() {
        $('.js-webasyst-id-help-link').on('click', function (e) {
            e.preventDefault();
            $('body').trigger('wa_waid_help_link');
        });
    }

    function initWebasystIDAuth() {
        $('.js-webasyst-id-auth').on('click', function (e) {
            e.preventDefault();
            $('body').trigger('wa_webasyst_id_auth');
        });
    }

    function initWebasystIDUnbindAuth() {
        $('.js-webasyst-id-unbind-auth').on('click', function (e) {
            e.preventDefault();
            $(document).trigger('wa_waid_unbind_auth', {id: contact_id});
        });
    }

    function initApiTokensEditor() {
        var $wrapper = $('#tc-api-tokens-filed'),
            $list_table = $wrapper.find('.js-api-tokens-list'),
            is_locked = false;

        $wrapper.on('click', '.js-remove-api-token', function (e) {
            e.preventDefault();
            var $token_item = $(this).parents('.js-token-item'),
                $icon = $token_item.find('.icon16'),
                token_id = $token_item.data('token'),
                data = {action: 'remove', token_id: token_id};

            if (!is_locked && token_id && confirm(loc['remove_ask'])) {
                is_locked = true;

                $icon.removeClass('no').addClass('loading');

                $.post(url_change_api_token, data, function(res) {
                    if (res.status && res.status === 'ok') {
                        // Remove tr from tokens list
                        $token_item.remove();
                        // Remove the entire list if it is empty
                        if ($list_table.find('.js-token-item').length === 0) {
                            $wrapper.remove();
                        }
                    } else {
                        is_locked = false;
                        $icon.removeClass('loading').addClass('no');
                    }
                }).always( function() {
                    is_locked = false;
                    $icon.removeClass('loading').addClass('no');
                });
            }
        });
    }

    function initGroupsChecklist() {//{{{
        var $form = $('#form-customize-groups');
        if (!$form.length) {
            return;
        }

        $('#open-customize-groups').on('click', function(e) {
            e.preventDefault();
            $(this).hide();
            $('#form-customize-groups').toggle();
        });

        $('#cancel-customize-groups').on('click', function(e) {
            e.preventDefault();
            const form = $('#form-customize-groups').hide();
            $('#open-customize-groups').show();
            form.find('.loading').hide();
            form.find('.state-error-hint').remove();
        });

        $form.submit(function() {
            var form = $(this);
            form.find('.state-error-hint').remove();
            form.find('.loading').show();
            $.post(form.attr('action'), form.serialize(), function(response) {
                if (response.status == 'ok') {
                    try {
                        $.team.sidebar.reload();
                        $.team.content.reload();
                        form.find('.loading').hide();
                        form.hide();

                        const href = $.team.profile.$profile_header_links.find('[data-section-id="access"]:first').attr('data-url'),
                            dialog = form.closest('.dialog').data('dialog');

                        dialog.$content.css({
                            position: 'relative',
                            overflow: 'hidden'
                        }).append('<div class="js-reload-spinner" style="position:absolute;top:0;bottom:0;left:0;right:0;display:grid;place-items:center;background:var(--background-color-blank);"><span class="spinner custom-p-16"></span></div>');
                        $.post(href, {userId: $.team.profile.user.id}, function (content) {
                            dialog.$content.css('overflow', 'auto').empty().html(content);
                        }).always(function () {
                            dialog.$content.css('overflow', 'auto').find('.js-reload-spinner').remove();
                        });
                    } catch (e) {
                    }
                    if (window.hasOwnProperty("profileTab")) {
                        window.profileTab.reload();
                    }
                } else if (response.status == 'fail') {
                    form.find('.c-checkbox-menu-container').after($('<span class="state-error-hint">'+response.errors.join('<br />')+'</span>'));
                }
            }, 'json');
            return false;
        });
    }//}}}

    function initFormCreateUser() {//{{{
        $("#c-credentials-form").submit(function () {
            var form = $(this);
            form.find('input.state-error').removeClass('error');
            form.find('.state-error-hint').remove();
            var login_input = form.find('.c-login-input');
            var new_login = $.trim(login_input.val());
            if (!new_login) {
                login_input.addClass('error').after('<p class="state-error-hint custom-mt-4">'+loc["Login is required"]+'</p>');
                return false;
            }

            var data = form.serializeArray();
            var $select = $('#c-access-rights-toggle');
            if ($select.val() === '1') {
                data = data.concat([
                    {
                        name: 'set_rights',
                        value: '1'
                    },
                    {
                        name: 'app_id',
                        value: 'webasyst'
                    },
                    {
                        name: 'name',
                        value: 'backend'
                    },
                    {
                        name: 'value',
                        value: 1
                    }
                ]);
            }

            $.post(form.attr('action'), data, function (r) {
                if (r.status === 'ok') {
                    form.hide();
                    login = new_login;
                    $('#c-login-block').show()
                        .find('.c-login-input').val(login).end()
                        .find('.c-login').text(login);
                    try {
                        $.team.sidebar.reload();
                    } catch (e) {
                    }
                    try {
                        window.profileTab.reload();
                    } catch (e) {
                    }
                } else if (r.status === 'fail') {
                    form.find('input[type="submit"]').parent().prepend($('<p class="state-error-hint custom-mt-4 custom-mb-8">'+r.errors.join('<br>')+'</p>'));
                }
            }, 'json');
            return false;
        }).find('.cancel').click(function(e) {
            e.preventDefault();
            $('#c-credentials-block').hide();
            return false;
        });
    }//}}}

    function initFormChangeLogin() {//{{{

        var $form = $("#c-login-form");
        var $login_input = $form.find('.c-login-input');

        $form.submit(function () {
            $('.dialog-footer .js-close-dialog').prop('disabled', true);
            $form.find('input.state-error').removeClass('error');
            $form.find('.state-error-hint').remove();
            var new_login = $.trim($login_input.val());
            if (login === new_login) {
                return false;
            }
            if (!new_login) {
                $login_input.addClass('error').after('<p class="state-error-hint custom-mt-4">'+loc["Login is required."]+'</p>');
                return false;
            }

            $form.find('.loading').show();
            $.post($form.attr('action'), $form.serialize(), function (r) {
                $form.find('.loading').hide();
                if (r.status === 'ok') {
                    $('#c-login-block').show();
                    $login_input.val(new_login);
                    $form.find('.c-login').text(new_login);
                    $form.find('.c-one-tab').show();
                    $form.find('.c-two-tab').hide();
                    if (!login) {
                        try {
                            window.profileTab.reload();
                        } catch (e) {
                        }
                    }
                    const new_url = window.location.href.replace(login, new_login);
                    login = new_login;
                    window.location.assign(new_url);
                } else if (r.status === 'fail') {
                    $('.dialog-footer .js-close-dialog').prop('disabled', false);
                    $form.find('input[type="submit"]').parent().prepend($('<p class="state-error-hint custom-mt-4 custom-mb-8">'+r.errors.join("\n<br>\n")+'</p>'));
                }
            }, 'json');
            return false;
        });

        $form.find('.c-tab-toggle').click(function(e) {
            e.preventDefault();

            $form.find('.c-one-tab,.c-two-tab').toggle();
            if ($login_input.is(':visible')) {
                $login_input.focus();
            }
            return false;
        });
    }//}}}

    function initFormChangePassword() {//{{{

        var $form = $('#c-password-form');
        var $password_input = $form.find('.c-password-input');
        var $confirm_password_input = $form.find('.c-confirm-password-input');

        $form.submit(function() {
            $form.find('input.state-error').removeClass('error');
            $form.find('.state-error-hint').remove();

            // do passwords match?
            if ($password_input.val() !== $confirm_password_input.val()) {
                $password_input.addClass('error');
                $confirm_password_input.after().after('<p class="state-error-hint custom-mt-4">'+loc["Passwords do not match."]+'</p>');
                return false;
            }

            $form.find('.loading').show();
            $.post($form.attr('action'), $form.serialize(), function(response) {
                $form.find('.loading').hide();
                if (response.status === 'ok') {
                    password = true;
                    $password_input.val('');
                    $confirm_password_input.val('');
                    $form.find('.c-one-tab').show();
                    $form.find('.c-two-tab').hide();
                    $('#c-password-block').show();
                } else if (response.status === 'fail') {
                     $confirm_password_input.after('<p class="state-error-hint custom-mt-4">'+response.errors.join('<br />')+'</p>');
                }
            }, 'json');

            return false;
        });

        // Show inputs when user clicks 'change password' link
        // and hide inputs when user clicks cancel.
        $form.find('.c-tab-toggle').click(function(e) {
            e.preventDefault();
            $form.find('.c-one-tab,.c-two-tab').toggle();
            var $input = $form.find('.c-password-input');
            if ($input.is(':visible')) {
                $input.focus();
            }
            return false;
        });
    }//}}}

    function initToggleBan(wa_url, wa_framework_version) {//{{{

        if (!$.fn.iButton) {
            $.ajax({
                cache: true,
                dataType: "script",
                url: wa_url + 'wa-content/js/jquery-plugins/ibutton/jquery.ibutton.min.js?' + wa_framework_version,
                success: function() {
                    initToggleBan(wa_url, wa_framework_version);
                }
            });
            return;
        }

        var $fields = $('.basic-user-fields'),
            $block_form = $('.js-block-user-reason-form');

        $block_form.on('click', '.js-block-user-cancel', function () {
            $block_form.hide();
        });

        $block_form.on('submit', function (e) {
            e.preventDefault();

            $.waDialog.confirm({
                title: `<i class="fas fa-exclamation-triangle smaller state-error"></i> ${$link_block.data('alert')}`,
                success_button_title: loc['blockUser'] || 'Ok',
                success_button_class: 'danger',
                cancel_button_title: loc["cancel"],
                cancel_button_class: 'light-gray',
                onSuccess(){
                    var $textarea = $block_form.find('.js-block-user-reason'),
                        text = $.trim($textarea.val());

                    $('.c-shown-on-enabled').hide();
                    var $loading = $link_unblock.parent().find('.loading').show();
                    $.post(wa_app_url+'?module=accessSave&action=ban&id='+contact_id, {
                        magic_word: 'please',
                        text: text
                    }, function(r) {
                        $loading.hide();
                        $block_form.hide();
                        if (r.status === 'ok') {
                            $fields.addClass('gray');
                            $('.c-shown-on-disabled').show();
                            $('#tc-user-access-disabled').show().html(r.data.access_disable_msg);
                            $.team.sidebar.reload();
                        }
                    }, 'json');
                }
            });
        });

        // Link to block contact
        var $link_block = $('#c-access-link-block');
        $link_block.on('click', function(e) {
            e.preventDefault();
            $block_form.show();
        });

        // Link to unblock contact
        var $link_unblock = $('#c-access-link-unblock').on('click', function(e) {
            e.preventDefault();

            $.waDialog.confirm({
                title: `<i class="fas fa-exclamation-triangle smaller state-error"></i> ${$link_unblock.data('alert')}`,
                success_button_title: loc['unblockUser'] || 'Ok',
                success_button_class: 'danger',
                cancel_button_title: loc["cancel"],
                cancel_button_class: 'light-gray',
                onOpen($dialog, dialog){
                    console.log($dialog, dialog)
                },
                onSuccess(){
                    $('.c-shown-on-disabled').hide();
                    var $loading = $link_unblock.parent().find('.loading').show();
                    $.post(wa_app_url+'?module=accessSave&action=unban&id='+contact_id, {
                        magic_word: 'please'
                    }, function() {
                        $loading.hide();
                        $fields.removeClass('gray');
                        $('.c-shown-on-enabled').show();
                        $('#tc-user-access-disabled').hide().html('');
                        const accessDialog = $('.t-sidebar-profile-dialog').data('dialog');
                        accessDialog.resize();
                        $.team.sidebar.reload();
                    });
                }
            });
        });

    }//}}}

    function initSelectorGlobalAccess(is_own_profile, contact_no_access, contact_groups_no_access) {//{{{
        var $select = $('#c-access-rights-toggle');
        var $confirm_wrapper = $('#access-rights-toggle-confirm');
        var last_select_value = $select.val();

        if (contact_no_access) {
            $('.c-shown-on-access').hide();
        } else {
            $('.c-shown-on-access').show();
        }

        initForm();

        $confirm_wrapper.on('click', '.cancel', function() {
            $select.val(last_select_value);
            $confirm_wrapper.hide();
        });

        $confirm_wrapper.on('click', '.button', function() {
            $confirm_wrapper.hide();
            updateFormAndSave();
        });

        $select.change(function() {
            if (!login) {
                initForm(true);
                return;
            }

            $('#c-access-rights-hint-warning').hide();
            $('#c-access-rights-hint-customize').hide();
            var new_select_value = $select.val();
            if (new_select_value === undefined) {
                new_select_value = '1';
            }

            if (new_select_value === last_select_value) {
                $confirm_wrapper.hide();
            } else {
                $confirm_wrapper.show();
            }
        });

        function updateFormAndSave() {
            if (initForm(true)) {
                saveUserAccess();
            }
        }

        /**
         * @param {boolean|undefined} is_update - is form need to update after some state changed. On first init is_update must be FALSE (default)
         * @return {boolean}
         */
        function initForm(is_update) {
            $('#c-access-rights-hint-warning').hide();
            $('#c-access-rights-hint-customize').hide();

            var new_select_value = $select.val();
            if (new_select_value === undefined) {
                new_select_value = '1';
            }

            switch(new_select_value) {
                case 'remove':
                    $('#c-credentials-block').hide();
                    $('#c-login-block').hide();
                    $('#c-password-block').hide();
                    if (contact_groups_no_access) {
                        $('#c-access-rights-by-app').hide();
                        $('.c-shown-on-access').hide();
                        break;
                    }
                    $select.val(last_select_value || '0');
                    $('#c-access-rights-hint-warning').show();
                    return false;
                case '0':
                    if (!login && !password) {
                        $('#c-credentials-block').show()
                            .find('.c-login-input').focus().end()
                            .find('.cancel').one('click.access', function() {
                                $select.val(last_select_value);
                                updateFormAndSave();
                            });
                        return false;
                    } else {
                        if (login) {
                            var $apps_access_rights = $('#c-access-rights-by-app');

                            $apps_access_rights.show();
                            if (is_update) {
                                $apps_access_rights.find('.t-access-status').removeClass('type-no type-limited type-full').addClass('type-no');
                            }

                            $('.c-shown-on-access').show();
                            $('#c-login-block').show();
                            $('#c-password-block').show();
                            break;
                        } else {
                            $('#c-login-block').show()
                                .find('.cancel').one('click.access', function() {
                                    $select.val(last_select_value);
                                    updateFormAndSave();
                                }).end()
                                .find('.c-tab-toggle:first').click();
                            $('#c-password-block').show();
                            return false;
                        }
                    }
                case '1':
                    if (!login && !password) {
                        $('#c-credentials-block').show()
                            .find('.c-login-input').focus().end()
                            .find('.cancel').one('click.access', function() {
                                $select.val(last_select_value);
                                updateFormAndSave();
                            });
                        return false;
                    } else {
                        if (login) {
                            $('#c-access-rights-by-app').hide();
                            $('.c-shown-on-access').show();
                            $('#c-login-block').show();
                            $('#c-password-block').show();
                            break;
                        } else {
                            $('#c-login-block').show()
                                .find('.cancel').one('click.access', function() {
                                    $select.val(last_select_value);
                                    updateFormAndSave();
                                }).end()
                                .find('.c-tab-toggle:first').click();
                            $('#c-password-block').show();
                            return false;
                        }
                    }
                default:
                    return false;
            }

            if (is_own_profile) {
                $('#c-login-block').show();
                $('#c-password-block').show();
            }

            last_select_value = new_select_value;
            return true;
        }

        function saveUserAccess() {
            var new_select_value = $select.val();
            if (new_select_value === undefined) {
                new_select_value = '1';
            }

            (function() {
                switch(new_select_value) {
                    case '0':
                        // Limited access user
                        return makeIsUser1().then(function() {
                            return setAppRight('webasyst', 'backend', 0);
                        });
                    case '1':
                        // make superadmin
                        // also sets is_user=1 if it was 0
                        return setAppRight('webasyst', 'backend', 1);
                    case 'remove':
                        // revoke all access
                        return $.post(wa_app_url+'?module=accessSave&action=revoke', { id: contact_id }, 'json');
                }
            }()).then(function() {
                if (contact_groups_no_access && new_select_value == '0') {
                    $('#c-access-rights-hint-customize').show();
                } else {
                    $('#c-access-rights-hint-warning').hide();
                }
            });

            function makeIsUser1() {
                return $.post(wa_app_url+'?module=accessSave&action=makeuser', { id: contact_id }, 'json');
            }

            function setAppRight(app_id, name, value) {
                return $.post(wa_app_url+'?module=accessSave&action=rights&id='+contact_id, {
                    app_id: app_id,
                    name: name,
                    value: value
                }, 'json');
            }
        }
    }//}}}
};

/**
 * Table to set up per-app access rights for a single user or group.
 * Used on access profile page, as well as in group access page.
 */
window.UserAccessTable = function(o) { "use strict";
    var $wrapper = o.$wrapper,
        contact_id = o.contact_id, // may be negative if group
        is_frame = ( o.is_frame || false ); // need for dialog for detecting window scroll top

    // Open access dialog when user clicks on app status block
    $wrapper.on('click', '.t-access-status', function(event) {
        event.preventDefault();
        var $access = $(this);
        showAccessDialog($access, $access.data('app-id'), contact_id, true, is_frame);
    });

    // Update app status block when access rights change
    var h;
    $(document).on('team_access_level_changed', h = function(evt, data) {
        if (!$.contains(document.body, $wrapper[0])) {
            $(document).off('team_access_level_changed', h);
            return;
        }
        $wrapper.find('.t-access-status[data-app-id="'+data.app_id+'"]')
            .removeClass('type-no type-limited type-full type-'+data.prev_level)
            .addClass('type-'+data.new_level);
    });
};

/**
 * Dialog to set up access rights for a single user/group and single app.
 * Used on access page, group access page, and profile access tab.
 * @param $access    jQuery object to position center of the dialog above.
 * @param app_id     string
 * @param contact_id int    negative for group, positive for user
 * @param is_attach boolean set position near access column
 * @param is_frame boolean need for dialog for detecting window scroll top
 */
window.showAccessDialog = function($access, app_id, contact_id, is_attach, is_frame) {//{{{

    // Close all dialogs if exist
    $access.trigger('close');

    $.post($.team.app_url + "?module=access&action=dialog", {
        user_id: contact_id,
        app_id: app_id
    }, function(response) {
        var options = {
            html: response
        };

        if (is_frame && is_attach) {
            options.setPosition = function(area) {
                var $window = $(window),
                    window_w = $window.width(),
                    top = $access.offset().top;

                return {
                    top: top,
                    left: parseInt( (window_w - area.width)/2 )
                };
            }
        }

        $.waDialog(options);
    });

};//}}}

})(jQuery);
;
// Pages

var GroupPage = ( function($) {

    GroupPage = function(options) {
        var that = this;

        // DOM
        that.$wrapper = options["$wrapper"];

        // VARS
        that.group_id = options["group_id"];
        that.map_adapter = options["map_adapter"];
        that.latitude = options["latitude"];
        that.longitude = options["longitude"];
        that.address = options["address"];
        that.can_manage = options["can_manage"];

        // INIT
        that.initClass();
    };

    GroupPage.prototype.initClass = function() {
        var that = this;
        //
        that.bindEvents();
        //
        if (that.can_manage) {
            //
            that.initEditableName();
            //
            that.initEditableDescription();
        }
        //
        that.initInfoBlock();
        that.initMap();
    };

    GroupPage.prototype.bindEvents = function() {
        var that = this;

        that.$wrapper.on("click", ".js-open-map-link", function() {
            that.toggleMap();
        });

        that.$wrapper.on("click", ".js-edit-group", function(event) {
            event.preventDefault();
            if (that.group_id && !GroupManage.is_locked) {
                GroupManage.prototype.showEditGroupDialog(that.group_id);
            }
        });

        that.$wrapper.on("click", ".js-delete-group", function(event) {
            event.preventDefault();
            if (that.group_id && !GroupManage.is_locked) {
                GroupManage.prototype.showDeleteDialog(that.group_id);
            }
        });
    };

    GroupPage.prototype.toggleMap = function() {
        var that = this,
            $wrapper = that.$wrapper.find(".t-map-wrapper");

        $wrapper.slideToggle(200);
    };

    GroupPage.prototype.initMap = function() {
        const that = this;

        if (that.map_adapter === 'yandex') {
            ymaps.ready(init);
        } else {
            init();
        }

        function init() {
            const $map = that.$wrapper.find("#t-location-map");
            const map = new TeamMap($map, that.map_adapter);

            if (that.latitude !== '' && that.longitude !== '') {
                map.render(that.latitude, that.longitude);
            } else {
                map.geocode(that.address, renderMap);

                function renderMap(lat, lng) {
                    map.render(lat, lng);
                }
            }
        }
    };

    GroupPage.prototype.initEditableName = function() {
        const group = this;
        const $name = group.$wrapper.find('.js-name-editable').first();

        if (!$name) {
            return;
        }

        new TeamEditable($name, {
            groupId: group.group_id,
            reloadSidebar: true,
            api: {
                save: $.team.app_url + '?module=group&action=save'
            },
            target: 'data[name]'
        });
    };

    GroupPage.prototype.initEditableDescription = function() {
        const group = this;
        const $name = group.$wrapper.find('.js-desc-editable').first();

        if (!$name) {
            return;
        }

        new TeamEditable($name, {
            groupId: group.group_id,
            api: {
                save: $.team.app_url + '?module=group&action=save'
            },
            target: 'data[description]'
        });
    };

    GroupPage.prototype.initInfoBlock = function () {
        const that = this;
        const $info_block = that.$wrapper.find('.t-info-notice-wrapper');
        const $info_block_close = $info_block.find('.t-info-notice-toggle');
        const storage = new $.store();
        const key = 'team/empty_group_notice_hide';

        if (storage.get(key)) {
            $info_block.hide();
        } else {
            $info_block.show();
        }

        $info_block_close.on('click', function (event) {
            event.preventDefault();

            storage.set(key, 1);
            $info_block.remove();
        });
    };

    return GroupPage;

})(jQuery);

var GroupManage = ( function($) {

    GroupManage = function(options) {
        var that = this;

        // DOM
        that.$wrapper = options["$wrapper"];
        that.$groupUsersW = that.$wrapper.find(".t-users-list.is-used-list");
        that.$groupUsersHint = that.$wrapper.find(".t-empty-users-in-group");
        that.$otherUsersW = that.$wrapper.find(".t-users-list.is-unused-list");
        that.$otherUsersHint = that.$wrapper.find(".t-empty-users-outside-group");

        // VARS
        that.group_id = options["group_id"];
        that.hidden_class = "is-hidden";
        that.locales = options["locales"];

        // DYNAMIC VARS
        that.$sidebarLink = false;
        that.is_locked = false;
        that.xhr = false;
        that.group_count = that.$groupUsersW.find(".t-user-wrapper").length;
        that.other_count = that.$otherUsersW.find(".t-user-wrapper").length;

        // INIT
        that.initClass();
    };

    GroupManage.prototype.initClass = function() {
        var that = this;
        //
        that.bindEvents();
        //
        that.initAutoComplete();
        //
        that.initEditableName();
    };

    GroupManage.prototype.bindEvents = function() {
        var that = this;

        that.$wrapper.on("click", ".js-edit-group", function(event) {
            event.preventDefault();
            if (that.group_id && !that.is_locked) {
                that.showEditGroupDialog();
            }
        });

        that.$wrapper.on("click", ".js-delete-group", function(event) {
            event.preventDefault();
            if (that.group_id && !that.is_locked) {
                that.showDeleteDialog();
            }
        });

        that.$groupUsersW.on("click", ".js-move-user", function(event) {
            event.preventDefault();
            if (!that.is_locked) {
                that.moveUser( $(this).closest(".t-user-wrapper"), false );
            }
        });

        that.$otherUsersW.on("click", ".js-move-user", function(event) {
            event.preventDefault();
            if (!that.is_locked) {
                that.moveUser( $(this).closest(".t-user-wrapper"), true );
            }
        });
    };

    GroupManage.prototype.showEditGroupDialog = function(group_id) {
        var that = this,
            href = "?module=group&action=edit",
            data = {
                id: that.group_id || group_id
            };

        if (!that.is_locked) {
            that.is_locked = true;

            if (that.xhr) {
                that.xhr.abort();
                that.xhr = false;
            }

            that.xhr = $.get(href, data, function(response) {
                $.waDialog({
                    html: response
                });
                that.is_locked = false;
            });
        }
    };

    GroupManage.prototype.showDeleteDialog = function(group_id) {
        var that = this,
            href = $.team.app_url + "?module=group&action=deleteConfirm",
            data = {
                id: that.group_id || group_id
            };

        if (!that.is_locked) {
            that.is_locked = true;

            if (that.xhr) {
                that.xhr.abort();
                that.xhr = false;
            }

            that.xhr = $.get(href, data, function(html) {
                $.waDialog({
                    html: html
                });

                that.is_locked = false;
            });
        }
    };

    GroupManage.prototype.moveUser = function( $user, add ) {
        var that = this,
            data = {
                user_id: $user.data("user-id"),
                group_id: that.group_id
            },
            href;

        if (that.is_locked) {
            return;
        }

        // Save
        if (that.xhr) {
            that.xhr.abort();
            that.xhr = false;
        }

        if (add) {
            href = $.team.app_url + "?module=group&action=userAdd";
        } else {
            href = $.team.app_url + "?module=group&action=userRemove";
        }

        moveUser();

        that.xhr = $.post(href, data, function(response) {
            if (response.status !== "ok") {
                console.error('Error while sending data on ' + href, response)
            }
            that.is_locked = false;
        });

        function moveUser() {
            if (add) {
                that.$groupUsersW.append( $user );
                that.group_count++;
                that.other_count--;
            } else {
                that.$otherUsersW.prepend( $user );
                that.group_count--;
                that.other_count++;
            }

            if (that.group_count <= 0) {
                that.$groupUsersW.addClass(that.hidden_class);
                that.$groupUsersHint.removeClass(that.hidden_class);
            } else {
                that.$groupUsersW.removeClass(that.hidden_class);
                that.$groupUsersHint.addClass(that.hidden_class);
            }

            if (that.other_count <= 0) {
                that.$otherUsersW.addClass(that.hidden_class);
                that.$otherUsersHint.removeClass(that.hidden_class);
            } else {
                that.$otherUsersW.removeClass(that.hidden_class);
                that.$otherUsersHint.addClass(that.hidden_class);
            }

            that.setCount( that.group_count );
        }

    };

    GroupManage.prototype.setCount = function( count ) {
        var that = this,
            href = $.team.app_url + 'group/' + that.group_id + "/";

        if (!that.$sidebarLink) {
            that.$sidebarLink = $.team.sidebar.$wrapper.find('a[href="' + href + '"] ');
        }

        if (that.$sidebarLink.length) {
            var $li = that.$sidebarLink.closest("li"),
                $counter;

            // Render
            $li.find(".indicator").remove();
            $counter = $li.find(".count");
            $counter.text(count);

            // Save
            $.team.sidebar.saveCount(href, count);
        }
    };

    GroupManage.prototype.initAutoComplete = function() {
        var that = this,
            $field = that.$wrapper.find(".t-autocomplete-wrapper .t-input"),
            $hint = false,
            timeout = 0;

        $field.autocomplete({
            source: getSource,
            minLength: 2,
            open: function() {
                removeHint();
            },
            focus: function() {
                return false;
            },
            select: function( event, ui ) {
                if (ui.item.id) {
                    addUser(ui.item.id);
                }
                $field.val("");
                return false;
            }
        });

        function removeHint() {
            clearTimeout(timeout);

            if ($hint.length) {
                $hint.remove();
                $hint = false;
            }
        }

        function addHint( locale ) {
            var time = 1000;

            $hint = $('<span class="t-hint"><i class="fas fa-check text-green custom-mr-4"></i>' + locale + '</span>');
            $field.after($hint);
            timeout = setTimeout( removeHint, time);
        }

        function getSource( request, response ) {
            var href = $.team.app_url + "?module=autocomplete&type=user",
                data = {
                    term: request.term
                };

            if (that.group_id) {
                data.group_id = that.group_id;
            }

            $.post(href, data, function(data) {
                response( data );
            }, "json");
        }

        function addUser( user_id ) {
            const $link = that.$otherUsersW.find(`.t-user-wrapper[data-user-id="${user_id}"]`);
            if ($link.length) {
                that.moveUser( $link, true );
                addHint( that.locales["added"] );
            } else {
                addHint( that.locales["in_group"] );
            }
        }
    };

    GroupManage.prototype.initEditableName = function() {
        const group = this;
        const $name = group.$wrapper.find(".js-name-editable").first();

        if (!$name) {
            return;
        }

        new TeamEditable($name, {
            groupId: group.group_id,
            reloadSidebar: true,
            api: {
                save: $.team.app_url + '?module=group&action=save'
            },
            target: 'data[name]'
        });
    };

    return GroupManage;

})(jQuery);

// Dialogs

var GroupEditDialog = ( function($) {

    GroupEditDialog = function(options) {
        var that = this;

        // DOM
        that.$wrapper = options["$wrapper"];
        that.$block = that.$wrapper.find(".dialog-body");
        that.$form = that.$block;
        that.$iconToggle = that.$block.find(".t-icon-toggle");
        that.$addressToggle = that.$block.find('.t-address-toggle');
        that.$mapToggle = that.$block.find('.t-map-toggle');
        that.$submitButton = that.$form.find("input[type=\"submit\"]");
        that.$groupType = that.$form.find('[name="data[type]"]');

        // VARS
        that.selected_class = "selected";
        that.hidden_class = "hidden";
        that.has_error_class = "state-error";
        that.locales = options["locales"];
        that.dialog = that.$wrapper.data("dialog");

        // DYNAMIC VARS
        that.$activeIcon = that.$iconToggle.find("." + that.selected_class);
        that.is_locked = false;
        that.save_timeout = 0;
        // for map
        that.is_map_loading = false;
        that.map_type = options["map_type"] || "google";
        that.map_key = options["map_key"] || null;
        that.teamMap = null;
        // INIT
        that.bindEvents();
    };

    GroupEditDialog.prototype.bindEvents = function() {
        var that = this;

        that.$block.find(".js-type-toggle").waToggle({
            ready(toggle){
                if(toggle.$active.data('type') === 'location' && !that.teamMap && that.map_key) {
                    setTimeout(() => that.teamMap = that.initMap(that.map_type, that.map_key))
                }
            },
            change(event, target) {
                that.setType( $(target) );
                if(target.dataset.type === 'location' && !that.teamMap && that.map_key) {
                    that.teamMap = that.initMap(that.map_type, that.map_key);
                }
            }
        });

        that.$iconToggle.on("click", ".t-icon-item", function(event) {
            event.preventDefault();
            that.setIcon( $(this) );
        });

        that.$form.on("submit", function(event) {
            event.preventDefault();
            if (!that.is_locked) {
                that.save();
            }
        });

        // Remove errors hints
        var $fields = that.$form.find("input, textarea");
        $fields.on("mousedown", function() {
            var $field = $(this),
                has_error = $field.hasClass( that.has_error_class );

            that.$form.find('.js-submit-loading').remove();
            if (has_error) {
                $field
                    .removeClass(that.has_error_class)
                    .closest(".value")
                    .find(".state-error-hint").remove();
            }
        });

        // Set default icon
        const $icon_list = that.$form.find('.t-icon-list');
        if(!$icon_list.find('.t-icon-item.selected').length){
            that.setIcon( $icon_list.find('.t-icon-item:eq(0)') );
        }
    };

    GroupEditDialog.prototype.setType = function( $label ) {
        var that = this,
            is_group = $label.data("type") === "group";

        that.$groupType.val($label.data("type"))
        that.$iconToggle.toggleClass(that.hidden_class, !is_group);
        that.$addressToggle.toggleClass(that.hidden_class, is_group);
        that.$mapToggle.toggleClass(that.hidden_class, is_group);

        // resize
        that.dialog.resize();
    };

    GroupEditDialog.prototype.setIcon = function( $icon ) {
        var that = this,
            icon_class = $icon.data("icon-class");

        if ($icon.hasClass(that.selected_class)) {
            return false;
        }

        if (that.$activeIcon.length) {
            that.$activeIcon.removeClass(that.selected_class);
        }

        that.$form.find("input[name=\"data[icon]\"]")
            .val(icon_class)
            .trigger("change");

        $icon.addClass(that.selected_class);
        that.$activeIcon = $icon;
    };

    GroupEditDialog.prototype.save = function(try_num) {
        var that = this,
            href = "?module=group&action=save",
            data;

        try_num = try_num || 0;

        if (!that.is_locked) {
            that.is_locked = true;
            data = prepareData( that.$form.serializeArray() );

            if (data) {
                if (that.is_map_loading && try_num < 5) {
                    that.is_locked = false;
                    that.save_timeout = setTimeout( function() {
                        if ($.contains(document, that.$wrapper[0])) {
                            that.save(try_num + 1);
                        }
                    }, 1000);
                    return false;
                }

                that.$form.find('.js-submit-loading').remove();
                that.$submitButton.parent().append("<i class='fas fa-spin fa-spinner js-submit-loading wa-animation-spin speed-1000'></i>");

                var post = function () {
                    $.post(href, data, function(response) {
                        if (response.status == "ok") {
                            var content_uri = $.team.app_url + "group/" + response.data.id + "/manage/";
                            $.team.content.load( content_uri );
                            $.team.sidebar.reload();

                            const itemToSelect = $.team.sidebar.$body.find(`[data-group-id="${response.data.id}"]`);
                            $.team.sidebar.setItem(itemToSelect);
                            that.is_locked = false;
                            that.dialog.close();
                        }
                    }).always(function () {
                        that.$form.find('.js-submit-loading').remove();
                    })
                };

                var address = data['data[location][address]'],
                    lat = data['data[location][latitude]'],
                    lng = data['data[location][longitude]'];
                if (address && (!lat || !lng) && that.teamMap) {
                    that.teamMap.geocode(
                        address,
                        function (lat, lng) {
                            data['data[location][latitude]'] = lat;
                            data['data[location][longitude]'] = lng;
                            post();
                        },
                        function () {
                            post();
                        }
                    );
                    return;
                }

                post();



            } else {
                that.is_locked = false;
            }
        }

        function prepareData(data) {
            var result = {},
                errors = [];

            $.each(data, function(index, item) {
                result[item.name] = item.value;
            });

            if (!$.trim(result["data[name]"]).length) {
                errors.push({
                    field: "data[name]",
                    locale: "empty"
                });
            }

            if (errors.length) {
                showErrors(errors);
                return false;
            }

            return result;

            function showErrors( errors ) {
                // Remove old errors
                that.$form.find(".state-error-hint").remove();

                // Display new errors
                $.each(errors, function(index, item) {
                    var $field = that.$form.find("[name='" + item.field + "']");
                    if ($field.length) {
                        $field
                            .addClass(that.has_error_class)
                            .after('<p class="state-error-hint custom-my-0">' + that.locales[item.locale] + '</p>')
                    }
                });
            }
        }
    };

    GroupEditDialog.prototype.initMap = function( adapter ) {
        var that = this,
            $block = that.$block,
            $address = that.$addressToggle.find('.f-location-edit-address-input'),
            $longtitude = that.$addressToggle.find('.t-location-longitude-input'),
            $latitude = that.$addressToggle.find('.t-location-latitude-input'),
            $map = that.$mapToggle.find('.t-location-edit-map'),
            $hint = that.$addressToggle.find(".t-map-hint"),
            timeout = 0,
            teamMap;

        // init sizes otherwise map will not be shown
        if ($address.length > 0) {
            var width = that.$form.find(".value").first().width();
            $map.width(width);
            $map.height(width / 1.618);
        }

        // init map
        teamMap = new TeamMap($map, adapter);

        // first show on map
        var lng = $longtitude.val();
        var lat = $latitude.val();
        if (lng && lat) {
            openMap({
                lat: lat,
                lng: lng
            });
        }

        // bind events
        $address.on("change", function() {
            var address = $(this).val();
            if (address.length) {
                openMap(address);
            } else {
                $longtitude.val("");
                $latitude.val("");
                $map.hide(400, () => that.dialog.resize());
            }
        });

        $address.on("keyup", function() {
            clearTimeout(timeout);
            var address = $(this).val();
            if (address.length) {
                that.is_map_loading = true;
                timeout = setTimeout( function() {
                    openMap(address);
                }, 1000);
            } else {
                $longtitude.val("");
                $latitude.val("");
                $map.hide(400, () => that.dialog.resize());
            }
        });

        //
        function openMap(query) {
            clearTimeout(timeout);

            var is_address = $.type(query) === "string";
            if (is_address) {
                that.is_map_loading = true;
                teamMap.geocode(query, function(lat, lng) {
                    $latitude.val(lat);
                    $longtitude.val(lng);
                    $hint.hide();
                    openMap(lat, lng);
                    that.is_map_loading = false;
                }, function () {
                    $map.hide();
                    // correct top of dialog
                    $longtitude.val("");
                    $latitude.val("");
                    $hint.show();
                    that.is_map_loading = false;
                });
            } else {
                openMap(query.lat, query.lng);
            }

            function openMap(lat, lng) {
                if ($map.is(':hidden')) {
                    $map.show();
                }
                teamMap.render(lat, lng);
                $latitude.val(lat);
                $longtitude.val(lng);
                that.dialog.resize()
            }
        }

        return teamMap;
    };

    return GroupEditDialog;

})(jQuery);

var GroupDeleteDialog = ( function($) {

    GroupDeleteDialog = function(options) {
        var that = this;

        // DOM
        that.$wrapper = options["$wrapper"];
        that.$block = that.$wrapper.find(".t-dialog-block");
        that.$deleteButton = that.$wrapper.find('.js-delete-event');

        // VARS
        that.api_enabled = ( window.history && window.history.replaceState );
        that.group_id = options["group_id"];

        // DYNAMIC VARS
        that.is_locked = false;
        that.dialog = {};

        // INIT
        that.initClass();
    };

    GroupDeleteDialog.prototype.initClass = function() {
        var that = this;

        setTimeout(() => {
            that.dialog = that.$wrapper.data('dialog');
        });

        if (!that.is_locked) {
            that.$deleteButton.on("click", $.proxy(that.deleteFunction, that));
        }
    };

    GroupDeleteDialog.prototype.deleteFunction = function(event) {
        event.preventDefault();

        var that = this,
            href = "?module=group&action=delete",
            data = {
                id: that.group_id
            };

        that.is_locked = true;

        $.post(href, data, function(response) {
            if (response.status == "ok") {
                that.dialog.close();

                if (that.api_enabled) {
                    history.state.content_uri = $.team.app_url;
                    history.replaceState({
                        reload: true,
                        content_uri: $.team.app_url
                    }, "", $.team.app_url);

                    $.team.sidebar.reload();
                    $.team.content.reload();
                } else {
                    location.href = $.team.app_url;
                }

            }
        }, "json");
    };

    return  GroupDeleteDialog;

})(jQuery);
;
// Pages

var SettingsPage = ( function($) {

    SettingsPage = function($wrapper, options) {
        var that = this;

        // DOM
        that.$wrapper = $wrapper;
        that.$calendarToggle = that.$wrapper.find('#t-calendar-settings');
        that.$form = that.$wrapper.find('#calendar_settings');
        that.$submitButton = that.$wrapper.siblings('.bottombar').find('[type="submit"]');

        that.options = options;

        // DYNAMIC VARS
        that.$notice = false;
        that.is_locked = false;
        that.is_form_changed = false;
        that.xhr = false;

        // INIT
        that.initClass();
    };

    SettingsPage.prototype.initClass = function() {
        const that = this;

        that.bindEvents();
        that.initSortable();
    };

    SettingsPage.prototype.bindEvents = function() {
        var that = this;

        that.$calendarToggle.on('click', '.js-edit-calendar, .js-add-calendar', $.proxy(that.showEditDialog, that));

        that.$form.on('change', 'input, select, textarea', $.proxy(that.checkFormChanges, that));

        that.$form.on('submit', $.proxy(that.save, that));
    };

    SettingsPage.prototype.initSortable = function() {
        const that = this;

        that.$calendarToggle.sortable({
            animation: 150,
            handle: '.t-toggle',
            direction: 'vertical',
            filter: '.t-actions',
            onMove(event) {
                if(event.related.classList.contains('t-actions')) {
                    return -1
                }
            },
            onStart() {
                if (that.$notice) {
                    that.$notice.remove();
                    that.$notice = false;
                }
            },
            onEnd(event) {
                if (event.oldIndex !== event.newIndex) {
                    that.saveCalendarsSort(event.item);
                }
            }
        });
    };

    SettingsPage.prototype.checkFormChanges = function() {
        const that = this;

        if (that.is_form_changed) {
            return;
        }

        that.is_form_changed = true;
        that.$submitButton.addClass('yellow');
    }

    SettingsPage.prototype.showEditDialog = function(event) {
        event.preventDefault();

        const that = this;
        let data = {};

        const calendarId = parseInt($(event.target).closest('.t-calendar-item').data('id'));

        if (calendarId) {
            data['id'] = calendarId;
        }

        if (that.xhr) {
            that.xhr.abort();
            that.xhr = false;
        }

        that.xhr = $.post(that.options.api.editDialog, data, function( html ) {
            that.dialog = $.waDialog({
                html
            });
        });
    };

    SettingsPage.prototype.saveCalendarsSort = function(item) {
        const that = this;

        const $item = $(item);
        const href = $.team.app_url + '?module=settings&action=calendarsSortSave';
        const data = {
            calendars: getIndexArray()
        };

        if (that.xhr) {
            that.xhr.abort();
            that.xhr = false;
        }

        that.$notice = showLoadingNotice($item);

        that.xhr = $.post(href, data, function() {
            that.$notice.remove();
            that.$notice = showSavedNotice($item);

            setTimeout( function() {
                if (that.$notice && $.contains(document, that.$notice[0])) {
                    that.$notice.remove();
                }
            }, 1000);

            that.xhr = false;
        });

        function getIndexArray() {
            const result = [];
            const $calendars = that.$calendarToggle.find('.t-calendar-item');

            $calendars.each( function() {
                const $calendar = $(this);
                const id = $calendar.data('id');

                if (id && id > 0) {
                    result.push(id);
                }
            });

            return result;
        }

        function showLoadingNotice($item) {
            const $notice = $(`<span class="t-notice"><i class="fas fa-spin fa-spinner wa-animation-spin speed-1000"></i></span>`);
            $notice.appendTo($item);
            return $notice;
        }

        function showSavedNotice($item) {
            const $notice = $(`<span class="t-notice state-success"><i class="fas fa-check-circle"></i></span>`);
            $notice.appendTo($item);
            return $notice;
        }
    };

    SettingsPage.prototype.save = function(event) {
        event.preventDefault();

        const that = this;

        if (!that.is_form_changed || that.is_locked) {
            return;
        }

        const data = that.$form.serializeArray();

        that.$submitButton.append('<i class="fas fa-spinner wa-animation-spin speed-1000 custom-ml-4 js-profile-settings-spinner"></i>');

        that.is_locked = true;

        $.post(that.options.api.save, data, function(r) {
            if (r.status !== 'ok') {
                return;
            }

            that.is_form_changed = false;
            that.is_locked = false;
            that.$submitButton.removeClass('yellow');
            that.$submitButton.find('.js-profile-settings-spinner').remove();
        });
    };

    return SettingsPage;

})(jQuery);

// Dialogs

var CalendarEditDialog = ( function($) {

    CalendarEditDialog = function($wrapper, options) {
        var that = this;

        // DOM
        that.$wrapper = $wrapper;
        that.$block = that.$wrapper.find('.dialog-body');
        that.$form = that.$block;
        that.$styleWrapper = that.$block.find('.t-style-wrapper');
        that.$iconsWrapper = that.$block.find('.t-calendar-icons');
        that.$limitedToggle = that.$block.find('.t-limited-toggle');
        that.$limitedGroups = that.$block.find('.t-hidden-content');
        that.$colorToggle = that.$block.find('.t-color-toggle');
        that.$nameField = that.$block.find('input[name="data[name]"]');
        that.$iconField = that.$block.find('input[name="data[icon]"]');
        that.$inputStatusBg = that.$block.find('input[name="data[status_bg_color]"]');
        that.$inputStatusFont = that.$block.find('input[name="data[status_font_color]"]');
        that.$inputEventBg = that.$block.find('input[name="data[bg_color]"]');
        that.$inputEventFont = that.$block.find('input[name="data[font_color]"]');
        that.$pickerBgColor = that.$block.find('.js-bg-color');
        that.$badge_status = that.$block.find('.js-badge-preview.is-status');
        that.$badge_event = that.$block.find('.js-badge-preview.is-event');
        that.$badgeIcon = that.$block.find('.js-badge-icon');
        that.$badgeName = that.$block.find('.js-badge-name');
        that.$fields = that.$form.find('input, textarea');

        // VARS
        that.calendar_id = options['calendar_id'];
        that.teamDialog = that.$wrapper.data('dialog');
        that.options = options;

        // CSS CLASSES
        that.classes = {
            selected_class  : 'is-selected',
            hidden_class    : 'is-hidden',
            has_error_class : 'state-error'
        };

        that.$selectedStyleButton = that.$styleWrapper.find('.' + that.classes.selected_class);

        // DYNAMIC VARS
        that.is_locked = false;
        that.xhr = false;

        // INIT
        that.initClass();
    };

    CalendarEditDialog.prototype.initClass = function() {
        const that = this;

        that.bindEvents();
        that.initColorPicker();
        that.checkCustomColor();
    };

    CalendarEditDialog.prototype.bindEvents = function() {
        const that = this;

        that.$block.on('click', '.js-delete-calendar', $.proxy(that.showDeleteConfirm, that));

        that.$styleWrapper.on('click', '.t-style-item', $.proxy(that.setStyleToggle, that));

        that.$styleWrapper.on('click', '.js-custom-color', $.proxy(that.toggleCustomColor, that));

        that.$iconsWrapper.on('click', '.t-calendar-icons--item', $.proxy(that.setBadgeIcon, that));

        that.$form.on('submit', $.proxy(that.save, that));

        that.$fields.on('mousedown', $.proxy(that.removeErrors, that));

        that.$nameField.on('change keyup', $.proxy(that.setPreviewName, that));

        that.$limitedToggle.on('change', 'input:radio', $.proxy(that.toggleLimitSection, that));
    };

    CalendarEditDialog.prototype.checkCustomColor = function() {
        const that = this;

        if (that.$selectedStyleButton.length) {
            return;
        }

        that.$styleWrapper.find('.js-custom-color-check').removeClass('hidden');
        that.$colorToggle.removeClass('hidden');
    }

    CalendarEditDialog.prototype.setBadgeIcon = function(event) {
        event.preventDefault();

        const that = this;

        const $icon = $(event.target);
        const $svg = $icon.find('svg');
        const icon = `${$svg.attr('data-prefix')} fa-${$svg.attr('data-icon')}`;

        $icon.addClass(that.classes.selected_class).siblings().removeClass(that.classes.selected_class);
        that.$badgeIcon.html(`<i class="${icon}"></i>`);
        that.$iconField.val(icon);
    }

    CalendarEditDialog.prototype.toggleCustomColor = function(event) {
        event.preventDefault();

        const that = this;

        $(event.target).find('.js-custom-color-caret').toggleClass('fa-caret-down fa-caret-up');
        that.$colorToggle.toggleClass('hidden');
        that.teamDialog.resize();
    }

    CalendarEditDialog.prototype.toggleLimitSection = function(event) {
        const that = this;

        if (event.target.value.length) {
            that.$limitedGroups.show();
        } else {
            that.$limitedGroups.hide();
        }

        that.teamDialog.resize();
    }

    CalendarEditDialog.prototype.removeErrors = function(event) {
        const that = this;

        const $field = $(event.target);
        const has_error = $field.hasClass(that.classes.has_error_class);

        if (has_error) {
            $field
              .removeClass(that.classes.classes.has_error_class)
              .closest('.value')
              .find('.state-error-hint').remove();
        }
    }

    CalendarEditDialog.prototype.setStyleToggle = function(event) {
        const that = this;

        const $button = $(event.target);

        const font_color_status = $button.css('color');
        const bg_color_status = $button.css('background-color');
        const font_color = that.colorConvert(bg_color_status, -15).hex;
        const bg_color = that.colorConvert(bg_color_status, +40).hex;

        that.$selectedStyleButton.removeClass(that.classes.selected_class);
        that.setStyleData(font_color_status, bg_color_status);
        $button.addClass(that.classes.selected_class);
        that.$selectedStyleButton = $button;

        that.$styleWrapper.find('.js-custom-color-check').addClass('hidden');

        that.$colorToggle.addClass('hidden');

        that.$badge_status.css({
            'color': font_color_status,
            'background-color': bg_color_status,
        });

        that.$badge_event.css({
            'color': font_color,
            'background-color': bg_color,
        });
    };

    CalendarEditDialog.prototype.setStyleData = function(font_color, bg_color) {
        const that = this;

        if (!font_color.includes('#')) {
            font_color = rgbToHex(font_color);
        }

        if (!bg_color.includes('#')) {
            bg_color = rgbToHex(bg_color);
        }

        that.$badge_event[0].style.removeProperty('box-shadow');

        that.$inputStatusBg.val(bg_color).trigger('change');
        that.$inputStatusFont.val(font_color).trigger('change');
        that.$inputEventBg.val(that.colorConvert(bg_color, +40).hex).trigger('change');
        that.$inputEventFont.val(that.colorConvert(bg_color, -15).hex).trigger('change');
        that.$pickerBgColor.css('background-color', bg_color);

        function rgbToHex( color_string ) {
            let a;
            let b;

            a = color_string.split('(')[1].split(')')[0];
            a = a.split(',').splice(0,3);
            b = a.map(function(x){
                x = parseInt(x).toString(16);
                return (x.length === 1) ? '0'+x : x;
            });

            return '#' + b.join('');
        }
    };

    CalendarEditDialog.prototype.showDeleteConfirm = function(event) {
        event.preventDefault();

        const that = this;

        if (that.is_locked) {
            return;
        }

        const data = {
            id: that.calendar_id
        };

        that.is_locked = true;

        if (that.xhr) {
            that.xhr.abort();
            that.xhr = false;
        }

        that.xhr = $.get(that.options.api.showDeleteConfirm, data, function(html) {
            $.waDialog({
                html
            });

            that.is_locked = false;
            that.teamDialog.close();
        });
    };

    CalendarEditDialog.prototype.initColorPicker = function() {
        let dialog = this;

        var ColorPicker = ( function() {

            ColorPicker = function(options) {
                let that = this;

                // DOM
                that.$wrapper = options["$wrapper"];
                that.$field = that.$wrapper.querySelector(".t-color-field");
                that.$pick_color_btn = that.$wrapper.querySelector(".js-show-color-picker");

                // VARS
                that.pickr_options = {
                    el: that.$pick_color_btn,
                    theme: 'classic',
                    appClass: 'wa-pcr-app small',
                    lockOpacity: true,
                    position: 'right-start',
                    useAsButton: true,
                    container: dialog.$wrapper[0],
                    default: that.$field.value || '#42445a',
                    components: {
                        palette: true,
                        hue: true,
                    }
                }

                // DYNAMIC VARS

                // INIT
                that.initClass();
            };

            ColorPicker.prototype.initClass = function() {
                let that = this;

                const color_picker = Pickr.create(that.pickr_options)
                    .on('change', color =>  eventHandler(color));

                that.$wrapper.dataset['colorPicker'] = that;

                function eventHandler(color) {
                    let color_hex;
                    if (color.hasOwnProperty('toHEXA')) {
                        color_hex = color.toHEXA().toString(0);
                    }else{
                        color_hex = color.target.value;
                    }

                    that.$field.value = color_hex;
                    that.$pick_color_btn.style.backgroundColor = color_hex;

                    if (that.$pick_color_btn.classList.contains('js-bg-color')) {
                        dialog.$badge_status.css('background-color', color_hex);
                        dialog.$badge_event.css('background-color', dialog.colorConvert(color_hex, +40).hex);
                        dialog.$badge_event.css('color', color_hex);

                        dialog.$form.find('[name="data[status_bg_color]"]').val(color_hex);
                        dialog.$form.find('[name="data[bg_color]"]').val(dialog.colorConvert(color_hex, +40).hex);
                        dialog.$form.find('[name="data[font_color]"]').val(color_hex);
                    }

                    if (that.$pick_color_btn.classList.contains('js-font-color')) {
                        dialog.$badge_status.css('color', color_hex);
                        dialog.$form.find('[name="data[status_font_color]"]').val(color_hex);
                    }

                    dialog.$styleWrapper.find('.js-custom-color-check').removeClass('hidden');
                    dialog.$selectedStyleButton.removeClass(dialog.classes.selected_class);
                }

                that.$field.addEventListener('keyup', eventHandler, false)

            };

            return ColorPicker;

        })();

        dialog.$styleWrapper.find('.t-color-toggle .t-toggle').each(function () {
            new ColorPicker({
                $wrapper: this
            })
        });
    }

    CalendarEditDialog.prototype.setPreviewName = function(event) {
        const that = this;

        const finalValue = event.target.value.length ? event.target.value : that.options.locales.preview;

        that.$badgeName.text(finalValue);
    };

    CalendarEditDialog.prototype.colorConvert = function(hex, brightness = 0) {
        let r = 0;
        let g = 0;
        let b = 0;

        if (hex.includes('#')) {
            // Convert hex to RGB first
            if (hex.length === 4) {
                r = '0x' + hex[1] + hex[1];
                g = '0x' + hex[2] + hex[2];
                b = '0x' + hex[3] + hex[3];
            } else if (hex.length === 7) {
                r = '0x' + hex[1] + hex[2];
                g = '0x' + hex[3] + hex[4];
                b = '0x' + hex[5] + hex[6];
            }
        }else{
            // Parse RGB
            let rgb = hex.split('(')[1].split(')')[0].split(',').splice(0,3);
            r = rgb[0];
            g = rgb[1];
            b = rgb[2];
        }
        r /= 255;
        g /= 255;
        b /= 255;

        let cmin = Math.min(r,g,b);
        let cmax = Math.max(r,g,b);
        let delta = cmax - cmin;
        let h = 0;
        let s = 0;
        let l = 0;

        if (delta === 0) {
            h = 0;
        }else if (cmax === r) {
            h = ((g - b) / delta) % 6;
        }else if (cmax == g) {
            h = (b - r) / delta + 2;
        }else {
            h = (r - g) / delta + 4;
        }

        h = Math.round(h * 60);

        if (h < 0) {
            h += 360;
        }

        l = (cmax + cmin) / 2;
        s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));
        s = +(s * 100).toFixed();
        l = +(l * 100).toFixed();

        if (brightness !== 0) {
            let ratio = 20;

            if (l >= 50) {
                l = l - ratio;
            }

            if (brightness > 0) {
                l = l + parseInt(brightness, 10);
                if (l >= 100) {
                    l = l - 10
                }
            }else if(brightness < 0) {
                l = l + parseInt(brightness, 10)
            }
        }

        let result_obj = {
            hsl: `hsl(${h},${s}%,${l}%)`
        }

        // convert hsl to hex
        l /= 100;
        const a = s * Math.min(l, 1 - l) / 100;
        const f = n => {
            const k = (n + h / 30) % 12;
            const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
            return Math.round(255 * color).toString(16).padStart(2, '0');   // convert to Hex and prefix "0" if needed
        };

        result_obj.hex = `#${f(0)}${f(8)}${f(4)}`;

        return result_obj;
    }

    CalendarEditDialog.prototype.save = function(event) {
        event.preventDefault();

        const that = this;

        if (that.is_locked) {
            return;
        }

        const data = prepareData( that.$form.serializeArray() );

        if (!data) {
            console.warn('have no data to save');
            that.is_locked = false;
            that.teamDialog.close();
            return;
        }

        that.is_locked = true;

        $.post(that.options.api.save, data, function(response) {
            if (response.status !== 'ok') {
                console.warn(response);
                return;
            }

            that.is_locked = false;
            $.team.content.reload();
            $.team.sidebar.reload();
            that.teamDialog.close();
        });

        function prepareData(data) {
            let result = {};
            const errors = [];

            $.each(data, function(index, item) {
                result[item.name] = item.value;
            });

            if (!result['data[is_limited]']) {
                delete result['data[is_limited]'];
            }

            if (!$.trim(result['data[name]']).length) {
                errors.push({
                    field: 'data[name]',
                    locale: 'empty'
                });
            }

            if (errors.length) {
                showErrors(errors);
                return false;
            }

            return result;

            function showErrors(errors) {
                // Remove old errors
                that.$form.find('.state-error-hint').remove();

                // Display new errors
                $.each(errors, function(index, item) {
                    const $field = that.$form.find(`[name="${item.field}"]`);

                    if ($field.length) {
                        $field
                            .addClass(that.classes.has_error_class)
                            .after(`<div class="state-error-hint custom-mt-4">${that.options.locales[item.locale]}</div>`);
                    }
                });
            }
        }
    }

    return CalendarEditDialog;

})(jQuery);

var CalendarDeleteDialog = ( function($) {

    CalendarDeleteDialog = function(wrapper, options) {
        var that = this;

        // DOM
        that.$wrapper = wrapper;
        that.$block = that.$wrapper.find('.dialog-body');
        that.$deleteButton = that.$block.find('.js-delete-calendar');

        // VARS
        that.options = options;

        // DYNAMIC VARS
        that.is_locked = false;

        // INIT
        that.initClass();
    };

    CalendarDeleteDialog.prototype.initClass = function() {
        var that = this;

        that.$deleteButton.on('click', $.proxy(that.deleteCalendar, that));
    };

    CalendarDeleteDialog.prototype.deleteCalendar = function(event) {
        event.preventDefault();

        const that = this;

        if (that.is_locked) {
            return;
        }

        const data = {
            id: that.options['calendar_id']
        };

        that.is_locked = true;

        $.post(that.options.api.delete, data, function(response) {
            if (response.status !== 'ok') {
                console.warn(response);

                return;
            }

            $.team.content.reload();
            that.$wrapper.data('dialog').close();
        }, 'json');
    };

    return CalendarDeleteDialog;

})(jQuery);
;
var SiteApiTokenPage = ( function($) {

    SiteApiTokenPage = function(options) {
        var that = this;

        // DOM
        that.$wrapper = options["$wrapper"];

        // VARS
        that.locale = options["locale"];

        // DYNAMIC VARS

        // INIT
        that.initClass();
    };

    SiteApiTokenPage.prototype.initClass = function() {
        var that = this;

        that.initRemoveApiToken();
    };

    SiteApiTokenPage.prototype.initRemoveApiToken = function() {
        var that = this,
            $list_table = that.$wrapper.find('.js-api-tokens-list'),
            is_locked;

        that.$wrapper.on('click', '.js-remove-api-token', function (e) {
            e.preventDefault();
            e.stopImmediatePropagation();
            var $token_item = $(this).closest('.js-token-item'),
                $icon = $token_item.find('svg'),
                token_id = $token_item.data('token'),
                contact_id = $token_item.data('contact-id'),
                href = '?module=apiTokensRemove',
                data = {action: 'remove', token_id: token_id, contact_id: contact_id};

            $.waDialog.confirm({
                title: that.locale['remove_ask'],
                success_button_title: that.locale.delete,
                success_button_class: 'danger',
                cancel_button_title: that.locale.cancel,
                cancel_button_class: 'light-gray',
                onSuccess() {
                    if (is_locked && !token_id) {
                        console.warn(`System error. is_locked=${is_locked}. token_id=${token_id}`);
                        return;
                    }

                    is_locked = true;

                    $icon.removeClass('fa-times').addClass('fa-spin fa-spinner wa-animation-spin speed-1000');

                    $.post(href, data, function(res) {
                        if (res.status && res.status === 'ok') {
                            // Remove tr from tokens list
                            $token_item.remove();
                            // Remove the entire list if it is empty
                            if ($list_table.find('.js-token-item').length === 0) {
                                //that.$wrapper.remove();
                            }
                        } else {
                            is_locked = false;
                            $icon.removeClass('fa-spin fa-spinner wa-animation-spin speed-1000').addClass('fa-times');
                        }
                    }).always( function() {
                        is_locked = false;
                        $icon.removeClass('fa-spin fa-spinner wa-animation-spin speed-1000').addClass('fa-times');
                    });
                }
            });
        });
    };

    return SiteApiTokenPage;

})(jQuery);
;
var UserList = ( function($) {

    UserList = function(options) {
        var that = this;

        // DOM
        that.$wrapper = options['$wrapper'];
        that.$items = that.$wrapper.find('.t-user-wrapper');
        that.$draggableItems = that.$wrapper.find('.js-move-user');

        // INIT
        that.initClass();
    }

    UserList.prototype.initClass = function() {
        const that = this;

        that.initHightlight();
        that.initDraggable();
    }

    UserList.prototype.initDraggable = function() {
        const that = this;

        let $dropZone;
        const drop_class = 't-drop-here';

        // blur editable name & description
        $('.js-move-user').mousedown(function(){
            document.activeElement.blur();
        });

        that.$draggableItems.draggable({
            helper: 'clone',
            delay: 200,
            handle: '.userpic, .details',
            appendTo: document.body,
            start: function(event, ui) {
                ui.helper
                    .addClass('is-clone align-center list')
                    .find(' > *:not(.userpic, .image)')
                    .addClass('hidden')
                    .end()
                    .find(' > a')
                    .css({
                        'border': '0.1875rem solid var(--thumbs-highlighted-color)',
                        'border-radius': '50%',
                        'display': 'inline-block'
                    })
                ;

                $dropZone = $.team.sidebar.$wrapper.find('.js-drop-block');
                if ($dropZone) {
                    $dropZone.addClass(drop_class);
                }
            },
            stop: function(event, ui) {
                const $helper = ui.helper;
                const $clone = $helper.clone();
                const time = 300;

                $clone.insertAfter($helper).fadeOut(time * .9);

                setTimeout( function() {
                    $clone.remove();
                }, time);

                if ($dropZone) {
                    $dropZone.removeClass(drop_class);
                }
            },
        });
    }

    UserList.prototype.initHightlight = function() {
        const that = this;
        let updateDate = $.team.sidebar.options.link_count_update_date;

        if (!updateDate) {
            return;
        }

        updateDate = getDate(updateDate);

        that.$items.each(function() {
            const $item = $(this);
            const item_date = $item.data('update-datetime');

            if (item_date && item_date.length) {
                const itemDate = getDate(getDateArray(item_date));

                if (itemDate > updateDate) {
                    $item.find('.userpic').addClass('t-users-avatar-highlight');
                }
            }
        });

        function getDateArray(string) {
            const parts = string.split(' ');
            const part1 = parts[0].split('-');
            const part2 = parts[1].split(':');

            return {
                "year": parseInt(part1[0]),
                "month": parseInt(part1[1]),
                "day": parseInt(part1[2]),
                "hours": parseInt(part2[0]),
                "minutes": parseInt(part2[1]),
                "seconds": parseInt(part2[2])
            };
        }

        function getDate(array) {
            return new Date(array.year, (array.month - 1), array.day, array.hours, array.minutes, array.seconds);
        }
    }

    return UserList;

})(jQuery);
;
var WelcomePage = ( function($) {

    WelcomePage = function(options) {
        var that = this;

        // DOM
        that.$wrapper = options["$wrapper"];
        that.$inviteWrapper = that.$wrapper.find("#t-invite-wrapper");
        that.$inviteList = that.$inviteWrapper.find(".t-invite-list");

        // VARS
        that.locales = options["locales"];
        that.error_class = "state-error";

        // DYNAMIC VARS
        that.is_locked = false;
        that.switch_count = 3;

        // INIT
        that.initClass();
    };

    WelcomePage.prototype.initClass = function() {
        var that = this;

        // Disable ajax links
        $(document).on("ready", function () {
            $.team.content.is_enabled = false;
        });

        that.initWaToggle();

        that.bindEvents();
    };

    WelcomePage.prototype.bindEvents = function() {
        var that = this;

        that.$wrapper.on("click", ".js-skip-page", function(event) {
            event.stopPropagation();
        });

        that.$wrapper.on("click", ".js-send-invites", function(event) {
            event.preventDefault();
            if (!that.is_locked) {
                that.sendInvites();
            }
        });

        that.$inviteWrapper.on("click", ".js-add-invite", function(event) {
            event.preventDefault();
            that.addNewInvite();
        });

        that.$inviteWrapper.on("click", ".js-remove-invite", function(event) {
            event.preventDefault();
            $(this).closest("li").remove();
        });

        that.$inviteWrapper.on("click", "." + that.error_class, function() {
            that.removeErrors( $(this) );
        });
    };

    WelcomePage.prototype.initWaToggle = function() {
        var that = this,
            $accessToggle = that.$inviteWrapper.find(".js-access-toggle");

        $accessToggle.waToggle({
            change(event, target, toggle) {
                toggle.$wrapper
                    .find('[type="hidden"]')
                    .prop('checked', target.dataset.type === 'full')
                    .attr('checked', target.dataset.type === 'full')
            }
        });
    };

    WelcomePage.prototype.addNewInvite = function() {
        var that = this,
            html = that.$inviteWrapper.find(".t-invite-template").clone().html(),
            $template = $("<li>" + html + "</li>");

        that.switch_count = that.switch_count + 1;

        $template
            .find('[type="checkbox"]')
            .attr('id', `access_switch_${that.switch_count}`)
        $template
            .find('label')
            .attr('for', `access_switch_${that.switch_count}`)

        that.$inviteList.append($template);

        that.initWaToggle();
    };

    WelcomePage.prototype.sendInvites = function() {
        var that = this,
            href = $.team.app_url + "?module=welcome&action=save",
            data = prepareData(),
            $send_invites_btn = that.$wrapper.find('.js-send-invites');

        that.is_locked = true;
        $send_invites_btn.attr('disabled', that.is_locked).find('svg').toggleClass('hidden', !that.is_locked);

        if (data) {
            $.post(href, data, function(response) {
                if (response.errors && response.errors.length) {
                    showErrors(response.errors);
                } else {
                    location.href = $.team.app_url;
                }
            }).always( function() {
                that.is_locked = false;
                $send_invites_btn.attr('disabled', that.is_locked).find('svg').toggleClass('hidden', !that.is_locked);
            });
        } else {
            that.is_locked = false;
            $send_invites_btn.attr('disabled', that.is_locked).find('svg').toggleClass('hidden', !that.is_locked);
        }

        function prepareData() {
            var result = [],
                $items = that.$inviteList.find(".t-invite-item"),
                errors = [];

            $items.each( function(index) {
                var $email = $(this).find('[type="email"]'),
                    $access = $(this).find('[type="checkbox"]'),
                    email = $email.val(),
                    access = $access.prop("checked");

                if ( $.trim(email).length ) {
                    var is_email_good = checkEmail(email);
                    if (is_email_good) {
                        result.push({
                            name: "data[" + index + "][email]",
                            value: email
                        });

                        result.push({
                            name: "data[" + index + "][access]",
                            value: access
                        });
                    } else {
                        errors.push({
                            $field: $email,
                            locale: that.locales["incorrect"]
                        });
                    }
                }
            });

            if (errors.length) {
                that.displayErrors(errors);
                return false;
            }

            return (result.length) ? result : false;

            function checkEmail(email) {
                return email.match(".+@.+");
            }
        }

        function showErrors(errors) {
            var result = [];
            $.each(errors, function(i, error) {
                var name = error.name,
                    locale = error.text,
                    index = parseInt( name.replace(/[^0-9]/g, '') );

                var $field = that.$inviteList.find(".t-invite-item").eq(index).find('[type="email"]');
                if ($field.length || name == 'general') {
                    result.push({
                        $field: $field,
                        name: name,
                        locale: locale
                    });
                }
            });
            that.displayErrors(result);
        }
    };

    WelcomePage.prototype.removeErrors = function( $input ) {
        var that = this,
            error_class = that.error_class;

        if ($input) {
            $input.removeClass(error_class);
            $input.closest(".t-invite-item").find(".state-error-hint").remove();
        } else {
            that.$wrapper.find(".state-error-hint").remove();
            that.$wrapper.find("." + error_class).removeClass(error_class);
        }
    };

    WelcomePage.prototype.displayErrors = function(errors) {
        var that = this,
            error_class = that.error_class;

        that.removeErrors();

        $.each(errors, function(index, item) {
            var error = '<span class="state-error-hint" style="display: block">' + item.locale + '</span>';

            if (item.name == 'general') {
                that.$inviteWrapper.after( error );
            } else {
                item.$field
                    .addClass(error_class)
                    .closest(".t-invite-item")
                    .append( error );
            }
        });

    };

    return WelcomePage;

})(jQuery);
;
var LongActionProcess = ( function($) {

    var url = '';
    var process_id = '';
    var step_delay = 500;
    var rest_delay = 750;
    var timers_pull = [];
    var post_data = {};
    var instance = null;    // here will be this

    // List of callbacks
    var onCleanup,
        onReady,
        onProgress,
        onError,
        onWarning,
        onStart,
        onStop,
        onAlways;

    var stopped = false;

    var clearAllTimers = function() {
        while (timers_pull.length > 0) {
            var timer_id = timers_pull.shift();
            if (timer_id) {
                clearTimeout(timer_id);
            }
        }
    };

    var cleanup = function () {
        var data = $.extend(true, {}, post_data);
        data.processId = process_id;
        data.cleanup = 1;
        $.post(
            url,
            data,
            function(r) {
                onCleanup && onCleanup(r);
            }).always(function() {
                clearAllTimers();
            });
    };

    var step = function(delay) {
        if (stopped) {
            return;
        }
        delay = delay || step_delay;
        var timer_id = setTimeout(function() {
            var data = $.extend(true, {}, post_data);
            data.processId = process_id;
            $.post(
                url,
                data,
                function(r) {
                    if (!r) {
                        step(rest_delay);
                    } else if (r.ready) {
                        if (onReady) {
                            onReady.call(instance, r);
                        }
                        cleanup();
                    } else if (r.error) {
                        if (onError) {
                            onError.call(instance, r);
                        }
                    } else if (r.progress) {
                        if (onProgress) {
                            onProgress.call(instance, r);
                        }
                        step();
                    } else if (r.warning) {
                        if (onWarning) {
                            onWarning.call(instance, r);
                        }
                        step();
                    } else {
                        step(rest_delay);
                    }
                    if (onAlways) {
                        onAlways.call(instance, r);
                    }
                },
                'json'
            ).error(function() {
                step(rest_delay);
            });
        }, delay);
        timers_pull.push(timer_id);
    };

    var start = function() {
        onStart && onStart();
        var data = $.extend(true, {}, post_data);
        $.post(url, data,
            function(r) {
                if (r && r.processId) {
                    process_id = r.processId;
                    // invoke runner
                    step(100);
                    // invoke messenger
                    step(200);
                } else if (r && r.error) {
                    if (onError) {
                        onError.call(instance, r)
                    }
                } else {
                    if (onError) {
                        onError.call(instance, 'Server error');
                    }
                }
            }, 'json').error(function() {
                if (onError) {
                    onError.call(instance, 'Server error');
                }
            });
    };

    var stop = function() {
        stopped = true;
        if (onStop) {
            onStop.call(instance)
        }
        clearAllTimers();
    };

    var LongActionProcess = function(options) {
        if (!options.url) {
            throw new Error("Url is required");
        }

        url = options.url;
        step_delay = options.step_delay || step_delay;
        rest_delay = options.rest_delay || rest_delay;
        post_data = options.post_data || post_data;

        // init callbacks
        onCleanup = options.onCleanup;
        onReady = options.onReady;
        onProgress = options.onProgress;
        onError = options.onError;
        onWarning = options.onWarning;
        onStart = options.onStart;
        onStop = options.onStop;
        onAlways = options.onAlways;

        instance = this;

    };

    $.extend(LongActionProcess.prototype, {
        start: start,
        stop: stop
    });

    return LongActionProcess;

})(jQuery);;
// Team :: Map
var TeamMap = (function ($) {

    var TeamMap = function ($map, provider, options) {
        var that = this;

        options = options || {};

        // DOM
        if (!$map) {
            throw Error('DOM element is required');
        }
        that.$map = $($map);

        // VARS
        that.provider = provider;
        if (that.provider && ['google', 'yandex', 'disabled'].indexOf(that.provider) < 0) {
            console.error('Not supported map provider: %s'.replace('%s', that.provider));
        }

        that.map_info = null;

        that.initClass();
    };

    TeamMap.prototype.initClass = function() {
        var that = this;
    };

    TeamMap.prototype.render = function (lat, lng) {
        var that = this;
        switch (that.provider) {
            case 'google':
                return that.googleRender(lat, lng);
            case 'yandex':
                return that.yandexRender(lat, lng);
            default:
                return;
        }
    };

    TeamMap.prototype.googleRender = function (lat, lng) {
        const that = this;

        that.map_info = that.map_info || {};
        const latLng = new google.maps.LatLng(lat, lng);

        if (!that.map_info.map) {
            const options = {
                zoom: 12,
                center: latLng,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };
            that.map_info.map = new google.maps.Map(that.$map.get(0), options);
        }

        if (that.map_info.marker) {
            that.map_info.marker.setMap(null);
        }

        that.map_info.marker = new google.maps.Marker({
            position: latLng,
            map: that.map_info.map
        });
        that.map_info.map.setCenter(latLng);

        TeamMap.google_error_html = TeamMap.google_error_html || '';
        setTimeout(function () {
            if (that.$map.find('.gm-err-container').length) {
                const $err = that.$map.find('.gm-err-container');
                $err.find('.gm-err-message').last().after('<div class="gm-err-message">' + $.team.locales.map_check_your_key + '</div>');
                TeamMap.google_error_html = that.$map.find('.gm-err-container').parent().html();
            } else if (!that.$map.find('.gm-style').length) {
                if (TeamMap.google_error_html) {
                    that.$map.children().html(TeamMap.google_error_html);
                } else {
                    var html = '<div class="gm-err-container"><div class="gm-err-content"><div class="gm-err-icon"><img src="https://maps.gstatic.com/mapfiles/api-3/images/icon_error.png" draggable="false" style="user-select: none;"></div><div class="gm-err-title">:title:</div><div class="gm-err-message">:message1:</div><div class="gm-err-message">:message2:</div></div></div>';
                    html = html.replace(':title:', $.team.locales.map_error_title);
                    html = html.replace(':message1:', $.team.locales.map_error_message);
                    html = html.replace(':message2:', $.team.locales.map_check_your_key);
                    that.$map.children().html(html);
                }
            }
        }, 5000);
    };

    TeamMap.prototype.yandexRender = function (lat, lng) {
        const that = this;

        that.map_info = that.map_info || {};
        const coords = [ lat, lng ];

        if (!that.map_info.map) {
            const options = {
                zoom: 12,
                center: coords,
                controls: [
                    'zoomControl',
                    'fullscreenControl'
                ],
            };
            that.map_info.map = new ymaps.Map(that.$map.get(0), options);
        }

        if (that.map_info.marker) {
            that.map_info.map.geoObjects.remove(that.map_info.marker);
        }

        that.map_info.marker = new ymaps.Placemark(coords, null, { preset: 'islands#redDotIcon' });
        that.map_info.map.geoObjects.add(that.map_info.marker);
        that.map_info.map.setCenter(coords);
    };

    TeamMap.prototype.geocode = function (query, success, fail) {
        const that = this;

        switch (that.provider) {
            case 'google':
                return that.googleGeocode(query, success, fail);
            case 'yandex':
                return that.yandexGeocode(query, success, fail);
            default:
                if (fail) {
                    fail();
                } else if (success) {
                    success();
                }
                break;
        }
    };

    TeamMap.prototype.googleGeocode = function (query, success, fail) {
        const geocoder = new google.maps.Geocoder();
        let was_res = false;
        let too_late = false;

        geocoder.geocode( { 'address': query }, function(results, status) {
            was_res = true;
            if (too_late) {
                return;
            }
            if (status == google.maps.GeocoderStatus.OK) {
                const latLng = results[0].geometry.location;
                success(latLng.lat(), latLng.lng());
            } else {
                fail && fail();
            }
        });
        setTimeout(function () {
            if (!was_res) {
                too_late = true;
                fail && fail(true);
            }
        }, 5000);
    };

    TeamMap.prototype.yandexGeocode = function (query, success, fail) {
        ymaps.geocode(query, {
            results: 1
        }).then(function (res) {
            let found = 1;
            if (res.metaData && res.metaData.geocoder && ('found' in res.metaData.geocoder)) {
                found = res.metaData.geocoder.found;
            }
            if (found <= 0) {
                fail();
                return;
            }
            const firstGeoObject = res.geoObjects.get(0);
            const coords = firstGeoObject.geometry.getCoordinates();
            success(coords[0], coords[1]);
        }, function (err) {
            fail(err);
        });
    };

    return TeamMap;

})(jQuery);
;
class SwiperSlider {
    constructor(options) {
        this.container = options['selector'] || '.swiper-container';
        this.containerParent = document.querySelector(this.container).closest('#t-access-page');
        this.params = options['params'] || { };
        this.params.on = options['params']['on'] || { };
        this.events = options['events'] || { };
        this.calculate_group_size = options['calculateGroupSize'] || false;
        this.watch_nav = options['watchNav'] || false;
        this.set_container_width = options['setContainerWidth'] || false;
        this.swiper = { };

        this.init();
    }

    init() {
        const that = this;
        that.params.on.beforeInit = function(swiper) {
            if (that.calculate_group_size) {
                swiper.params.slidesPerGroup = that.calculateGroupSize(swiper);
                swiper.params.slidesPerView = that.calculateGroupSize(swiper);
                //swiper.params.slidesPerView = 'auto';
            }

            if (that.set_container_width) {
                that.setContainerWidth(swiper);
            }
        }

        that.swiper = new Swiper(that.container, that.params);

        that.bindEvents();

        if (that.watch_nav ) {
            that.showNavigation();
        }

        if (that.set_container_width) {
            that.setContainerWidth(that.swiper);
        }
    }

    setContainerWidth(swiper) {
        const that = this;
        swiper.onAny( () => {
            that.set_container_width.forEach(size => {
                const body_width = document.body.clientWidth;
                if(body_width <= size) {
                    swiper.$el.css('width', `${body_width}px`)
                }else{
                    swiper.$el.css('width', '')
                }
            })
        });
    }

    showNavigation(){
        const that = this,
            $left = that.swiper.navigation.prevEl,
            $right = that.swiper.navigation.nextEl;

        if (that.containerParent) {
            that.swiper.on('slideChange sliderMove', function(event) {
                if (event.isEnd) {
                    that.containerParent.classList.add('reachend');
                    $right.children[0].classList.add('hidden');
                    return;
                }

                if (event.isBeginning) {
                    that.containerParent.classList.add('reachstart');
                    $left.children[0].classList.add('hidden');
                    return;
                }

                that.containerParent.classList.remove('reachend');
                that.containerParent.classList.remove('reachstart');
                $right.children[0].classList.remove('hidden');
                $left.children[0].classList.remove('hidden');
            });
        }

        if ($left && $right) {
            $left.classList.toggle('hidden', that.swiper.isLocked);
            $right.classList.toggle('hidden', that.swiper.isLocked);

            that.swiper.on('lock unlock', () => {
                $left.classList.toggle('hidden', that.swiper.isLocked);
                $right.classList.toggle('hidden', that.swiper.isLocked);
            });
        }
    }

    /**
     * @desc Расчет выполняется для слайдов одинакового размера
     * @param swiper
     */
    calculateGroupSize(swiper) {
        const offset_before = swiper.params.slidesOffsetBefore || 0,
            offset_after = swiper.params.slidesOffsetAfter || 0,
            container_width = swiper.el.clientWidth - offset_before - offset_after,
            slide_width = swiper.wrapperEl.querySelector(`.${swiper.params.slideClass}`).clientWidth;

        return Math.round(container_width / slide_width);
    }

    bindEvents() {
        const that = this;
        for(let event in that.events) {
            if (that.events.hasOwnProperty(event)) {
                that.swiper.on(event, that.events[event]);
            }
        }
    }
}
;
